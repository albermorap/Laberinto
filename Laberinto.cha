<?xml version="1.0"?><st-source><component-created><name>Laberinto</name> <type>package</type></component-created><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>laberinto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberinto">laberinto	^laberinto</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberinto:">laberinto: anObject	laberinto := anObject</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	laberinto := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>JuegoLaberinto class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>ElementoMapa</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ElementoMapa</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ElementoMapa class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numHab </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="numHab">numHab	^numHab</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="numHab:">numHab: anObject	numHab := anObject</body></methods><methods><class-id>Habitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	numHab := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><class><name>Pared</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Pared</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>Puerta</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hab1 hab2 abierta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="hab1">hab1	^hab1</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="hab1:">hab1: anObject	hab1 := anObject</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="hab2">hab2	^hab2</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="hab2:">hab2: anObject	hab2 := anObject</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="abierta">abierta	^abierta</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="abierta:">abierta: anObject	abierta := anObject</body></methods><methods><class-id>Puerta</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	hab1 := nil.	hab2 := nil.	abierta := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numHab lados </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Laberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>habitaciones </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Laberinto</class-id> <category>accessing</category><body package="Laberinto" selector="habitaciones">habitaciones	^habitaciones</body></methods><methods><class-id>Laberinto</class-id> <category>accessing</category><body package="Laberinto" selector="habitaciones:">habitaciones: anObject	habitaciones := anObject</body></methods><methods><class-id>Laberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	habitaciones := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Laberinto class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="lados">lados	^lados</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="lados:">lados: anObject	lados := anObject</body></methods><methods><class-id>ElementoMapa</class-id> <category>initialize-release</category><body package="Laberinto" selector="entrar">entrar	self subclassResponsibility</body></methods><do-it>JuegoLaberinto organization addCategory: #operaciones</do-it><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto| hab1 hab2 puerta |hab1:=Habitacion new.hab1 numHab:1.hab2:=Habitacion new.hab2 numHab:2.puerta:=Puerta new.puerta hab1: hab1.puerta hab2: hab2.hab1 setLadoDir:#norte elemento:puerta.hab1 setLadoDir:#sur elemento:Pared new.hab1 setLadoDir:#este elemento:Pared new.hab1 setLadoDir:#oeste elemento:Pared new.hab2 setLadoDir:#sur elemento:puerta.hab2 setLadoDir:#norte elemento:Pared new.hab2 setLadoDir:#este elemento:Pared new.hab2 setLadoDir:#oeste elemento:Pared new.laberinto:=Laberinto new.laberinto addHab:hab1.laberinto addHab:hab2.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto | hab1 hab2 puerta | hab1:=Habitacion new. hab1 numHab:1. hab2:=Habitacion new. hab2 numHab:2. puerta:=Puerta new. puerta hab1: hab1. puerta hab2: hab2. hab1 setLadoDir:#norte elemento:puerta. hab1 setLadoDir:#sur elemento:Pared new. hab1 setLadoDir:#este elemento:Pared new. hab1 setLadoDir:#oeste elemento:Pared new. hab2 setLadoDir:#sur elemento:puerta. hab2 setLadoDir:#norte elemento:Pared new. hab2 setLadoDir:#este elemento:Pared new. hab2 setLadoDir:#oeste elemento:Pared new. laberinto:=Laberinto new. laberinto addHab:hab1. laberinto addHab:hab2.</body></methods><methods><class-id>Laberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	habitaciones := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>Laberinto organization addCategory: #operaciones</do-it><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="addHab:">addHab:unaHabitacion	habitaciones add:unaHabitacion</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabNum:">getHabNum:unId		</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="addHab:">addHab:unaHabitacion	habitaciones add:unaHabitacion</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabNum:">getHabNum:unId	^habitaciones detect:[:hab | hab id = unId] ifNone:['No existe']</body></methods><comment><class-id>ElementoMapa</class-id><body>ElementoMapa define los elementos del laberinto</body></comment><do-it>ElementoMapa organization addCategory: #operaciones</do-it><do-it>ElementoMapa organization addCategory: #operaciones</do-it><do-it>ElementoMapa classifySymbol: #entrar under: #operaciones</do-it><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabNum:">getHabNum:unId	^habitaciones detect:[:hab | hab habNum = unId] ifNone:['No existe']</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabNum:">getHabNum:unNumHab	^habitaciones detect:[:hab | hab numHab = unNumHab] ifNone:['No existe']</body></methods><remove-selector><class-id>Habitacion</class-id> <selector>lados</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>lados:</selector></remove-selector><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numHab </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Habitacion</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Habitacion</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Habitacion removeFromSystem</do-it><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id norte sur este oeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="id">id	^id</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="id:">id: anObject	id := anObject</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="norte">norte	^norte</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="norte:">norte: anObject	norte := anObject</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="sur">sur	^sur</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="sur:">sur: anObject	sur := anObject</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="este">este	^este</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="este:">este: anObject	este := anObject</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="oeste">oeste	^oeste</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="oeste:">oeste: anObject	oeste := anObject</body></methods><methods><class-id>Habitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	id := nil.	norte := nil.	sur := nil.	este := nil.	oeste := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	" *** This method was defined by ElementoMapa as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabNum:">getHabNum:unNumHab	^habitaciones detect:[:hab | hab id = unNumHab] ifNone:['No existe']</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar		Transcript show:'Estoy en la habitación ',self id printString</body></methods><do-it>Pared organization addCategory: #operaciones</do-it><methods><class-id>Pared</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar</body></methods><comment><class-id>Pared</class-id><body>Pared es un elemento del laberinto</body></comment><comment><class-id>Habitacion</class-id><body>Habitacion es un elemento del laberinto</body></comment><comment><class-id>Puerta</class-id><body>Puerta es un elemento del laberinto</body></comment><methods><class-id>Puerta</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	hab1 := nil.	hab2 := nil.	abierta := false.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>Puerta organization addCategory: #operaciones</do-it><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="alOtroLado">alOtroLado</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto | hab1 hab2 puerta |hab1:=Habitacion new.hab1 id:1.hab2:=Habitacion new.hab2 id:2.puerta:=Puerta new.puerta hab1: hab1.puerta hab2: hab2.hab1 setHabNorte:puerta.hab1 setHabSur:Pared new.hab1 setHabEste:Pared new.hab1 setHabOeste:Pared new.hab2 setHabSur:puerta.hab2 setHabNorte:Pared new.hab2 setHabEste:Pared new.hab2 setHabOeste:Pared new.laberinto:=Laberinto new.laberinto addHab:hab1.laberinto addHab:hab2.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto | hab1 hab2 puerta |hab1:=Habitacion new.hab1 id:1.hab2:=Habitacion new.hab2 id:2.puerta:=Puerta new.puerta hab1: hab1.puerta hab2: hab2.hab1 norte:puerta.hab1 sur:Pared new.hab1 este:Pared new.hab1 oeste:Pared new.hab2 sur:puerta.hab2 norte:Pared new.hab2 este:Pared new.hab2 oeste:Pared new.laberinto:=Laberinto new.laberinto addHab:hab1.laberinto addHab:hab2.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto | hab1 hab2 puerta |hab1:=Habitacion new.hab1 id:1.hab2:=Habitacion new.hab2 id:2.puerta:=Puerta new.puerta hab1: hab1.puerta hab2: hab2.hab1 norte:puerta.hab1 sur:Pared new.hab1 este:Pared new.hab1 oeste:Pared new.hab2 sur:puerta.hab2 norte:Pared new.hab2 este:Pared new.hab2 oeste:Pared new.laberinto:=Laberinto new.laberinto addHab:hab1.laberinto addHab:hab2.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto 	| hab1 hab2 puerta |	hab1:=Habitacion new.	hab1 id:1.	hab2:=Habitacion new.	hab2 id:2.	puerta:=Puerta new.	puerta hab1: hab1.	puerta hab2: hab2.	hab1 norte:puerta.	hab1 sur:Pared new.	hab1 este:Pared new.	hab1 oeste:Pared new.	hab2 sur:puerta.	hab2 norte:Pared new.	hab2 este:Pared new.	hab2 oeste:Pared new.	laberinto:=Laberinto new.	laberinto addHab:hab1.	laberinto addHab:hab2.</body></methods><do-it>juego:=JuegoLaberinto new.juego crearLaberinto</do-it><do-it>juego:=JuegoLaberinto new.juego crearLaberinto</do-it><do-it>laberinto:=juego crearLaberinto</do-it><do-it>juego:=JuegoLaberinto new.laberinto:=juego crearLaberinto</do-it><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabNum:">getHabNum:unId	^habitaciones detect:[:hab | hab id = unId] ifNone:['No existe']</body></methods><methods><class-id>Pared</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	Transcript show:'Te topaste con una pared'</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	self abierta	ifTrue:[Transcript show:'La puerta está abierta']	ifFalse:[Transcript show:'La puerta está cerrada']</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabNum:">getHabNum:unId	^habitaciones detect:[:hab | hab id == unId] ifNone:['No existe']</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabNum:">getHabNum:unId	^habitaciones detect:[:hab | hab id = unId] ifNone:['No existe']</body></methods><remove-selector><class-id>Laberinto</class-id> <selector>getHabNum:</selector></remove-selector><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabId:">getHabId:unId	^habitaciones detect: [:hab | hab id = unId] ifNone: ['No existe']. </body></methods><do-it>juego:=JuegoLaberinto new.laberinto:=juego crearLaberintolaberinto getHabId:1</do-it><do-it>juego:=JuegoLaberinto new.laberinto:=juego crearLaberintolaberinto getHabId:1</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 11, 2015' '7:50:18 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 19:50:18 on 11 de febrero de 2015."</do-it><do-it>juego:=JuegoLaberinto new.laberinto:=juego crearLaberinto</do-it><do-it>juego:=JuegoLaberinto new.laberinto:=juego crearLaberinto</do-it><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto 	| hab1 hab2 puerta |	hab1:=Habitacion new.	hab1 id:1.	hab2:=Habitacion new.	hab2 id:2.	puerta:=Puerta new.	puerta hab1: hab1.	puerta hab2: hab2.	hab1 norte:puerta.	hab1 sur:Pared new.	hab1 este:Pared new.	hab1 oeste:Pared new.	hab2 sur:puerta.	hab2 norte:Pared new.	hab2 este:Pared new.	hab2 oeste:Pared new.	laberinto:=Laberinto new.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><do-it>juego:=JuegoLaberinto new.laberinto:=juego crearLaberinto</do-it><do-it>laberinto getHabId:1</do-it><do-it>laberinto getHabId:1</do-it><comment><class-id>JuegoLaberinto</class-id><body>JuegoLaberinto contiene el laberintoInstance Variables:	laberinto	&lt;Laberinto&gt;	description of laberinto</body></comment><comment><class-id>Laberinto</class-id><body>Laberinto Instance Variables:	habitaciones	&lt;(Collection of: (ComponentDescription | ComponentRef | DocumentListItem | FlowListItem | FlowListItemTree | GenericSettingDescriptor | Habitacion | Hierarchy | JPEGColorComponent | MC_BTreeNode | ModularSettingsPageModule | NumberPrintPolicy | NumberReader | ObjectiveCRuntime1 | ObjectiveCRuntime2 | SAXElementContext | SettingsManagerPage | SettingSnapshot | StoreObject | Timer | TimestampPrintPolicy | TimestampReader | ViewBehavior | VisualPart))&gt;	description of habitaciones</body></comment><do-it>(laberinto getHabId:1) entrar</do-it><do-it>(laberinto getHabId:1) norte</do-it><do-it>(laberinto getHabId:1) norte</do-it><do-it>(laberinto getHabId:1) norte entrar</do-it><component-created><name>LaberintoFM</name> <type>package</type></component-created><component-property><name>LaberintoFM</name> <type>package</type><property>comment</property> <value>'Factory Mehtod del laberinto'</value></component-property><component-property><name>Laberinto</name> <type>package</type><property>comment</property> <value>'Laberinto'</value></component-property><class><name>LaberintoFM</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoFM</package></attributes></class><methods><class-id>LaberintoFM</class-id> <category>initialize-release</category><body package="LaberintoFM" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>LaberintoFM class</class-id> <category>instance creation</category><body package="LaberintoFM" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>LaberintoFM</class-id><body>LaberintoFM tiene méotodos Factory Method</body></comment><do-it>LaberintoFM organization addCategory: #operaciones</do-it><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPared">fabricarPared	^Pared new.</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPuerta">fabricarPuerta	^Puerta new.</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarHabitacion">fabricarHabitacion	^Habitacion new.</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarLaberinto">fabricarLaberinto	^Laberinto new.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto:">crearLaberinto:unFM	| hab1 hab2 puerta |	hab1:=Habitacion new.	hab1 id:1.	hab2:=Habitacion new.	hab2 id:2.	puerta:=Puerta new.	puerta hab1: hab1.	puerta hab2: hab2.	hab1 norte:puerta.	hab1 sur:Pared new.	hab1 este:Pared new.	hab1 oeste:Pared new.	hab2 sur:puerta.	hab2 norte:Pared new.	hab2 este:Pared new.	hab2 oeste:Pared new.	laberinto:=Laberinto new.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto:">crearLaberinto:unFM	| hab1 hab2 puerta |	hab1:=unFM fabricarHabitacion.	hab1 id:1.	hab2:=unFM fabricarHabitacion.	hab2 id:2.	puerta:=unFM fabricarPuerta.	puerta hab1: hab1.	puerta hab2: hab2.	hab1 norte:puerta.	hab1 sur:unFM fabricarPared.	hab1 este:unFM fabricarPared.	hab1 oeste:unFM fabricarPared.	hab2 sur:puerta.	hab2 norte:unFM fabricarPared.	hab2 este:unFM fabricarPared.	hab2 oeste:unFM fabricarPared.	laberinto:=unFM fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><do-it>juego:=JuegoLaberinto new.laberinto:=juego crearLaberinto.(laberinto getHabId:1) norte entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFM</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFM</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFM new.laberinto:=juego crearLaberinto:fm.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFM new.laberinto:=juego crearLaberinto:fm.(laberinto getHabId:1) norte entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFM new.laberinto:=juego crearLaberinto:fm.(laberinto getHabId:1) norte entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFM new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) norte entrar.</do-it><do-it>laberinto getHabId:5.</do-it><do-it>laberinto getHabId:5.</do-it><do-it>laberinto getHabId:5.</do-it><do-it>laberinto getHabId:5.</do-it><do-it>laberinto getHabId:5.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 11, 2015' '8:11:41 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:11:41 on 11 de febrero de 2015."</do-it><class><name>Bicho</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>habitacion estrategia </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="habitacion">habitacion	^habitacion</body></methods><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="habitacion:">habitacion: anObject	habitacion := anObject</body></methods><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="estrategia">estrategia	^estrategia</body></methods><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="estrategia:">estrategia: anObject	estrategia := anObject</body></methods><methods><class-id>Bicho</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	habitacion := nil.	estrategia := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	" *** This method was defined by ElementoMapa as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>Bicho</class-id><body>Bicho se mueve sólo por el laberintoInstance Variables:	estrategia	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of estrategia	habitacion	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of habitacion</body></comment><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Bicho</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Bicho</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Bicho removeFromSystem</do-it><class><name>Bicho</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posInicial estrategia </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="posInicial">posInicial	^posInicial</body></methods><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="posInicial:">posInicial: anObject	posInicial := anObject</body></methods><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="estrategia">estrategia	^estrategia</body></methods><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="estrategia:">estrategia: anObject	estrategia := anObject</body></methods><methods><class-id>Bicho</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	posInicial := nil.	estrategia := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Bicho class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Bicho class</class-id> <category>instance creation</category><body package="Laberinto" selector="crearBicho">crearBicho	^super new initialize</body></methods><methods><class-id>Bicho class</class-id> <category>instance creation</category><body package="Laberinto" selector="crearBicho:estrategia:">crearBicho: unaPosicion estrategia: unaEstrategia	^super new posInicial: unaPosicion; estrategia: unaEstrategia</body></methods><remove-selector><class-id>Bicho class</class-id> <selector>crearBicho</selector></remove-selector><comment><class-id>Bicho</class-id><body>Bicho se mueve por el laberinto.Instance Variables:	estrategia	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of estrategia	posInicial	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of posInicial</body></comment><comment><class-id>Bicho</class-id><body>Bicho se mueve por el laberintoInstance Variables:	estrategia	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of estrategia	posInicial	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of posInicial</body></comment><class><name>Estrategia</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Estrategia</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Estrategia class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Estrategia</class-id><body>Estrategia </body></comment><do-it>Bicho organization addCategory: #operaciones</do-it><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina	estrategia camina:self</body></methods><do-it>Estrategia organization addCategory: #operaciones</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina	self</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina	self subclassResponsibility</body></methods><class><name>SentidoReloj</name><environment>Smalltalk</environment><super>Estrategia</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>SentidoReloj</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SentidoReloj</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina	" *** This method was defined by Estrategia as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>SentidoReloj</class-id><body>SentidoReloj camina en el sentido del reloj.</body></comment><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SentidoReloj</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SentidoReloj</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SentidoReloj removeFromSystem</do-it><class><name>Estrategia</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ultimaPared </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="ultimaPared">ultimaPared	^ultimaPared</body></methods><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="ultimaPared:">ultimaPared: anObject	ultimaPared := anObject</body></methods><class><name>SentidoReloj</name><environment>Smalltalk</environment><super>Estrategia</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>SentidoReloj</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SentidoReloj</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina	" *** This method was defined by Estrategia as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>SentidoReloj</class-id><body>SentidoReloj camina en el sentido horario.</body></comment><do-it>SentidoReloj removeFromSystem</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho	self subclassResponsibility</body></methods><remove-selector><class-id>Estrategia</class-id> <selector>camina</selector></remove-selector><class><name>SentidoHorario</name><environment>Smalltalk</environment><super>Estrategia</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>SentidoHorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho	" *** This method was defined by Estrategia as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>posInicial</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>posInicial</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Bicho</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion estrategia </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="posInicial:">posInicial: anObject	posicion := anObject</body></methods><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="posInicial">posInicial	^posicion</body></methods><methods><class-id>Bicho</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	posicion := nil.	estrategia := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		"actual:=(actual//4)+1.		(orden at:actual) = #norte	ifTrue:[unBicho posicion norte entrar]"</body></methods><methods><class-id>SentidoHorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		"orden:=#(#norte #sur #oeste #este).	actual:=1."		^self</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ultimaPared</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ultimaPared</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Estrategia</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actual </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="ultimaPared">ultimaPared	^actual</body></methods><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="ultimaPared:">ultimaPared: anObject	actual := anObject</body></methods><class><name>Estrategia</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actual orden </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="orden">orden	^orden</body></methods><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="orden:">orden: anObject	orden := anObject</body></methods><comment><class-id>SentidoHorario</class-id><body>SentidoHorario se mueve en el sentido horario</body></comment><methods><class-id>SentidoHorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		orden:=#(#norte #sur #oeste #este).	actual:=1.		^self</body></methods><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		actual:=(actual//4)+1.		(orden at:actual) = #norte	ifTrue:[unBicho posicion norte entrar]</body></methods><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		actual:=(actual//4)+1.		(orden at:actual) = #norte	ifTrue:[unBicho posicion norte entrar].		(orden at:actual) = #este	ifTrue:[unBicho posicion este entrar].		(orden at:actual) = #sur	ifTrue:[unBicho posicion sur entrar].		(orden at:actual) = #oeste	ifTrue:[unBicho posicion oeste entrar].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 18, 2015' '8:11:21 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:11:21 on 18 de febrero de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 18, 2015' '8:11:27 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:11:27 on 18 de febrero de 2015."</do-it><class><name>SentidoAntihorario</name><environment>Smalltalk</environment><super>Estrategia</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>SentidoAntihorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SentidoAntihorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho	" *** This method was defined by Estrategia as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho	self subclassResponsibility.</body></methods><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.</do-it><do-it>juego crearLaberinto:fm</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego crearLaberinto:fm</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego crearLaberinto:fm</do-it><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="crearLaberinto">crearLaberinto	</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta |	hab1:=self fabricarHabitacion.	hab1 id:1.	hab2:=self fabricarHabitacion.	hab2 id:2.	puerta:=self fabricarPuerta.	puerta hab1: hab1.	puerta hab2: hab2.	hab1 norte:puerta.	hab1 sur:self fabricarPared.	hab1 este:self fabricarPared.	hab1 oeste:self fabricarPared.	hab2 sur:puerta.	hab2 norte:self fabricarPared.	hab2 este:self fabricarPared.	hab2 oeste:self fabricarPared.	"laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto"</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab2:=self fabricarHabitacion.	hab2 id:2.	puerta:=self fabricarPuerta.	puerta hab1: hab1.	puerta hab2: hab2.	hab1 norte:puerta.	hab1 sur:self fabricarPared.	hab1 este:self fabricarPared.	hab1 oeste:self fabricarPared.	hab2 sur:puerta.	hab2 norte:self fabricarPared.	hab2 este:self fabricarPared.	hab2 oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 19, 2015' '4:38:26 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 16:38:26 on 19 de febrero de 2015."</do-it><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| ruta |	actual:=actual+1.	(actual = 5) ifTrue:[actual:=0].	ruta:= orden at:actual		ruta = #norte	ifTrue:[unBicho posicion norte entrar].		(orden at:actual) = #este	ifTrue:[unBicho posicion este entrar].		(orden at:actual) = #sur	ifTrue:[unBicho posicion sur entrar].		(orden at:actual) = #oeste	ifTrue:[unBicho posicion oeste entrar].</body></methods><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| ruta |	actual:=actual+1.	(actual = 5) ifTrue:[actual:=0].	ruta:= orden at:actual.		ruta = #norte	ifTrue:[unBicho posicion norte entrar].		ruta = #este	ifTrue:[unBicho posicion este entrar].		ruta = #sur	ifTrue:[unBicho posicion sur entrar].		ruta = #oeste	ifTrue:[unBicho posicion oeste entrar].</body></methods><methods><class-id>SentidoHorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		orden:=#(#norte #sur #oeste #este).	actual:=0.		^self</body></methods><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="posicion:">posicion: anObject	posicion := anObject</body></methods><methods><class-id>Bicho class</class-id> <category>instance creation</category><body package="Laberinto" selector="crearBicho:estrategia:">crearBicho: unaPosicion estrategia: unaEstrategia	^super new posicion: unaPosicion; estrategia: unaEstrategia</body></methods><remove-selector><class-id>Bicho</class-id> <selector>posInicial:</selector></remove-selector><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="posicicion">posicicion	^posicion</body></methods><remove-selector><class-id>Bicho</class-id> <selector>posInicial</selector></remove-selector><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="posicion">posicion	^posicion</body></methods><remove-selector><class-id>Bicho</class-id> <selector>posicicion</selector></remove-selector><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| ruta |	actual:=actual+1.	(actual = 5) ifTrue:[actual:=1].	ruta:= orden at:actual.		ruta = #norte	ifTrue:[unBicho posicion norte entrar].		ruta = #este	ifTrue:[unBicho posicion este entrar].		ruta = #sur	ifTrue:[unBicho posicion sur entrar].		ruta = #oeste	ifTrue:[unBicho posicion oeste entrar].</body></methods><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	</body></methods><remove-selector><class-id>Bicho</class-id> <selector>siguiente</selector></remove-selector><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	actual:=actual+1.	(actual = 5) ifTrue:[actual:=1].	^orden at:actual.</body></methods><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| ruta |	ruta:= self siguiente.		ruta = #norte	ifTrue:[unBicho posicion norte entrar].		ruta = #este	ifTrue:[unBicho posicion este entrar].		ruta = #sur	ifTrue:[unBicho posicion sur entrar].		ruta = #oeste	ifTrue:[unBicho posicion oeste entrar].</body></methods><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1)estrategia:(SentidoHorario new).bicho camina.</do-it><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorte">irAlNorte	posicion norte entrar:self.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSur">irAlSur	posicion sur entrar:self.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlOeste">irAlOeste	posicion oeste entrar:self.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlEste">irAlEste	posicion este entrar:self.</body></methods><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| ruta |	ruta:= self siguiente.		ruta = #norte	ifTrue:[unBicho irAlNorte].		ruta = #este	ifTrue:[unBicho posicion este entrar].		ruta = #sur	ifTrue:[unBicho posicion sur entrar].		ruta = #oeste	ifTrue:[unBicho posicion oeste entrar].</body></methods><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| ruta |	ruta:= self siguiente.		ruta = #norte	ifTrue:[unBicho irAlNorte].		ruta = #este	ifTrue:[unBicho irAlEste].		ruta = #sur	ifTrue:[unBicho irAlSur].		ruta = #oeste	ifTrue:[unBicho irAlOeste].</body></methods><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	self subclassResponsibility</body></methods><class><name>SentidoCruz</name><environment>Smalltalk</environment><super>Bicho</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>SentidoCruz</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).</do-it><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina2:">camina2: unBicho		| ruta |	ruta:= self siguiente.		ruta = #norte	ifTrue:[unBicho irAlNorte].		ruta = #este	ifTrue:[unBicho irAlEste].		ruta = #sur	ifTrue:[unBicho irAlSur].		ruta = #oeste	ifTrue:[unBicho irAlOeste].</body></methods><class><name>SentidoHorario</name><environment>Smalltalk</environment><super>Estrategia</super><private>false</private><indexed-type>none</indexed-type><inst-vars>orden2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>SentidoHorario</class-id> <category>accessing</category><body package="Laberinto" selector="orden2">orden2	^orden2</body></methods><methods><class-id>SentidoHorario</class-id> <category>accessing</category><body package="Laberinto" selector="orden2:">orden2: anObject	orden2 := anObject</body></methods><methods><class-id>SentidoHorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		"orden:=#(#norte #sur #oeste #este).	orden2:=List new.	orden2 add:OrNorte new.	orden2 add:OrEste new.	orden2 add:OrSur new.	orden2 add:OrOeste new."	actual:=0.		^self</body></methods><class><name>Orientacion</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Orientacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Orientacion class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Orientacion</class-id><body>Orientacion orientacion del sentido.</body></comment><class><name>OrientacionNorte</name><environment>Smalltalk</environment><super>Orientacion</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>OrientacionNorte</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>OrientacionNorte</class-id><body>OrientacionNorte has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><class><name>OrientacionEste</name><environment>Smalltalk</environment><super>OrientacionNorte</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>OrientacionEste</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>OrientacionEste</class-id><body>OrientacionEste has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OrientacionEste</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>OrientacionEste</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>OrientacionEste removeFromSystem</do-it><class><name>OrientacionEste</name><environment>Smalltalk</environment><super>Orientacion</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>OrientacionEste</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>OrientacionEste</class-id><body>OrientacionEste has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><class><name>OrientacionSur</name><environment>Smalltalk</environment><super>Orientacion</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>OrientacionSur</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>OrientacionSur</class-id><body>OrientacionSur has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><class><name>OrientacionOeste</name><environment>Smalltalk</environment><super>Orientacion</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>OrientacionOeste</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>OrientacionOeste</class-id><body>OrientacionOeste has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><methods><class-id>SentidoHorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		"orden:=#(#norte #sur #oeste #este)."	orden2:=List new.	orden2 add:OrientacionNorte new.	orden2 add:OrientacionEste new.	orden2 add:OrientacionSur new.	orden2 add:OrientacionOeste new.	actual:=0.		^self</body></methods><do-it>Orientacion organization addCategory: #operaciones</do-it><methods><class-id>Orientacion</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien	self </body></methods><methods><class-id>Orientacion</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien</body></methods><methods><class-id>Orientacion</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien	self subclassResp	</body></methods><methods><class-id>Orientacion</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien	self subclassResponsibility.</body></methods><methods><class-id>OrientacionNorte</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir: alguien	self subclassResponsibility</body></methods><methods><class-id>OrientacionEste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir: alguien	self subclassResponsibility</body></methods><methods><class-id>OrientacionSur</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir: alguien	self subclassResponsibility</body></methods><methods><class-id>OrientacionOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir: alguien	self subclassResponsibility</body></methods><remove-selector><class-id>Orientacion</class-id> <selector>ir:</selector></remove-selector><methods><class-id>Orientacion</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien	self subclassResponsibility.</body></methods><methods><class-id>OrientacionEste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir: alguien	alguien irAlEste.</body></methods><methods><class-id>OrientacionNorte</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir: alguien	alguien irAlNorte.</body></methods><methods><class-id>OrientacionOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir: alguien	alguien irAlOeste.</body></methods><methods><class-id>OrientacionSur</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir: alguien	alguien irAlSur.</body></methods><methods><class-id>Pared</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self subclassResponsibility</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self subclassResponsibility</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self subclassResponsibility</body></methods><remove-selector><class-id>ElementoMapa</class-id> <selector>entrar:</selector></remove-selector><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	self subclassResponsibility</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	Transcript show:'Estoy en la habitación ',self id printString</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[Transcript show:'La puerta está abierta']	ifFalse:[Transcript show:'La puerta está cerrada']</body></methods><methods><class-id>Pared</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	Transcript show:'Te topaste con una pared';cr.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	Transcript show:'Estoy en la habitación ',self id printString;cr.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	self abierta	ifTrue:[Transcript show:'La puerta está abierta']	ifFalse:[Transcript show:'La puerta está cerrada']</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[Transcript show:'La puerta está abierta';cr.		alguien posicion id = 1		ifTrue:[			alguien posicion id:2.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			alguien posicion id:1.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada'.cr]</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[Transcript show:'La puerta está abierta';cr.		alguien posicion id = 1		ifTrue:[			alguien posicion id:2.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			alguien posicion id:1.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		Transcript show:'La puerta está abierta';cr.		alguien posicion id = 1		ifTrue:[			alguien posicion id:2.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			alguien posicion id:1.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		Transcript show:'La puerta está abierta';cr.				alguien posicion id = 1		ifTrue:[			alguien posicion id:2.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			alguien posicion id:1.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	actual:=actual+1.	(actual = 5) ifTrue:[actual:=1].	^orden2 at:actual.</body></methods><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>(juego laberinto getHabId:2) sur abierta:true.</do-it><do-it>(juego laberinto getHabId:2) sur abierta.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	Transcript show:'eeeeee';cr.	self abierta	ifTrue:[		Transcript show:'La puerta está abierta';cr.				alguien posicion id = 1		ifTrue:[			alguien posicion id:2.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			alguien posicion id:1.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		Transcript show:'La puerta está abierta';cr.				alguien posicion id = 1		ifTrue:[			alguien posicion id:2.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			alguien posicion id:1.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><do-it>bicho camina.</do-it><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	alguien posicion self.	Transcript show:'Estoy en la habitación ',self id printString;cr.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	alguien posicion:self.	Transcript show:'Estoy en la habitación ',self id printString;cr.</body></methods><do-it>bicho camina.</do-it><methods><class-id>SentidoHorario</class-id> <category>operaciones</category><body package="Laberinto" selector="camina2:">camina2: unBicho		| orientacion |	orientacion:= self siguiente.		orientacion ir:unBicho.</body></methods><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).</do-it><do-it>(juego laberinto getHabId:2) sur abierta:true.(juego laberinto getHabId:2) sur abierta.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina2:">camina2: unBicho		| orientacion |	orientacion:= self siguiente.		orientacion ir:unBicho.</body></methods><remove-selector><class-id>SentidoHorario</class-id> <selector>camina2:</selector></remove-selector><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	self subclassResponsibility.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>orden2</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>orden2</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	actual:=actual+1.	(actual = 5) ifTrue:[actual:=1].	^orden2 at:actual.</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente:">siguiente:unaLista	actual:=actual+1.	(actual = 5) ifTrue:[actual:=1].	^unaLista at:actual.</body></methods><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.bicho:= Bicho crearBicho:(laberinto getHabId:1) estrategia:(SentidoHorario new).</do-it><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina	estrategia camina2:self</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		Transcript show:'La puerta está abierta';cr.				alguien posicion = hab1		ifTrue:[			hab2 entrar:alguien.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			hab1 entrar:alguien.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>(juego laberinto getHabId:2) sur abierta:true.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>(juego laberinto getHabId:2) sur abierta.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>(juego laberinto getHabId:2) sur abierta:true.(juego laberinto getHabId:2) sur abierta.bicho camina.</do-it><do-it>(juego laberinto getHabId:2) sur abierta:true.(juego laberinto getHabId:2) sur abierta.bicho camina.</do-it><do-it>(juego laberinto getHabId:2) sur abierta:true.(juego laberinto getHabId:2) sur abierta.bicho camina.</do-it><do-it>(juego laberinto getHabId:2) sur abierta:true.(juego laberinto getHabId:2) sur abierta.bicho camina.</do-it><remove-selector><class-id>Estrategia</class-id> <selector>siguiente:</selector></remove-selector><remove-selector><class-id>SentidoHorario</class-id> <selector>siguiente</selector></remove-selector><class><name>LaberintoFMBomba</name><environment>Smalltalk</environment><super>LaberintoFM</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoFM</package></attributes></class><methods><class-id>LaberintoFMBomba</class-id> <category>initialize-release</category><body package="LaberintoFM" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>LaberintoFMBomba</class-id><body>LaberintoFMBomba crear un laberinto con bomba</body></comment><do-it>LaberintoFMBomba organization addCategory: #operaciones</do-it><methods><class-id>LaberintoFMBomba</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPared">fabricarPared</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 19, 2015' '6:13:40 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:13:40 on 19 de febrero de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 19, 2015' '6:13:47 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:13:47 on 19 de febrero de 2015."</do-it><do-it>LaberintoFM renameTo: #LaberintoFMAb</do-it><comment><class-id>LaberintoFMAb</class-id><body>LaberintoFM tiene méotodos Factory Method</body></comment><do-it>LaberintoFMAb renameTo: #LaberintoFMAbs</do-it><comment><class-id>LaberintoFMAbs</class-id><body>LaberintoFM tiene méotodos Factory Method</body></comment><class><name>LaberintoFM</name><environment>Smalltalk</environment><super>LaberintoFMAbs</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoFM</package></attributes></class><methods><class-id>LaberintoFM</class-id> <category>initialize-release</category><body package="LaberintoFM" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarHabitacion">fabricarHabitacion	^Habitacion new.</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarLaberinto">fabricarLaberinto	^Laberinto new.</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPared">fabricarPared	^Pared new.</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPuerta">fabricarPuerta	^Puerta new.</body></methods><methods><class-id>LaberintoFMAbs</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarHabitacion">fabricarHabitacion	self subclassResponsibility.</body></methods><methods><class-id>LaberintoFMAbs</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarLaberinto">fabricarLaberinto	self subclassResponsibility.</body></methods><methods><class-id>LaberintoFMAbs</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPared">fabricarPared	self subclassResponsibility.</body></methods><methods><class-id>LaberintoFMAbs</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPuerta">fabricarPuerta	self subclassResponsibility.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LaberintoFMBomba</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LaberintoFMBomba</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>LaberintoFMBomba removeFromSystem</do-it><class><name>LaberintoFMBomba</name><environment>Smalltalk</environment><super>LaberintoFMAbs</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoFM</package></attributes></class><methods><class-id>LaberintoFMBomba</class-id> <category>initialize-release</category><body package="LaberintoFM" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>LaberintoFMBomba</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPuerta">fabricarPuerta	" *** This method was defined by LaberintoFMAbs as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>LaberintoFMBomba</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarHabitacion">fabricarHabitacion	" *** This method was defined by LaberintoFMAbs as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>LaberintoFMBomba</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarLaberinto">fabricarLaberinto	" *** This method was defined by LaberintoFMAbs as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>LaberintoFMBomba</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPared">fabricarPared	" *** This method was defined by LaberintoFMAbs as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>LaberintoFMBomba</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarHabitacion">fabricarHabitacion	^Habitacion new.</body></methods><methods><class-id>LaberintoFMBomba</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPuerta">fabricarPuerta	^Puerta new.</body></methods><methods><class-id>LaberintoFMBomba</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarLaberinto">fabricarLaberinto	^Laberinto new.</body></methods><class><name>ParedBomba</name><environment>Smalltalk</environment><super>Pared</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ParedBomba</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>ParedBomba</class-id><body>ParedBomba es una pared con bomba</body></comment><methods><class-id>ParedBomba</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	Transcript show:'BOOOOOOMMMM!!!!!'</body></methods><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFM new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) norte entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFM new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) norte entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.</do-it><comment><class-id>LaberintoFMBomba</class-id><body>LaberintoFMBomba laberinto con paredes bomba</body></comment><comment><class-id>LaberintoFMAbs</class-id><body>LaberintoFM clase abstracta que tiene métodos Factory Method</body></comment><comment><class-id>LaberintoFM</class-id><body>LaberintoFM es el laberinto normal</body></comment><methods><class-id>LaberintoFMBomba</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarPared">fabricarPared		^ParedBomba new.</body></methods><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><do-it>(laberinto getHabId:1) este entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><methods><class-id>ParedBomba</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	Transcript show:'BOOOOOOMMMM!!!!!'</body></methods><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><methods><class-id>ParedBomba</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	Transcript show:'BOOOOOOMMMM!!!!!';cr.</body></methods><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 19, 2015' '6:50:20 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:50:20 on 19 de febrero de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 19, 2015' '6:50:25 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:50:25 on 19 de febrero de 2015."</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><do-it>juego:=JuegoLaberinto new.fm:=LaberintoFMBomba new.laberinto:=juego crearLaberinto:fm.laberinto getHabId:5.(laberinto getHabId:1) este entrar.</do-it><class><name>Mueble</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Mueble</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Mueble</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	" *** This method was defined by ElementoMapa as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Mueble</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	" *** This method was defined by ElementoMapa as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Mueble</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Mueble</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Mueble removeFromSystem</do-it><class><name>Cosa</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Cosa</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Cosa</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	" *** This method was defined by ElementoMapa as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Cosa</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	" *** This method was defined by ElementoMapa as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><do-it>Cosa renameTo: #Elemento</do-it><class><name>Llave</name><environment>Smalltalk</environment><super>Elemento</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Llave</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>Llave</class-id><body>Llave es un elemento que puede estar dentro de un cofre.</body></comment><comment><class-id>Elemento</class-id><body>Elemento se utiliza para implementar el patrón Composite</body></comment><class><name>Cofre</name><environment>Smalltalk</environment><super>Elemento</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elementos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="elementos">elementos	^elementos</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="elementos:">elementos: anObject	elementos := anObject</body></methods><methods><class-id>Cofre</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	elementos := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>Cofre</class-id><body>Cofre es un elemento compuesto que puede contener cosas.Instance Variables:	elementos	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of elementos</body></comment><do-it>Cofre organization addCategory: #operaciones</do-it><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unElemento	</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="eliminar:">eliminar:unElemento</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="remove:">remove:unElemento</body></methods><remove-selector><class-id>Cofre</class-id> <selector>eliminar:</selector></remove-selector><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="get:">get:unElemento</body></methods><methods><class-id>Elemento</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	self subclassResponsibility</body></methods><methods><class-id>Elemento</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	self subclassResponsibility</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Cofre</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Cofre</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Cofre removeFromSystem</do-it><class><name>Cofre</name><environment>Smalltalk</environment><super>Elemento</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elementos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="elementos">elementos	^elementos</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="elementos:">elementos: anObject	elementos := anObject</body></methods><methods><class-id>Cofre</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	elementos := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar">entrar	" *** This method was defined by Elemento as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	" *** This method was defined by Elemento as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>Cofre</class-id><body>Cofre es un contenedor que puede contener elementos.Instance Variables:	elementos	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of elementos</body></comment><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unElemento	</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unElemento	elementos add:unElemento</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unElemento	elementos add:unElemento.</body></methods><methods><class-id>Elemento</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unElemento		self subclassResponsibility.</body></methods><methods><class-id>Cofre</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	elementos := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>juego := JuegoLaberinto new.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 25, 2015' '8:05:12 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:05:12 on 25 de febrero de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 25, 2015' '8:05:19 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:05:19 on 25 de febrero de 2015."</do-it><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id norte sur este oeste hijos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="hijos">hijos	^hijos</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="hijos:">hijos: anObject	hijos := anObject</body></methods><methods><class-id>Habitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	id := nil.	norte := nil.	sur := nil.	este := nil.	oeste := nil.	hijos := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unHijo	hijos add:unHijo.</body></methods><do-it>juego laberinto getHabId:1</do-it><do-it>h1:= juego laberinto getHabId:1 </do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.cofre:= Cofre new.llave:= Llave new.cofre add:llave.h1:= juego laberinto getHabId:1.</do-it><do-it>h1 add:cofre.</do-it><methods><class-id>Elemento</class-id> <category>operaciones</category><body package="Laberinto" selector="remove:">remove:unElemento		self subclassResponsibility.</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="remove:">remove:unElemento	elementos remove:unElemento ifAbsent: [].</body></methods><do-it>cofre remove:llave.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SentidoAntihorario</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SentidoAntihorario</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SentidoAntihorario removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SentidoCruz</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SentidoCruz</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SentidoCruz removeFromSystem</do-it><class><name>IteradorHabitacion</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actual coleccion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>IteradorHabitacion</class-id> <category>accessing</category><body package="Laberinto" selector="actual">actual	^actual</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>accessing</category><body package="Laberinto" selector="actual:">actual: anObject	actual := anObject</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>accessing</category><body package="Laberinto" selector="coleccion">coleccion	^coleccion</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>accessing</category><body package="Laberinto" selector="coleccion:">coleccion: anObject	coleccion := anObject</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	actual := nil.	coleccion := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>IteradorHabitacion class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>IteradorHabitacion</class-id><body>IteradorHabitacion patron Iterator para la coleccion de habitaciones.Instance Variables:	actual	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of actual	coleccion	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of coleccion</body></comment><do-it>IteradorHabitacion organization addCategory: #operaciones</do-it><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="primero">primero	actual:= 1.</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="primero">primero	actual:=1.</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="primero">primero	self actual:1.</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	self actual + 1.</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	self actual: actual + 1.</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	actual := 1.	coleccion := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	actual := 1.	coleccion := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="haTerminado">haTerminado	actual &gt;= coleccion size	ifTrue: [^true]	ifFalse: [^false].</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="elementoActual">elementoActual	</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="elementoActual">elementoActual		haTerminado	ifTrue: []	ifFalse: [].</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="elementoActual">elementoActual		</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="elementoActual">elementoActual	self haTerminado	ifTrue: [Transcript show: 'Te ha salido']	ifFalse: [].</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="haTerminado">haTerminado	^self actual &gt;= self coleccion size.</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="elementoActual">elementoActual	self haTerminado	ifTrue: [Transcript show: 'Fuera de limite']	ifFalse: [^coleccion at:actual].</body></methods><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="elementoActual">elementoActual	self haTerminado	ifTrue: [Transcript show: 'Fuera de limite']	ifFalse: [^self coleccion at:actual].</body></methods><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.iter:= IteradorHabitacion new.iter coleccion: juego laberinto habitaciones.iter elementoActual.</do-it><do-it>iter:= IteradorHabitacion new.iter coleccion: juego laberinto habitaciones.iter elementoActual id.</do-it><do-it>iter:= IteradorHabitacion new.iter coleccion: juego laberinto habitaciones.iter elementoActual id.</do-it><do-it>iter siguiente.</do-it><do-it>iter elementoActual.</do-it><do-it>juego laberinto habitaciones at:2.</do-it><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="haTerminado">haTerminado	^self actual &gt; self coleccion size.</body></methods><do-it>iter elementoActual id. </do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.iter:= IteradorHabitacion new.iter coleccion: juego laberinto habitaciones.iter elementoActual id. </do-it><do-it>iter siguiente.iter elementoActual id.</do-it><do-it>iter primero.iter elementoActual id.</do-it><component-created><name>IteradorHabitaciones</name> <type>package</type></component-created><component-property><name>IteradorHabitaciones</name> <type>package</type><property>comment</property> <value>'Es un iterador de las habitaciones.'</value></component-property><component_definition_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>siguiente</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>siguiente</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>actual:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>actual:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>coleccion:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>coleccion:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>primero</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>primero</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>coleccion</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>coleccion</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>haTerminado</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>haTerminado</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>elementoActual</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>elementoActual</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>actual</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>false</meta> <selector>actual</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorHabitacion</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.iter:= IteradorHabitacion new.iter coleccion: juego laberinto habitaciones.iter elementoActual id.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.iter:= IteradorHabitacion new.iter coleccion: juego laberinto habitaciones.iter elementoActual id.</do-it><methods><class-id>IteradorHabitacion</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="elementoActual">elementoActual	self haTerminado	ifTrue: [^'Fuera de limite']	ifFalse: [^self coleccion at:actual].</body></methods><class><name>IteradorLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>(none)</package></attributes></class><class><name>IteradorHabitacion</name><environment>Smalltalk</environment><super>IteradorLaberinto</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actual coleccion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>IteradorHabitaciones</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>actual</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>actual</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>IteradorHabitacion</name><environment>Smalltalk</environment><super>IteradorLaberinto</super><private>false</private><indexed-type>none</indexed-type><inst-vars>coleccion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>IteradorHabitaciones</package></attributes></class><class><name>IteradorLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actual </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>(none)</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>coleccion</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>coleccion</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>IteradorHabitacion</name><environment>Smalltalk</environment><super>IteradorLaberinto</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>IteradorHabitaciones</package></attributes></class><class><name>IteradorLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actual coleccion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>(none)</package></attributes></class><methods><class-id>IteradorLaberinto</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="siguiente">siguiente	self subclassResponsibility</body></methods><methods><class-id>IteradorLaberinto</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="actual:">actual: anObject	self subclassResponsibility</body></methods><methods><class-id>IteradorLaberinto</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="coleccion:">coleccion: anObject	self subclassResponsibility</body></methods><methods><class-id>IteradorLaberinto</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="primero">primero	self subclassResponsibility</body></methods><methods><class-id>IteradorLaberinto</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="coleccion">coleccion	self subclassResponsibility</body></methods><methods><class-id>IteradorLaberinto</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="haTerminado">haTerminado	self subclassResponsibility</body></methods><methods><class-id>IteradorLaberinto</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="elementoActual">elementoActual	self subclassResponsibility</body></methods><methods><class-id>IteradorLaberinto</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="actual">actual	self subclassResponsibility</body></methods><comment><class-id>IteradorLaberinto</class-id><body>IteradorLaberinto iterador abstracto.Subclasses must implement the following messages:	accessing		actual		actual:		coleccion		coleccion:	operaciones		elementoActual		haTerminado		primero		siguienteInstance Variables:	actual	&lt;ArithmeticValue&gt;	description of actual	coleccion	&lt;Object&gt;	description of coleccion</body></comment><component_definition_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.IteradorLaberinto</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>IteradorHabitaciones</name> <type>package</type><definitionName>Root.Smalltalk.IteradorLaberinto</definitionName> <definitionChange>added</definitionChange></component_definition_change><class><name>IteradorElementos</name><environment>Smalltalk</environment><super>IteradorLaberinto</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>IteradorHabitaciones</package></attributes></class><methods><class-id>IteradorElementos</class-id> <category>initialize-release</category><body package="IteradorHabitaciones" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>IteradorElementos class</class-id> <category>instance creation</category><body package="IteradorHabitaciones" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="elementoActual">elementoActual	" *** This method was defined by IteradorLaberinto as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>IteradorElementos</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="coleccion:">coleccion: anObject	" *** This method was defined by IteradorLaberinto as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>IteradorElementos</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="actual:">actual: anObject	" *** This method was defined by IteradorLaberinto as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="haTerminado">haTerminado	" *** This method was defined by IteradorLaberinto as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>IteradorElementos</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="actual">actual	" *** This method was defined by IteradorLaberinto as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="primero">primero	" *** This method was defined by IteradorLaberinto as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="siguiente">siguiente	" *** This method was defined by IteradorLaberinto as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>IteradorElementos</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="coleccion">coleccion	" *** This method was defined by IteradorLaberinto as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>IteradorElementos</class-id><body>IteradorElementos es un iterador de elementos.</body></comment><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="elementoActual">elementoActual		self haTerminado	ifTrue: [^'Fuera de limite']	ifFalse: [^self coleccion at:actual].</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="haTerminado">haTerminado		^self actual &gt; self coleccion size.</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="primero">primero		self actual:1.</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="siguiente">siguiente		self actual: actual + 1.</body></methods><methods><class-id>IteradorLaberinto</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="elementoActual">elementoActual	self haTerminado	ifTrue: [^'Fuera de limite']	ifFalse: [^self coleccion at:actual].</body></methods><remove-selector><class-id>IteradorHabitacion</class-id> <selector>elementoActual</selector></remove-selector><remove-selector><class-id>IteradorElementos</class-id> <selector>elementoActual</selector></remove-selector><methods><class-id>IteradorLaberinto</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="siguiente">siguiente	self actual: actual + 1.</body></methods><remove-selector><class-id>IteradorHabitacion</class-id> <selector>siguiente</selector></remove-selector><remove-selector><class-id>IteradorElementos</class-id> <selector>siguiente</selector></remove-selector><methods><class-id>IteradorLaberinto</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="haTerminado">haTerminado	^self actual &gt; self coleccion size.</body></methods><remove-selector><class-id>IteradorHabitacion</class-id> <selector>haTerminado</selector></remove-selector><remove-selector><class-id>IteradorElementos</class-id> <selector>haTerminado</selector></remove-selector><methods><class-id>IteradorLaberinto</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="primero">primero	self actual:1.</body></methods><remove-selector><class-id>IteradorHabitacion</class-id> <selector>primero</selector></remove-selector><remove-selector><class-id>IteradorElementos</class-id> <selector>primero</selector></remove-selector><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="contarElementos:">contarElementos:unaColeccion	</body></methods><class><name>IteradorElementos</name><environment>Smalltalk</environment><super>IteradorLaberinto</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numElementos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>IteradorHabitaciones</package></attributes></class><methods><class-id>IteradorElementos</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="numElementos">numElementos	^numElementos</body></methods><methods><class-id>IteradorElementos</class-id> <category>accessing</category><body package="IteradorHabitaciones" selector="numElementos:">numElementos: anObject	numElementos := anObject</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="contarElementos:">contarElementos:unaColeccion	numElementos:= numElementos + unaColeccion size.</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="contarElementos:">contarElementos:unaColeccion	numElementos:= numElementos + unaColeccion size.	unaColeccion do:[:elemento | self contarElementos: elemento hijos]</body></methods><methods><class-id>IteradorElementos</class-id> <category>operaciones</category><body package="IteradorHabitaciones" selector="contarElementos:">contarElementos:unaColeccion	numElementos:= numElementos + unaColeccion size.	unaColeccion do:[:elemento | self contarElementos: elemento hijos].		^numElementos.</body></methods><class><name>Elemento</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hijos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Elemento</class-id> <category>accessing</category><body package="Laberinto" selector="hijos">hijos	^hijos</body></methods><methods><class-id>Elemento</class-id> <category>accessing</category><body package="Laberinto" selector="hijos:">hijos: anObject	hijos := anObject</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="hijos1">hijos1	^hijos</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="hijos1:">hijos1: anObject	hijos := anObject</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="hijos">hijos	^hijos</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="hijos:">hijos: anObject	hijos := anObject</body></methods><remove-selector><class-id>Cofre</class-id> <selector>hijos1</selector></remove-selector><remove-selector><class-id>Cofre</class-id> <selector>hijos1:</selector></remove-selector><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unElemento	hijos add:unElemento.</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="remove:">remove:unElemento	hijos remove:unElemento ifAbsent: [].</body></methods><methods><class-id>Cofre</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	hijos := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><remove-selector><class-id>Cofre</class-id> <selector>elementos:</selector></remove-selector><remove-selector><class-id>Cofre</class-id> <selector>elementos</selector></remove-selector><class><name>Cofre</name><environment>Smalltalk</environment><super>Elemento</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.iter:= IteradorHabitacion new.iter coleccion: juego laberinto habitaciones.iter elementoActual id.</do-it><methods><class-id>Llave</class-id> <category>accessing</category><body package="Laberinto" selector="hijos1">hijos1	^hijos</body></methods><methods><class-id>Llave</class-id> <category>accessing</category><body package="Laberinto" selector="hijos1:">hijos1: anObject	hijos := anObject</body></methods><methods><class-id>Llave</class-id> <category>accessing</category><body package="Laberinto" selector="hijos">hijos	^hijos</body></methods><methods><class-id>Llave</class-id> <category>accessing</category><body package="Laberinto" selector="hijos:">hijos: anObject	hijos := anObject</body></methods><remove-selector><class-id>Llave</class-id> <selector>hijos1:</selector></remove-selector><remove-selector><class-id>Llave</class-id> <selector>hijos1</selector></remove-selector><do-it>iter2:= IteradorElementos new.</do-it><methods><class-id>IteradorElementos</class-id> <category>initialize-release</category><body package="IteradorHabitaciones" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		numElementos:= 0.		^self</body></methods><do-it>iter2:= IteradorElementos new.</do-it><do-it>iter2 contarElementos:juego laberinto habitaciones.</do-it><do-it>iter2 contarElementos:juego laberinto habitaciones.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.</do-it><do-it>cofre:= Cofre new.llave:= Llave new.cofre add:llave.</do-it><do-it>h1:= juego laberinto getHabId:1.h1 add:cofre.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.</do-it><do-it>cofre:= Cofre new.llave:= Llave new.cofre add:llave.h1:= juego laberinto getHabId:1.h1 add:cofre.</do-it><do-it>iter2:= IteradorElementos new.</do-it><methods><class-id>Llave</class-id> <category>accessing</category><body package="Laberinto" selector="hijos">hijos	^List new.</body></methods><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.</do-it><do-it>juego := JuegoLaberinto new.fm:=LaberintoFM new.juego laberinto:fm crearLaberinto.</do-it><do-it>cofre:= Cofre new.llave:= Llave new.cofre add:llave.h1:= juego laberinto getHabId:1.h1 add:cofre.iter2:= IteradorElementos new.</do-it><do-it>iter2 contarElementos:juego laberinto habitaciones.</do-it><do-it>iter2 contarElementos:juego laberinto habitaciones.</do-it><do-it>iter2 contarElementos:juego laberinto habitaciones.</do-it><do-it>iter2:= IteradorElementos new.</do-it><do-it>iter2 contarElementos:juego laberinto habitaciones.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'February 26, 2015' '6:01:35 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:01:35 on 26 de febrero de 2015."</do-it><do-it>Elemento renameTo: #ElementoContenedor</do-it><comment><class-id>ElementoContenedor</class-id><body>Elemento se utiliza para implementar el patrón Composite</body></comment><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id norte sur este oeste hijos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id norte sur este oeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id norte sur este oeste hijos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id norte sur este oeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id norte sur este oeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><remove-selector><class-id>ElementoContenedor</class-id> <selector>entrar</selector></remove-selector><remove-selector><class-id>ElementoMapa</class-id> <selector>entrar</selector></remove-selector><class><name>ElementoHoja</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hijos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ElementoHoja</class-id> <category>accessing</category><body package="Laberinto" selector="hijos">hijos	^hijos</body></methods><methods><class-id>ElementoHoja</class-id> <category>accessing</category><body package="Laberinto" selector="hijos:">hijos: anObject	hijos := anObject</body></methods><methods><class-id>ElementoHoja</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	hijos := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	" *** This method was defined by ElementoMapa as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>ElementoHoja</class-id><body>ElementoHoja interfaz de los elementos hojaInstance Variables:	hijos	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of hijos</body></comment><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>hijos</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>hijos</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Cofre</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Cofre</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Llave</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Bomba</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Bomba</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>Bomba</class-id><body>Bomba es un elemento hoja</body></comment><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien</body></methods><methods><class-id>ElementoHoja</class-id> <category>accessing</category><body package="Laberinto" selector="hijos">hijos	^List new.</body></methods><do-it>Cofre removeFromSystem</do-it><class><name>Caja</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Caja</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Caja</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unElemento	" *** This method was defined by ElementoContenedor as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Caja</class-id> <category>operaciones</category><body package="Laberinto" selector="remove:">remove:unElemento	" *** This method was defined by ElementoContenedor as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Caja</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	" *** This method was defined by ElementoContenedor as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>Caja</class-id><body>Caja es un elemento contenedor.</body></comment><methods><class-id>Caja</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unElemento	</body></methods><methods><class-id>Caja</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unHijo	hijos add:unHijo.</body></methods><class><name>Forma</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superficies </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="superficies">superficies	^superficies</body></methods><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="superficies:">superficies: anObject	superficies := anObject</body></methods><methods><class-id>Forma</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	superficies := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Forma class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Forma</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	superficies := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>Forma</class-id><body>Forma define las formas de las habitaciones.Instance Variables:	superficies	&lt;List&gt;	description of superficies</body></comment><class><name>Rectangulo</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Rectangulo</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>Rectangulo</class-id><body>Rectangulo define la forma rectángulo.</body></comment><class><name>Superficie</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Superficie</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Superficie</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	" *** This method was defined by ElementoMapa as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><class><name>Puerta</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hab1 hab2 abierta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><comment><class-id>Superficie</class-id><body>Superficie interfaz de las superficies.</body></comment><methods><class-id>Superficie</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien		self subclassResponsibility.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>hab1</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>hab1</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Puerta</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 hab2 abierta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="hab1:">hab1: anObject	h1 := anObject</body></methods><methods><class-id>Puerta</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	h1 := nil.	hab2 := nil.	abierta := false.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="hab1">hab1	^h1</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		Transcript show:'La puerta está abierta';cr.				alguien posicion = h1		ifTrue:[			hab2 entrar:alguien.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			h1 entrar:alguien.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>hab2</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>hab2</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Puerta</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 h2 abierta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="hab2">hab2	^h2</body></methods><methods><class-id>Puerta</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	h1 := nil.	h2 := nil.	abierta := false.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		Transcript show:'La puerta está abierta';cr.				alguien posicion = h1		ifTrue:[			h2 entrar:alguien.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			h1 entrar:alguien.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="hab2:">hab2: anObject	h2 := anObject</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="h2">h2	^h2</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="h2:">h2: anObject	h2 := anObject</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="h1">h1	^h1</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="h1:">h1: anObject	h1 := anObject</body></methods><remove-selector><class-id>Puerta</class-id> <selector>hab1</selector></remove-selector><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto 	| hab1 hab2 puerta |	hab1:=Habitacion new.	hab1 id:1.	hab2:=Habitacion new.	hab2 id:2.	puerta:=Puerta new.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:Pared new.	hab1 este:Pared new.	hab1 oeste:Pared new.	hab2 sur:puerta.	hab2 norte:Pared new.	hab2 este:Pared new.	hab2 oeste:Pared new.	laberinto:=Laberinto new.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto:">crearLaberinto:unFM	| hab1 hab2 puerta |	hab1:=unFM fabricarHabitacion.	hab1 id:1.	hab2:=unFM fabricarHabitacion.	hab2 id:2.	puerta:=unFM fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:unFM fabricarPared.	hab1 este:unFM fabricarPared.	hab1 oeste:unFM fabricarPared.	hab2 sur:puerta.	hab2 norte:unFM fabricarPared.	hab2 este:unFM fabricarPared.	hab2 oeste:unFM fabricarPared.	laberinto:=unFM fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoFMAbs</class-id> <category>operaciones</category><body package="LaberintoFM" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab2:=self fabricarHabitacion.	hab2 id:2.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:self fabricarPared.	hab1 este:self fabricarPared.	hab1 oeste:self fabricarPared.	hab2 sur:puerta.	hab2 norte:self fabricarPared.	hab2 este:self fabricarPared.	hab2 oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><remove-selector><class-id>Puerta</class-id> <selector>hab1:</selector></remove-selector><remove-selector><class-id>Puerta</class-id> <selector>hab2</selector></remove-selector><remove-selector><class-id>Puerta</class-id> <selector>hab2:</selector></remove-selector><class><name>Pared</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><remove-selector><class-id>Pared</class-id> <selector>entrar</selector></remove-selector><methods><class-id>ParedBomba</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	Transcript show:'BOOOOOOMMMM!!!!!'</body></methods><methods><class-id>ParedBomba</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	Transcript show:'BOOOOOOMMMM!!!!!'.</body></methods><methods><class-id>ParedBomba</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	Transcript show:'BOOOOOOMMMM!!!!!';cr.</body></methods><remove-selector><class-id>ParedBomba</class-id> <selector>entrar</selector></remove-selector><class><name>Superficie</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>norte sur este oeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Superficie</class-id> <category>accessing</category><body package="Laberinto" selector="este">este	^este</body></methods><methods><class-id>Superficie</class-id> <category>accessing</category><body package="Laberinto" selector="este:">este: anObject	este := anObject</body></methods><methods><class-id>Superficie</class-id> <category>accessing</category><body package="Laberinto" selector="norte">norte	^norte</body></methods><methods><class-id>Superficie</class-id> <category>accessing</category><body package="Laberinto" selector="norte:">norte: anObject	norte := anObject</body></methods><methods><class-id>Superficie</class-id> <category>accessing</category><body package="Laberinto" selector="oeste">oeste	^oeste</body></methods><methods><class-id>Superficie</class-id> <category>accessing</category><body package="Laberinto" selector="oeste:">oeste: anObject	oeste := anObject</body></methods><methods><class-id>Superficie</class-id> <category>accessing</category><body package="Laberinto" selector="sur">sur	^sur</body></methods><methods><class-id>Superficie</class-id> <category>accessing</category><body package="Laberinto" selector="sur:">sur: anObject	sur := anObject</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>norte</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>norte</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sur</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sur</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>este</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>este</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>oeste</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>oeste</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id forma </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="forma">forma	^forma</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="forma:">forma: anObject	forma := anObject</body></methods><remove-selector><class-id>Habitacion</class-id> <selector>entrar</selector></remove-selector><class><name>Superficie</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Rectangulo</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars>norte sur este oeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Rectangulo</class-id> <category>accessing</category><body package="Laberinto" selector="este">este	^este</body></methods><methods><class-id>Rectangulo</class-id> <category>accessing</category><body package="Laberinto" selector="este:">este: anObject	este := anObject</body></methods><methods><class-id>Rectangulo</class-id> <category>accessing</category><body package="Laberinto" selector="norte">norte	^norte</body></methods><methods><class-id>Rectangulo</class-id> <category>accessing</category><body package="Laberinto" selector="norte:">norte: anObject	norte := anObject</body></methods><methods><class-id>Rectangulo</class-id> <category>accessing</category><body package="Laberinto" selector="oeste">oeste	^oeste</body></methods><methods><class-id>Rectangulo</class-id> <category>accessing</category><body package="Laberinto" selector="oeste:">oeste: anObject	oeste := anObject</body></methods><methods><class-id>Rectangulo</class-id> <category>accessing</category><body package="Laberinto" selector="sur">sur	^sur</body></methods><methods><class-id>Rectangulo</class-id> <category>accessing</category><body package="Laberinto" selector="sur:">sur: anObject	sur := anObject</body></methods><remove-selector><class-id>Superficie</class-id> <selector>este</selector></remove-selector><remove-selector><class-id>Superficie</class-id> <selector>este:</selector></remove-selector><remove-selector><class-id>Superficie</class-id> <selector>norte</selector></remove-selector><remove-selector><class-id>Superficie</class-id> <selector>norte:</selector></remove-selector><remove-selector><class-id>Superficie</class-id> <selector>oeste</selector></remove-selector><remove-selector><class-id>Superficie</class-id> <selector>oeste:</selector></remove-selector><remove-selector><class-id>Superficie</class-id> <selector>sur</selector></remove-selector><remove-selector><class-id>Superficie</class-id> <selector>sur:</selector></remove-selector><do-it>Superficie organization removeCategory: #accessing</do-it><component-created><name>LaberintoAbstractFactory</name> <type>package</type></component-created><class><name>LaberintoAF</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoAbstractFactory</package></attributes></class><methods><class-id>LaberintoAF</class-id> <category>initialize-release</category><body package="LaberintoAbstractFactory" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>LaberintoAF class</class-id> <category>instance creation</category><body package="LaberintoAbstractFactory" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>LaberintoRectanguloFactory</name><environment>Smalltalk</environment><super>LaberintoAF</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoAbstractFactory</package></attributes></class><methods><class-id>LaberintoRectanguloFactory</class-id> <category>initialize-release</category><body package="LaberintoAbstractFactory" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>LaberintoTrianguloFactory</name><environment>Smalltalk</environment><super>LaberintoAF</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoAbstractFactory</package></attributes></class><methods><class-id>LaberintoTrianguloFactory</class-id> <category>initialize-release</category><body package="LaberintoAbstractFactory" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><do-it>LaberintoAF organization addCategory: #operaciones</do-it><methods><class-id>LaberintoAF</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarForma">fabricarForma	self subclassResponsibility.</body></methods><do-it>LaberintoRectanguloFactory organization addCategory: #operaciones</do-it><class><name>LaberintoRectanguloFactory</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoAbstractFactory</package></attributes></class><class><name>LaberintoRectanguloFactory</name><environment>Smalltalk</environment><super>LaberintoAF</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoAbstractFactory</package></attributes></class><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarForma">fabricarForma	^Rectangulo new.</body></methods><do-it>LaberintoTrianguloFactory organization addCategory: #operaciones</do-it><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarForma">fabricarForma</body></methods><methods><class-id>LaberintoAF</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab2:=self fabricarHabitacion.	hab2 id:2.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:self fabricarPared.	hab1 este:self fabricarPared.	hab1 oeste:self fabricarPared.	hab2 sur:puerta.	hab2 norte:self fabricarPared.	hab2 este:self fabricarPared.	hab2 oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoAF</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarHabitacion">fabricarHabitacion	^Habitacion new.</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarHabitacion">fabricarHabitacion	^Habitacion new.</body></methods><methods><class-id>LaberintoFM</class-id> <category>operaciones</category><body package="LaberintoFM" selector="fabricarLaberinto">fabricarLaberinto	^Laberinto new.</body></methods><methods><class-id>LaberintoAF</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarLaberinto">fabricarLaberinto	^Laberinto new.</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab2:=self fabricarHabitacion.	hab2 id:2.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:self fabricarPared.	hab1 este:self fabricarPared.	hab1 oeste:self fabricarPared.	hab2 sur:puerta.	hab2 norte:self fabricarPared.	hab2 este:self fabricarPared.	hab2 oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoAF</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	self subclassResponsibility.</body></methods><methods><class-id>LaberintoAF</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarPuerta">fabricarPuerta	^Puerta new.</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:self fabricarPared.	hab1 este:self fabricarPared.	hab1 oeste:self fabricarPared.	hab2 sur:puerta.	hab2 norte:self fabricarPared.	hab2 este:self fabricarPared.	hab2 oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoAF</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarPared">fabricarPared	^Pared new.</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 este:self fabricarPared.	hab1 oeste:self fabricarPared.	hab2 sur:puerta.	hab2 norte:self fabricarPared.	hab2 este:self fabricarPared.	hab2 oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><methods><class-id>Forma</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		^self</body></methods><remove-selector><class-id>Forma</class-id> <selector>superficies:</selector></remove-selector><remove-selector><class-id>Forma</class-id> <selector>superficies</selector></remove-selector><do-it>Forma organization removeCategory: #accessing</do-it><class><name>Forma</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 4, 2015' '8:22:00 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:22:00 on 4 de marzo de 2015."</do-it><class><name>Triangulo</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars>norte noreste sureste sur suroeste noroeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="norte">norte	^norte</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="norte:">norte: anObject	norte := anObject</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="noreste">noreste	^noreste</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="noreste:">noreste: anObject	noreste := anObject</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="sureste">sureste	^sureste</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="sureste:">sureste: anObject	sureste := anObject</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="sur">sur	^sur</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="sur:">sur: anObject	sur := anObject</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="suroeste">suroeste	^suroeste</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="suroeste:">suroeste: anObject	suroeste := anObject</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="noroeste">noroeste	^noroeste</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="noroeste:">noroeste: anObject	noroeste := anObject</body></methods><methods><class-id>Triangulo</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	norte := nil.	noreste := nil.	sureste := nil.	sur := nil.	suroeste := nil.	noroeste := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>LaberintoAF</class-id><body>LaberintoAF interfaz de los laberintos y crea un laberintoSubclasses must implement the following messages:	operaciones		crearLaberinto		fabricarForma</body></comment><comment><class-id>LaberintoTrianguloFactory</class-id><body>LaberintoTrianguloFactory crea un laberinto con habitaciones triangulares.</body></comment><comment><class-id>LaberintoRectanguloFactory</class-id><body>LaberintoRectanguloFactory crea un laberinto con habitaciones rectangulares.</body></comment><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarForma">fabricarForma	^Triangulo new.</body></methods><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab2 forma sur:puerta.	hab2 forma noreste:self fabricarPared.	hab2 forma noroeste:self fabricarPared.	hab2 forma norte:puerta.	hab2 forma sureste:self fabricarPared.	hab2 forma suroeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoTrianguloFactory new.juego laberinto: factory crearLaberinto.</do-it><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 forma sur:puerta.	hab1 forma noreste:self fabricarPared.	hab1 forma noroeste:self fabricarPared.	hab2 forma norte:puerta.	hab2 forma sureste:self fabricarPared.	hab2 forma suroeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoTrianguloFactory new.juego laberinto: factory crearLaberinto.</do-it><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 forma norte:puerta.	hab1 forma sureste:self fabricarPared.	hab1 forma suroeste:self fabricarPared.	hab2 forma sur:puerta.	hab2 forma noreste:self fabricarPared.	hab2 forma noroeste:self fabricarPared.		laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).</do-it><do-it>bicho estrategia:(SentidoHorario new).</do-it><remove-selector><class-id>Estrategia</class-id> <selector>camina:</selector></remove-selector><remove-selector><class-id>SentidoHorario</class-id> <selector>camina:</selector></remove-selector><do-it>SentidoHorario organization removeCategory: #operaciones</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	orientacion:= self siguiente.		orientacion ir:unBicho.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina	estrategia camina:self</body></methods><remove-selector><class-id>Estrategia</class-id> <selector>camina2:</selector></remove-selector><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	actual:=actual+1.	(actual = 5) ifTrue:[actual:=1].	^orden at:actual.</body></methods><remove-selector><class-id>SentidoHorario</class-id> <selector>orden2</selector></remove-selector><remove-selector><class-id>SentidoHorario</class-id> <selector>orden2:</selector></remove-selector><do-it>SentidoHorario organization removeCategory: #accessing</do-it><methods><class-id>SentidoHorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		"orden:=#(#norte #sur #oeste #este)."	orden:=List new.	orden add:OrientacionNorte new.	orden add:OrientacionEste new.	orden add:OrientacionSur new.	orden add:OrientacionOeste new.	actual:=0.		^self</body></methods><class><name>SentidoHorario</name><environment>Smalltalk</environment><super>Estrategia</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorte:">irAlNorte:unAlguien		self forma norte entrar:unAlguien.</body></methods><do-it>Rectangulo organization addCategory: #operaciones</do-it><methods><class-id>Rectangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlEste:">irAlEste:unAlguien	self este entrar:unAlguien.</body></methods><methods><class-id>Rectangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorte:">irAlNorte:unAlguien	self norte entrar:unAlguien.</body></methods><methods><class-id>Rectangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSur:">irAlSur:unAlguien	self sur entrar:unAlguien.</body></methods><methods><class-id>Rectangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlOeste:">irAlOeste:unAlguien	self oeste entrar:unAlguien.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorte:">irAlNorte:unAlguien		self forma irAlNorte:unAlguien.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSur:">irAlSur:unAlguien		self forma irAlSur:unAlguien.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlEste:">irAlEste:unAlguien		self forma irAlEste:unAlguien.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlOeste:">irAlOeste:unAlguien		self forma irAlOeste:unAlguien.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlEste">irAlEste	posicion irAlEste:self.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorte">irAlNorte	posicion irAlNorte:self.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlOeste">irAlOeste	posicion irAlOeste:self.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSur">irAlSur	posicion irAlSur:self.</body></methods><remove-selector><class-id>Puerta</class-id> <selector>entrar</selector></remove-selector><remove-selector><class-id>Puerta</class-id> <selector>alOtroLado</selector></remove-selector><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>(juego laberinto getHabId:1) norte. </do-it><do-it>(juego laberinto getHabId:1) norte. </do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).</do-it><do-it>(juego laberinto getHabId:1) norte.</do-it><do-it>(juego laberinto getHabId:1) norte.</do-it><do-it>(juego laberinto getHabId:1) forma norte:abierta.</do-it><do-it>(juego laberinto getHabId:1) forma norte:abierta.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).</do-it><do-it>(juego laberinto getHabId:1) forma norte abierta:true.</do-it><do-it>(juego laberinto getHabId:1) forma norte abierta:true.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		alguien posicion = h1		ifTrue:[			h2 entrar:alguien.			Transcript show:'Entro a la habitacion 2';cr.		]		ifFalse:[			h1 entrar:alguien.			Transcript show:'Entro a la habitacion 1';cr.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		alguien posicion = h1		ifTrue:[			Transcript show:'Entro a la habitacion 2';cr.			h2 entrar:alguien.		]		ifFalse:[			Transcript show:'Entro a la habitacion 1';cr.			h1 entrar:alguien.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>(juego laberinto getHabId:1) forma norte abierta:true.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><comment><class-id>Triangulo</class-id><body>Triangulo define la forma triángulo.Instance Variables:	noreste	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of noreste	noroeste	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of noroeste	norte	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of norte	sur	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of sur	sureste	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of sureste	suroeste	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of suroeste</body></comment><class><name>EnteAutonomo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="posicion">posicion	^posicion</body></methods><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="posicion:">posicion: anObject	posicion := anObject</body></methods><methods><class-id>EnteAutonomo</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	posicion := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>EnteAutonomo class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>EnteAutonomo</class-id><body>EnteAutonomo interfaz de elementos que se mueven por el laberinto.Instance Variables:	posicion	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of posicion</body></comment><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>posicion</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>posicion</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Bicho</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>estrategia </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Bicho</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>estrategia </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><remove-selector><class-id>Bicho</class-id> <selector>posicion</selector></remove-selector><remove-selector><class-id>Bicho</class-id> <selector>posicion:</selector></remove-selector><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Personaje</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><do-it>EnteAutonomo organization addCategory: #operaciones</do-it><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina	</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina	self subclassResponsibility.</body></methods><remove-selector><class-id>Habitacion</class-id> <selector>este</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>este:</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>norte</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>norte:</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>oeste</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>oeste:</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>sur</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>sur:</selector></remove-selector><comment><class-id>Personaje</class-id><body>Personaje personajes del laberinto.</body></comment><do-it>Personaje organization addCategory: #operaciones</do-it><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|cuatro|	cuatro:= Dictionary new.	cuatro at:#norte put:OrientacionNorte new.	cuatro at:#sur put:OrientacionSur new.	cuatro at:#este put:OrientacionEste new.	cuatro at:#oeste put:OrientacionOeste new.		^cuatro.</body></methods><methods><class-id>LaberintoAF</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	self subclassResponsibility.</body></methods><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|ocho|	ocho:= Dictionary new.	ocho at:#norte put:OrientacionNorte new.	ocho at:#sur put:OrientacionSur new.	ocho at:#este put:OrientacionEste new.	ocho at:#oeste put:OrientacionOeste new.		^ocho.</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto colOrientaciones|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.		colOrientaciones:= self fabricarOrientaciones.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto colOri|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.		colOri:= self fabricarOrientaciones.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto colOri|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.		colOri:= self fabricarOrientaciones.	colOri at:#norte.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id forma orientaciones </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="orientaciones">orientaciones	^orientaciones</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="orientaciones:">orientaciones: anObject	orientaciones := anObject</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto colOri|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.		colOri:= self fabricarOrientaciones.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab1 orientaciones add:colOri at:#norte.	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto colOri|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.		colOri:= self fabricarOrientaciones.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab1 orientaciones add:colOri at:#norte;add:colOri at:#sur;add:colOri at:#este;add:colOri at:#oeste.	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>Habitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	id := nil.	orientaciones := List new.	hijos := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto colOri|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.		colOri:= self fabricarOrientaciones.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab1 orientaciones add:colOri at:#norte;add:colOri at:#sur;add:colOri at:#este;add:colOri at:#oeste.	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	hab2 orientaciones add:colOri at:#norte;add:colOri at:#sur;add:colOri at:#este;add:colOri at:#oeste.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto colOri|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.		colOri:= self fabricarOrientaciones.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab1 orientaciones add:(colOri at:#norte);add:(colOri at:#sur);add:(colOri at:#este);add:(colOri at:#oeste).	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	hab2 orientaciones add:colOri at:#norte;add:colOri at:#sur;add:colOri at:#este;add:colOri at:#oeste.	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto colOri|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.		colOri:= self fabricarOrientaciones.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab1 orientaciones add:(colOri at:#norte);add:(colOri at:#sur);add:(colOri at:#este);add:(colOri at:#oeste).	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	hab2 orientaciones add:(colOri at:#norte);add:(colOri at:#sur);add:(colOri at:#este);add:(colOri at:#oeste).	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><do-it>juego laberinto: factory crearLaberinto.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="crearLaberinto">crearLaberinto	| hab1 hab2 puerta laberinto colOri|	hab1:=self fabricarHabitacion.	hab1 id:1.	hab1 forma:self fabricarForma.	hab2:=self fabricarHabitacion.	hab2 id:2.	hab2 forma:self fabricarForma.	puerta:=self fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.		colOri:= self fabricarOrientaciones.	hab1 forma norte:puerta.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.	hab1 orientaciones add:(colOri at:#norte);add:(colOri at:#este);add:(colOri at:#sur);add:(colOri at:#oeste).	hab2 forma sur:puerta.	hab2 forma norte:self fabricarPared.	hab2 forma este:self fabricarPared.	hab2 forma oeste:self fabricarPared.	hab2 orientaciones add:(colOri at:#norte);add:(colOri at:#este);add:(colOri at:#sur);add:(colOri at:#oeste).	laberinto:=self fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	orientacion:= self siguiente.		Transcript show: orientacion printString;cr.		orientacion ir:unBicho.</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new).bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><class><name>Estrategia</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actual orden orientaciones </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="orientaciones">orientaciones	^orientaciones</body></methods><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="orientaciones:">orientaciones: anObject	orientaciones := anObject</body></methods><do-it>SentidoHorario organization addCategory: #operaciones</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	actual:=actual+1.	(actual = 5) ifTrue:[actual:=1].	^self orden at:actual.</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularSiguiente">calcularSiguiente	actual:= (actual\\(self orientaciones size)) + 1.</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	self calcularSiguiente.	actual:=actual+1.	(actual = 5) ifTrue:[actual:=1].	^self orden at:actual.</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	self calcularSiguiente.		^self orientaciones at:actual.</body></methods><do-it>bicho estrategia:(SentidoHorario new orientaciones:(bicho posicion orientaciones)).</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><class><name>SentidoAntihorario</name><environment>Smalltalk</environment><super>Estrategia</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>SentidoAntihorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>SentidoAntihorario</class-id><body>SentidoAntihorario caminar en sentido antihorario.</body></comment><do-it>SentidoHorario organization removeCategory: #operaciones</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	self calcularSiguiente.		^self orden at:actual.</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularSiguiente">calcularSiguiente	actual:= (actual\\(self orden size)) + 1.</body></methods><remove-selector><class-id>Estrategia</class-id> <selector>orientaciones:</selector></remove-selector><remove-selector><class-id>Estrategia</class-id> <selector>orientaciones</selector></remove-selector><class><name>Estrategia</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actual orden </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new orden:(bicho posicion orientaciones)).bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new orden:(bicho posicion orientaciones)).bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="actual">actual	^actual</body></methods><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="actual:">actual: anObject	actual := anObject</body></methods><remove-selector><class-id>Estrategia</class-id> <selector>ultimaPared</selector></remove-selector><remove-selector><class-id>Estrategia</class-id> <selector>ultimaPared:</selector></remove-selector><do-it>bicho camina.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new orden:(bicho posicion orientaciones)).bicho camina.</do-it><do-it>SentidoAntihorario organization addCategory: #operaciones</do-it><methods><class-id>SentidoHorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		"orden:=#(#norte #sur #oeste #este)."	actual:=0.		^self</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new orden:(bicho posicion orientaciones)).bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>Estrategia</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		actual:=0.		^self</body></methods><methods><class-id>SentidoHorario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		^self</body></methods><methods><class-id>SentidoAntihorario</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularSiguiente">calcularSiguiente	actual:= (actual\\(self orden size)) + 1.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 5, 2015' '6:17:21 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:17:21 on 5 de marzo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 5, 2015' '6:17:26 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:17:26 on 5 de marzo de 2015."</do-it><component-property><name>LaberintoAbstractFactory</name> <type>package</type><property>comment</property> <value>'Paquete para usar el patrón Abstract Factory.'</value></component-property><methods><class-id>OrientacionNorte</class-id> <category>operaciones</category><body package="Laberinto" selector="default">default		</body></methods><remove-selector><class-id>OrientacionNorte</class-id> <selector>default</selector></remove-selector><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|cuatro|	cuatro:= Dictionary new.	cuatro at:#norte put:OrientacionNorte default.	cuatro at:#sur put:OrientacionSur default.	cuatro at:#este put:OrientacionEste default.	cuatro at:#oeste put:OrientacionOeste default.		^cuatro.</body></methods><shared-variable><name>UnicaInstancia</name><environment>OrientacionNorte</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Laberinto</package></attributes></shared-variable><do-it>OrientacionNorte addClassVarName: #UnicaInstancia</do-it><methods><class-id>OrientacionNorte</class-id> <category>operaciones</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><shared-variable><name>UnicaInstancia</name><environment>OrientacionEste</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Laberinto</package></attributes></shared-variable><do-it>OrientacionEste addClassVarName: #UnicaInstancia</do-it><methods><class-id>OrientacionEste</class-id> <category>operaciones</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><shared-variable><name>UnicaInstancia</name><environment>OrientacionOeste</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Laberinto</package></attributes></shared-variable><do-it>OrientacionOeste addClassVarName: #UnicaInstancia</do-it><methods><class-id>OrientacionOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><shared-variable><name>UnicaInstancia</name><environment>OrientacionSur</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Laberinto</package></attributes></shared-variable><do-it>OrientacionSur addClassVarName: #UnicaInstancia</do-it><methods><class-id>OrientacionSur</class-id> <category>operaciones</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><methods><class-id>OrientacionEste</class-id> <category>operaciones</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><methods><class-id>OrientacionNorte</class-id> <category>operaciones</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><methods><class-id>OrientacionOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><methods><class-id>OrientacionSur</class-id> <category>operaciones</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.</do-it><do-it>OrientacionEste class organization addCategory: #operaciones</do-it><methods><class-id>OrientacionEste class</class-id> <category>operaciones</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><methods><class-id>OrientacionEste class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><remove-selector><class-id>OrientacionEste</class-id> <selector>new</selector></remove-selector><remove-selector><class-id>OrientacionEste</class-id> <selector>default</selector></remove-selector><do-it>OrientacionEste class organization addCategory: #operaciones</do-it><do-it>OrientacionEste class classifySymbol: #new under: #operaciones</do-it><do-it>OrientacionEste class organization addCategory: #'instance creation'</do-it><do-it>OrientacionEste class classifySymbol: #default under: #'instance creation'</do-it><do-it>OrientacionEste class organization addCategory: #'instance creation'</do-it><do-it>OrientacionEste class classifySymbol: #new under: #'instance creation'</do-it><do-it>OrientacionEste class organization removeCategory: #operaciones</do-it><methods><class-id>OrientacionNorte class</class-id> <category>instance creation</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><methods><class-id>OrientacionOeste class</class-id> <category>instance creation</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><methods><class-id>OrientacionSur class</class-id> <category>instance creation</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><methods><class-id>OrientacionNorte class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><methods><class-id>OrientacionOeste class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><methods><class-id>OrientacionSur class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><remove-selector><class-id>OrientacionSur</class-id> <selector>new</selector></remove-selector><remove-selector><class-id>OrientacionSur</class-id> <selector>default</selector></remove-selector><remove-selector><class-id>OrientacionOeste</class-id> <selector>new</selector></remove-selector><remove-selector><class-id>OrientacionOeste</class-id> <selector>default</selector></remove-selector><remove-selector><class-id>OrientacionNorte</class-id> <selector>new</selector></remove-selector><remove-selector><class-id>OrientacionNorte</class-id> <selector>default</selector></remove-selector><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.</do-it><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|ocho|	ocho:= Dictionary new.	ocho at:#norte put:OrientacionNorte default.	ocho at:#sur put:OrientacionSur new.	ocho at:#este put:OrientacionEste new.	ocho at:#oeste put:OrientacionOeste new.		^ocho.</body></methods><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|ocho|	ocho:= Dictionary new.	ocho at:#norte put:OrientacionNorte default.	ocho at:#noreste put:OrientacionNorte default.	ocho at:#sur put:OrientacionSur new.	ocho at:#este put:OrientacionEste new.	ocho at:#oeste put:OrientacionOeste new.		^ocho.</body></methods><do-it>OrientacionEste renameTo: #OriEste</do-it><comment><class-id>OriEste</class-id><body>OrientacionEste has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|ocho|	ocho:= Dictionary new.	ocho at:#norte put:OrientacionNorte default.	ocho at:#noreste put:OrientacionNorte default.	ocho at:#sur put:OrientacionSur new.	ocho at:#este put:OriEste new.	ocho at:#oeste put:OrientacionOeste new.		^ocho.</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|cuatro|	cuatro:= Dictionary new.	cuatro at:#norte put:OrientacionNorte default.	cuatro at:#sur put:OrientacionSur default.	cuatro at:#este put:OriEste default.	cuatro at:#oeste put:OrientacionOeste default.		^cuatro.</body></methods><do-it>OrientacionNorte renameTo: #OriNorte</do-it><comment><class-id>OriNorte</class-id><body>OrientacionNorte has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|ocho|	ocho:= Dictionary new.	ocho at:#norte put:OriNorte default.	ocho at:#noreste put:OriNorte default.	ocho at:#sur put:OrientacionSur new.	ocho at:#este put:OriEste new.	ocho at:#oeste put:OrientacionOeste new.		^ocho.</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|cuatro|	cuatro:= Dictionary new.	cuatro at:#norte put:OriNorte default.	cuatro at:#sur put:OrientacionSur default.	cuatro at:#este put:OriEste default.	cuatro at:#oeste put:OrientacionOeste default.		^cuatro.</body></methods><do-it>OrientacionSur renameTo: #OriSur</do-it><comment><class-id>OriSur</class-id><body>OrientacionSur has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|ocho|	ocho:= Dictionary new.	ocho at:#norte put:OriNorte default.	ocho at:#noreste put:OriNorte default.	ocho at:#sur put:OriSur new.	ocho at:#este put:OriEste new.	ocho at:#oeste put:OrientacionOeste new.		^ocho.</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|cuatro|	cuatro:= Dictionary new.	cuatro at:#norte put:OriNorte default.	cuatro at:#sur put:OriSur default.	cuatro at:#este put:OriEste default.	cuatro at:#oeste put:OrientacionOeste default.		^cuatro.</body></methods><do-it>OrientacionOeste renameTo: #OriOeste</do-it><comment><class-id>OriOeste</class-id><body>OrientacionOeste has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|ocho|	ocho:= Dictionary new.	ocho at:#norte put:OriNorte default.	ocho at:#noreste put:OriNorte default.	ocho at:#sur put:OriSur new.	ocho at:#este put:OriEste new.	ocho at:#oeste put:OriOeste new.		^ocho.</body></methods><methods><class-id>LaberintoRectanguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|cuatro|	cuatro:= Dictionary new.	cuatro at:#norte put:OriNorte default.	cuatro at:#sur put:OriSur default.	cuatro at:#este put:OriEste default.	cuatro at:#oeste put:OriOeste default.		^cuatro.</body></methods><class><name>OriNorEste</name><environment>Smalltalk</environment><super>Orientacion</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>OriNorEste</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>OriNorEste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien	" *** This method was defined by Orientacion as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><class><name>OriNorOeste</name><environment>Smalltalk</environment><super>Orientacion</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>OriNorOeste</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>OriNorOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien	" *** This method was defined by Orientacion as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><class><name>OriSurEste</name><environment>Smalltalk</environment><super>Orientacion</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>OriSurEste</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>OriSurEste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien	" *** This method was defined by Orientacion as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><class><name>OriSurOeste</name><environment>Smalltalk</environment><super>Orientacion</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>OriSurOeste</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>OriSurOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien	" *** This method was defined by Orientacion as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>OriNorOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien		alguien irAlNorEste.</body></methods><methods><class-id>OriNorOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien		alguien irAlNorOeste.</body></methods><methods><class-id>OriNorEste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien	alguien irAlNorEste.</body></methods><methods><class-id>OriSurEste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien		alguien irAlSurOeste.</body></methods><methods><class-id>OriSurEste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien		alguien irAlSurEste.</body></methods><methods><class-id>OriSurOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="ir:">ir:alguien		alguien irAlSurOeste.</body></methods><comment><class-id>OriSur</class-id><body>OrientacionSur SUR.</body></comment><comment><class-id>OriSurEste</class-id><body>OriSurEste SURESTE</body></comment><comment><class-id>OriSurOeste</class-id><body>OriSurOeste SUROESTE.</body></comment><comment><class-id>OriNorOeste</class-id><body>OriNorOeste NOROESTE.</body></comment><comment><class-id>OriNorOeste</class-id><body>OriNorOeste NO.</body></comment><comment><class-id>OriNorEste</class-id><body>OriNorEste NE.</body></comment><comment><class-id>OriEste</class-id><body>OrientacionEste E.</body></comment><comment><class-id>OriNorte</class-id><body>OrientacionNorte N.</body></comment><comment><class-id>OriOeste</class-id><body>OrientacionOeste O.</body></comment><comment><class-id>OriSur</class-id><body>OrientacionSur S.</body></comment><comment><class-id>OriSurEste</class-id><body>OriSurEste SE.</body></comment><comment><class-id>OriSurOeste</class-id><body>OriSurOeste SO.</body></comment><methods><class-id>LaberintoTrianguloFactory</class-id> <category>operaciones</category><body package="LaberintoAbstractFactory" selector="fabricarOrientaciones">fabricarOrientaciones	|ocho|	ocho:= Dictionary new.	ocho at:#norte put:OriNorte default.	ocho at:#sur put:OriSur default.	ocho at:#este put:OriEste default.	ocho at:#oeste put:OriOeste default.	ocho at:#noreste put:OriNorEste default.	ocho at:#noroeste put:OriNorOeste default.	ocho at:#sureste put:OriSurEste default.	ocho at:#suroeste put:OriSurOeste default.		^ocho.</body></methods><do-it>(juego laberinto getHabId:1) forma norte abierta:true.</do-it><do-it>bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new orden:(bicho posicion orientaciones)).bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><component-created><name>LaberintoBuilder</name> <type>package</type></component-created><component-property><name>LaberintoBuilder</name> <type>package</type><property>comment</property> <value>'Paquete para utilizar el patrón Builder.'</value></component-property><class><name>LaberintoBuilder</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>laberinto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>LaberintoBuilder</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="laberinto">laberinto	^laberinto</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="laberinto:">laberinto: anObject	laberinto := anObject</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	laberinto := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>LaberintoBuilder class</class-id> <category>instance creation</category><body package="LaberintoBuilder" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>LaberintoRectangularBuilder</name><environment>Smalltalk</environment><super>LaberintoBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>LaberintoRectangularBuilder</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ParserConfig class</class-id> <category>instance creation</category><body package="LaberintoBuilder" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><do-it>LaberintoBuilder organization addCategory: #operaciones</do-it><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	self subclassResponsibility.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto	laberinto:= Laberinto new.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirPuertaDe:orientacion:a:orientacion:">construirPuertaDe:unaHab1 orientacion:or1 a:unaHab2 orientacion:or2	|puerta h1 h2|	puerta:= Puerta new.	h1:= laberinto getHabId:unaHab1.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirPuertaDe:orientacion:a:orientacion:">construirPuertaDe:unaHab1 orientacion:or1 a:unaHab2 orientacion:or2	|puerta h1 h2|	puerta:= Puerta new.	h1:= laberinto getHabId:unaHab1.	h2:= laberinto getHabId:unaHab2.	puerta h1:h1.	puerta h2:h2.		h1 ponerEn:or1 superficie:puerta.	h2 ponerEn:or2 superficie:puerta.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurOeste">irAlSurOeste	posicion irAlSurOeste:self.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurEste">irAlSurEste	posicion irAlSurEste:self.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorEste">irAlNorEste	posicion irAlNorEste:self.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorOeste">irAlNorOeste	posicion irAlNorOeste:self.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurEste:">irAlSurEste:unAlguien		self forma irAlSurEste:unAlguien.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorEste:">irAlNorEste:unAlguien		self forma irAlNorEste:unAlguien.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorOeste:">irAlNorOeste:unAlguien		self forma irAlNorOeste:unAlguien.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurOeste:">irAlSurOeste:unAlguien		self forma irAlSurOeste:unAlguien.</body></methods><do-it>Triangulo organization addCategory: #operaciones</do-it><methods><class-id>Triangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSur:">irAlSur:unAlguien	self sur entrar:unAlguien.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlEste:">irAlEste:unAlguien	self este entrar:unAlguien.</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>irAlEste:</selector></remove-selector><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorte:">irAlNorte:unAlguien	self norte entrar:unAlguien.</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>irAlNorte:</selector></remove-selector><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlOeste:">irAlOeste:unAlguien	self oeste entrar:unAlguien.</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>irAlOeste:</selector></remove-selector><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSur:">irAlSur:unAlguien	self sur entrar:unAlguien.</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>irAlSur:</selector></remove-selector><remove-selector><class-id>Triangulo</class-id> <selector>irAlSur:</selector></remove-selector><class><name>Rectangulo</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars>norte este oeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Triangulo</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars>norte noreste sureste suroeste noroeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Forma</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sur </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Rectangulo</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars>norte este </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Forma</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sur oeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Triangulo</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars>noreste sureste suroeste noroeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Rectangulo</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars>este </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Forma</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sur oeste norte </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Rectangulo</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Forma</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sur oeste norte este </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="oeste">oeste	^oeste</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="oeste:">oeste: anObject	oeste := anObject</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="este">este	^este</body></methods><methods><class-id>Triangulo</class-id> <category>accessing</category><body package="Laberinto" selector="este:">este: anObject	este := anObject</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="obtenerLaberinto">obtenerLaberinto	self subclassResponsibility.</body></methods><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="este1">este1	^este</body></methods><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="este1:">este1: anObject	este := anObject</body></methods><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="norte1">norte1	^norte</body></methods><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="norte1:">norte1: anObject	norte := anObject</body></methods><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="oeste1">oeste1	^oeste</body></methods><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="oeste1:">oeste1: anObject	oeste := anObject</body></methods><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="sur1">sur1	^sur</body></methods><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="sur1:">sur1: anObject	sur := anObject</body></methods><remove-selector><class-id>Forma</class-id> <selector>este1</selector></remove-selector><remove-selector><class-id>Forma</class-id> <selector>sur1:</selector></remove-selector><remove-selector><class-id>Forma</class-id> <selector>sur1</selector></remove-selector><remove-selector><class-id>Forma</class-id> <selector>oeste1:</selector></remove-selector><remove-selector><class-id>Forma</class-id> <selector>oeste1</selector></remove-selector><remove-selector><class-id>Forma</class-id> <selector>norte1:</selector></remove-selector><remove-selector><class-id>Forma</class-id> <selector>norte1</selector></remove-selector><remove-selector><class-id>Forma</class-id> <selector>este1:</selector></remove-selector><do-it>Forma organization removeCategory: #accessing</do-it><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="este">este	^este</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>este</selector></remove-selector><remove-selector><class-id>Triangulo</class-id> <selector>este</selector></remove-selector><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="sur:">sur: anObject	sur := anObject</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>sur:</selector></remove-selector><remove-selector><class-id>Triangulo</class-id> <selector>sur:</selector></remove-selector><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="sur">sur	^sur</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>sur</selector></remove-selector><remove-selector><class-id>Triangulo</class-id> <selector>sur</selector></remove-selector><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="oeste:">oeste: anObject	oeste := anObject</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>oeste:</selector></remove-selector><remove-selector><class-id>Triangulo</class-id> <selector>oeste:</selector></remove-selector><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="oeste">oeste	^oeste</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>oeste</selector></remove-selector><remove-selector><class-id>Triangulo</class-id> <selector>oeste</selector></remove-selector><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="norte:">norte: anObject	norte := anObject</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>norte:</selector></remove-selector><remove-selector><class-id>Triangulo</class-id> <selector>norte:</selector></remove-selector><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="norte">norte	^norte</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>norte</selector></remove-selector><remove-selector><class-id>Triangulo</class-id> <selector>norte</selector></remove-selector><methods><class-id>Forma</class-id> <category>accessing</category><body package="Laberinto" selector="este:">este: anObject	este := anObject</body></methods><remove-selector><class-id>Rectangulo</class-id> <selector>este:</selector></remove-selector><remove-selector><class-id>Triangulo</class-id> <selector>este:</selector></remove-selector><methods><class-id>Triangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurEste:">irAlSurEste:unAlguien	self sureste entrar:unAlguien.</body></methods><methods><class-id>Triangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurOeste:">irAlSurOeste:unAlguien	self suroeste entrar:unAlguien.</body></methods><methods><class-id>Triangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorOeste:">irAlNorOeste:unAlguien	self noroeste entrar:unAlguien.</body></methods><methods><class-id>Triangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorEste:">irAlNorEste:unAlguien	self noreste entrar:unAlguien.</body></methods><do-it>ParserConfig organization addCategory: #operaciones</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="catalogo">catalogo	^catalogo</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="catalogo:">catalogo: anObject	catalogo := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new orden:(bicho posicion orientaciones)).</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="leer:">leer:unArchivo	| archivo stream linea forma|	archivo := unArchivo asFilename.	stream := archivo readStream.	[ stream atEnd] whileFalse: [	linea := stream upTo: Character cr.	forma := linea copyUpTo: $,.	forma = 'forma' ifTrue: [linea copyFrom: 7 to:linea size]. ].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="leer:">leer:unArchivo	| archivo stream linea forma numHab puertas|	archivo := unArchivo asFilename.	stream := archivo readStream.	[ stream atEnd] whileFalse: [	linea := stream upTo: Character cr.	forma := linea copyUpTo: $,.	forma = 'forma'	ifTrue: [linea copyFrom: 7 to:linea size]	ifFalse: [				].].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="leer:">leer:unArchivo	| archivo stream linea forma |	archivo := unArchivo asFilename.	stream := archivo readStream.	[ stream atEnd] whileFalse: [	linea := stream upTo: Character cr.	forma := linea copyUpTo: $,.	forma = 'forma'	ifTrue: [linea copyFrom: 7 to:linea size]	ifFalse: [				].].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo = Dictionary new.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="leer:">leer:unArchivo	| archivo stream linea clave numHab puertas |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [linea copyFrom: 5 to:linea size]		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="leer:">leer:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [linea copyFrom: 5 to:linea size]		].	stream close.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHab">numHab	^numHab</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHab:">numHab: anObject	numHab := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaPuertas">listaPuertas	^listaPuertas</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaPuertas:">listaPuertas: anObject	listaPuertas := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="forma">forma	^forma</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="forma:">forma: anObject	forma := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="leerArchivo:">leerArchivo:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [linea copyFrom: 5 to:linea size]		].	stream close.</body></methods><remove-selector><class-id>ParserConfig</class-id> <selector>leer:</selector></remove-selector><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="leerArchivo:">leerArchivo:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= linea copyFrom: 5 to:linea size].		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto	</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto	self construirLaberintoRectangulos.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' LaberintoRectangularBuilder new.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoRectanguloFactory new.juego laberinto: factory crearLaberinto.(juego laberinto getHabId:1) forma norte abierta:true.bicho:= Bicho new.bicho posicion:(juego laberinto getHabId:1).bicho estrategia:(SentidoHorario new orden:(bicho posicion orientaciones)).bicho camina.</do-it><do-it>bicho camina.</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| num builder n1 or1 parte2 n2 or2 |	num:= numHab asNumber.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="leerArchivo:">leerArchivo:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| num builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or2) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 11, 2015' '8:10:56 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:10:56 on 11 de marzo de 2015."</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		].	stream close.</body></methods><remove-selector><class-id>ParserConfig</class-id> <selector>leerArchivo:</selector></remove-selector><do-it>conf:= ParserConfig new.</do-it><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	self iniciarCatalogo.	^self</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.</do-it><do-it>LaberintoRectangularBuilder organization addCategory: #operaciones</do-it><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	Habitacion new.</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	Habitacion new.	hab:=self fabricarHabitacion.	hab id:1.	hab forma:self fabricarForma.	hab1 forma norte:self fabricarPared.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	Habitacion new.	hab:=self fabricarHabitacion.	hab id:unId.	hab forma:self fabricarForma.	hab1 forma norte:self fabricarPared.	hab1 forma sur:self fabricarPared.	hab1 forma este:self fabricarPared.	hab1 forma oeste:self fabricarPared.</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	Habitacion new.	hab:=self fabricarHabitacion.	hab id:unId.	hab forma:self fabricarForma.	hab forma norte:self fabricarPared.	hab forma sur:self fabricarPared.	hab forma este:self fabricarPared.	hab forma oeste:self fabricarPared.</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	Habitacion new.	hab:=self fabricarHabitacion.	hab id:unId.	hab forma:self fabricarForma.	hab forma norte:self Pared new.	hab forma sur:self fabricarPared.	hab forma este:self fabricarPared.	hab forma oeste:self fabricarPared.</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	Habitacion new.	hab:=self fabricarHabitacion.	hab id:unId.	hab forma:self fabricarForma.	hab forma norte:Pared new.	hab forma sur:Pared new.	hab forma este:Pared new.	hab forma oeste:Pared new.</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Pared new.	hab forma norte:Pared new.	hab forma sur:Pared new.	hab forma este:Pared new.	hab forma oeste:Pared new.</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Pared new.	hab forma norte:Pared new.	hab forma sur:Pared new.	hab forma este:Pared new.	hab forma oeste:Pared new.	^hab</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Pared new.	hab forma norte:Pared new.	hab forma sur:Pared new.	hab forma este:Pared new.	hab forma oeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSur default;add:OriEste default;add:OriOeste default.	^hab</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Pared new.	hab forma norte:Pared new.	hab forma sur:Pared new.	hab forma este:Pared new.	hab forma oeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSur default;add:OriEste default;add:OriOeste default.	laberinto habitacion</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Pared new.	hab forma norte:Pared new.	hab forma sur:Pared new.	hab forma este:Pared new.	hab forma oeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSur default;add:OriEste default;add:OriOeste default.	laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Rectangulo new.	hab forma norte:Pared new.	hab forma sur:Pared new.	hab forma este:Pared new.	hab forma oeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSur default;add:OriEste default;add:OriOeste default.	laberinto habitaciones add:hab.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="ponerEn:superficie:">ponerEn:unaOri superficie:unaSuperficie	</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="ponerEn:superficie:">ponerEn:unaOri superficie:unaSuperficie	forma unaOri</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="ponerEn:superficie:">ponerEn:unaOri superficie:unaSuperficie	forma unaOri:unaSuperficie.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="poner">poner</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="ponerEn:superficie:">ponerEn:unaOri superficie:unaSuperficie	unaOri poner:unaSuperficie.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="ponerEn:superficie:">ponerEn:unaOri superficie:unaSuperficie	forma ponerEn:unaOri superficie:unaSuperficie.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="ponerEn:superficie:">ponerEn:unaOri superficie:unaSuperficie	unaOri poner:unaSuperficie en:self.</body></methods><methods><class-id>Orientacion</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma</body></methods><methods><class-id>Orientacion</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	self subclassResponsibility.</body></methods><methods><class-id>OriEste</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma este:unaSuperficie.</body></methods><do-it>Rectangulo organization removeCategory: #operaciones</do-it><do-it>Rectangulo organization removeCategory: #accessing</do-it><methods><class-id>OriNorEste</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma oeste:unaSuperficie.</body></methods><methods><class-id>OriNorEste</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma noroeste:unaSuperficie.</body></methods><methods><class-id>OriNorOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma noroeste:unaSuperficie.</body></methods><methods><class-id>OriNorte</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma norte:unaSuperficie.</body></methods><methods><class-id>OriOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma oeste:unaSuperficie.</body></methods><methods><class-id>OriSur</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma sur:unaSuperficie.</body></methods><methods><class-id>OriSurEste</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma sureste:unaSuperficie.</body></methods><methods><class-id>OriSurOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma suroeste:unaSuperficie.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="obtenerLaberinto">obtenerLaberinto	^laberinto</body></methods><do-it>juego laberinto:conf construirLaberinto.</do-it><do-it>juego laberinto:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto	^self construirLaberintoRectangulos.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><do-it>juego laberinto:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><class><name>LaberintoTriangularBuilder</name><environment>Smalltalk</environment><super>LaberintoBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>LaberintoTriangularBuilder</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>LaberintoTriangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	" *** This method was defined by LaberintoBuilder as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>LaberintoTriangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma norte:Pared new.	hab forma sur:Pared new.	hab forma este:Pared new.	hab forma oeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSur default;add:OriEste default;add:OriOeste default.	laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoTriangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma norte:Pared new.	hab forma sureste:Pared new.	hab forma suroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSurEste default;add:OriSurOeste default.	laberinto habitaciones add:hab.</body></methods><do-it>LaberintoTriangularBuilder renameTo: #LaberintoTriangularEOBuilder</do-it><class><name>LaberintoTriangularNSBuilder</name><environment>Smalltalk</environment><super>LaberintoBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>LaberintoTriangularNSBuilder</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>LaberintoTriangularNSBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	" *** This method was defined by LaberintoBuilder as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>LaberintoTriangularNSBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma norte:Pared new.	hab forma sureste:Pared new.	hab forma suroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSurEste default;add:OriSurOeste default.	laberinto habitaciones add:hab.</body></methods><do-it>juego:= JuegoLaberinto new.factory:= LaberintoTrianguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoTrianguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoTrianguloFactory new.juego laberinto: factory crearLaberinto.</do-it><do-it>juego:= JuegoLaberinto new.factory:= LaberintoTrianguloFactory new.juego laberinto: factory crearLaberinto.</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto	^self construirLaberintoTriangulos.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulos' put:LaberintoTriangularNSBuilder new.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.</body></methods><remove-selector><class-id>LaberintoBuilder</class-id> <selector>construirHabitacion:</selector></remove-selector><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><methods><class-id>LaberintoTriangularNSBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionN:">construirHabitacionN:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma norte:Pared new.	hab forma sureste:Pared new.	hab forma suroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSurEste default;add:OriSurOeste default.	laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoTriangularNSBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionS:">construirHabitacionS:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma norte:Pared new.	hab forma sureste:Pared new.	hab forma suroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSurEste default;add:OriSurOeste default.	laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoTriangularNSBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionS:">construirHabitacionS:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma sur:Pared new.	hab forma noreste:Pared new.	hab forma noroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriNorEste default;add:OriNorOeste default.	laberinto habitaciones add:hab.</body></methods><remove-selector><class-id>LaberintoTriangularNSBuilder</class-id> <selector>construirHabitacion:</selector></remove-selector><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].			self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabS">numHabS	^numHabS</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabS:">numHabS: anObject	numHabS := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabO">numHabO	^numHabO</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabO:">numHabO: anObject	numHabO := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabN">numHabN	^numHabN</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabN:">numHabN: anObject	numHabN := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabE">numHabE	^numHabE</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabE:">numHabE: anObject	numHabE := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacionN:ind].	1 to:numHab do:[:ind | builder construirHabitacionS:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><methods><class-id>LaberintoTriangularNSBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionO:">construirHabitacionO:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma oeste:Pared new.	hab forma noreste:Pared new.	hab forma sureste:Pared new.	hab orientaciones add:OriNorte default;add:OriNorEste default;add:OriSurEste default.	laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoTriangularNSBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionE:">construirHabitacionE:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma este:Pared new.	hab forma noroeste:Pared new.	hab forma suroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriNorOeste default;add:OriSurOeste default.	laberinto habitaciones add:hab.</body></methods><do-it>LaberintoTriangularNSBuilder renameTo: #LaberintoTriangularBuilder</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulos' put:LaberintoTriangularBuilder new.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacionN:ind].	1 to:numHab do:[:ind | builder construirHabitacionS:ind].	1 to:numHab do:[:ind | builder construirHabitacionO:ind].	1 to:numHab do:[:ind | builder construirHabitacionE:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabO:=0.	numHabE:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulos' put:LaberintoTriangularBuilder new.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHabN do:[:ind | builder construirHabitacionN:ind].	1 to:numHabS do:[:ind | builder construirHabitacionS:ind].	1 to:numHabO do:[:ind | builder construirHabitacionO:ind].	1 to:numHabE do:[:ind | builder construirHabitacionE:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><shared-variable><name>UnicaInstancia</name><environment>OriNorEste</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Laberinto</package></attributes></shared-variable><do-it>OriNorEste addClassVarName: #UnicaInstancia</do-it><methods><class-id>OriNorEste class</class-id> <category>instance creation</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><methods><class-id>OriNorEste class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><methods><class-id>OriNorOeste class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><methods><class-id>OriSurEste class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><methods><class-id>OriSurOeste class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new		self error: 'no se puede crear un nuevo objeto'</body></methods><shared-variable><name>UnicaInstancia</name><environment>OriNorOeste</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Laberinto</package></attributes></shared-variable><do-it>OriNorOeste addClassVarName: #UnicaInstancia</do-it><methods><class-id>OriNorOeste class</class-id> <category>instance creation</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><shared-variable><name>UnicaInstancia</name><environment>OriSurEste</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Laberinto</package></attributes></shared-variable><do-it>OriSurEste addClassVarName: #UnicaInstancia</do-it><methods><class-id>OriSurEste class</class-id> <category>instance creation</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><shared-variable><name>UnicaInstancia</name><environment>OriSurOeste</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Laberinto</package></attributes></shared-variable><do-it>OriSurOeste addClassVarName: #UnicaInstancia</do-it><methods><class-id>OriSurOeste class</class-id> <category>instance creation</category><body package="Laberinto" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-triangulos-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-triangulos-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulo' put:LaberintoTriangularBuilder new.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulos' put:LaberintoTriangularBuilder new.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'estea' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulos' put:LaberintoTriangularBuilder new.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'nortea' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulos' put:LaberintoTriangularBuilder new.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulos' put:LaberintoTriangularBuilder new.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="incrementar:">incrementar:unCont	^unCont + 1.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:(self incrementar:cont)].	1 to:numHabS do:[:ind | builder construirHabitacionS:ind].	1 to:numHabO do:[:ind | builder construirHabitacionO:ind].	1 to:numHabE do:[:ind | builder construirHabitacionE:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:(self incrementar:cont)].	1 to:numHabS do:[:ind | builder construirHabitacionS:(self incrementar:cont)].	1 to:numHabO do:[:ind | builder construirHabitacionO:(self incrementar:cont)].	1 to:numHabE do:[:ind | builder construirHabitacionE:(self incrementar:cont)].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO cont </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2  |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><remove-selector><class-id>ParserConfig</class-id> <selector>incrementar:</selector></remove-selector><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cont</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cont</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO conta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		conta:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:conta. conta:=conta+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:conta. conta:=conta+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:conta. conta:=conta+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:conta. conta:=conta+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].	^builder obtenerLaberinto.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-triangulos-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-triangulosOE-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-triangulosOE-2hab.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LaberintoTriangularEOBuilder</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LaberintoTriangularEOBuilder</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>LaberintoTriangularEOBuilder removeFromSystem</do-it><comment><class-id>ParserConfig</class-id><body>ParserConfig convierte un fichero con la configuración en un laberinto.Instance Variables:	catalogo	&lt;Dictionary&gt;	description of catalogo	forma	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of forma	listaPuertas	&lt;(Collection of: SequenceableCollection)&gt;	description of listaPuertas	numHab	&lt;SmallInteger&gt;	description of numHab	numHabE	&lt;SmallInteger&gt;	description of numHabE	numHabN	&lt;SmallInteger&gt;	description of numHabN	numHabO	&lt;SmallInteger&gt;	description of numHabO	numHabS	&lt;SmallInteger&gt;	description of numHabS</body></comment><comment><class-id>LaberintoTriangularBuilder</class-id><body>LaberintoTriangularBuilder construye laberintos triangulares.</body></comment><comment><class-id>LaberintoRectangularBuilder</class-id><body>LaberintoRectangularBuilder construye laberintos rectangulares.</body></comment><comment><class-id>LaberintoBuilder</class-id><body>LaberintoBuilder constructor de laberintos.Instance Variables:	laberinto	&lt;Laberinto&gt;	description of laberinto</body></comment><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 12, 2015' '6:06:27 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:06:27 on 12 de marzo de 2015."</do-it><class><name>Hexagono</name><environment>Smalltalk</environment><super>Forma</super><private>false</private><indexed-type>none</indexed-type><inst-vars>noreste noroeste sureste suroeste </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Hexagono</class-id> <category>accessing</category><body package="Laberinto" selector="noreste">noreste	^noreste</body></methods><methods><class-id>Hexagono</class-id> <category>accessing</category><body package="Laberinto" selector="noreste:">noreste: anObject	noreste := anObject</body></methods><methods><class-id>Hexagono</class-id> <category>accessing</category><body package="Laberinto" selector="noroeste">noroeste	^noroeste</body></methods><methods><class-id>Hexagono</class-id> <category>accessing</category><body package="Laberinto" selector="noroeste:">noroeste: anObject	noroeste := anObject</body></methods><methods><class-id>Hexagono</class-id> <category>accessing</category><body package="Laberinto" selector="sureste">sureste	^sureste</body></methods><methods><class-id>Hexagono</class-id> <category>accessing</category><body package="Laberinto" selector="sureste:">sureste: anObject	sureste := anObject</body></methods><methods><class-id>Hexagono</class-id> <category>accessing</category><body package="Laberinto" selector="suroeste">suroeste	^suroeste</body></methods><methods><class-id>Hexagono</class-id> <category>accessing</category><body package="Laberinto" selector="suroeste:">suroeste: anObject	suroeste := anObject</body></methods><methods><class-id>Hexagono</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	noreste := nil.	noroeste := nil.	sureste := nil.	suroeste := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>Hexagono</class-id><body>Hexagono define la forma hexgonal.Instance Variables:	noreste	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of noreste	noroeste	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of noroeste	sureste	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of sureste	suroeste	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of suroeste</body></comment><do-it>Hexagono organization addCategory: #operaciones</do-it><methods><class-id>Hexagono</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorOeste:">irAlNorOeste:unAlguien	self noroeste entrar:unAlguien.</body></methods><methods><class-id>Hexagono</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorEste:">irAlNorEste:unAlguien	self noreste entrar:unAlguien.</body></methods><methods><class-id>Hexagono</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurEste:">irAlSurEste:unAlguien	self sureste entrar:unAlguien.</body></methods><methods><class-id>Hexagono</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurOeste:">irAlSurOeste:unAlguien	self suroeste entrar:unAlguien.</body></methods><class><name>ProxyLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ProxyLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ProxyLaberinto class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>ProxyLaberinto</class-id><body>ProxyLaberinto proxy que conecta los laberintos.</body></comment><class><name>BlackHole</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars>proxyLaberinto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>BlackHole</class-id> <category>accessing</category><body package="Laberinto" selector="proxyLaberinto">proxyLaberinto	^proxyLaberinto</body></methods><methods><class-id>BlackHole</class-id> <category>accessing</category><body package="Laberinto" selector="proxyLaberinto:">proxyLaberinto: anObject	proxyLaberinto := anObject</body></methods><methods><class-id>BlackHole</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	proxyLaberinto := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		].	stream close.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="holeHab">holeHab	^holeHab</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="holeHab:">holeHab: anObject	holeHab := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		].	stream close.</body></methods><do-it>ProxyLaberinto organization addCategory: #operaciones</do-it><comment><class-id>BlackHole</class-id><body>BlackHole agujeros negros.Instance Variables:	proxyLaberinto	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of proxyLaberinto</body></comment><class><name>ProxyLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>laberinto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabId:">getHabId:unId	^laberinto getHabId:unId.</body></methods><methods><class-id>BlackHole</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	proxyLaberinto := ProxyLaberinto new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="addHole:">addHole:unId	</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="addHole:">addHole:unId	laberinto getHabId:unId</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="addHole:">addHole:unId	laberinto getHabId:unId add:BlackHole new.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].			^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	holeHab:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].	^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].	^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto		^self construirLaberintoRectangulos.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="addHole:">addHole:unId	(laberinto getHabId:unId) add:BlackHole new.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto				^self construirLaberintoRectangulos.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto		forma = 'rectangulos'	ifTrue: [^self construirLaberintoRectangulos].		forma = 'triangulos'	ifTrue: [^self construirLaberintoTriangulos].		^self construirLaberintoRectangulos.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto		forma = 'rectangulos'	ifTrue: [^self construirLaberintoRectangulos].		forma = 'triangulos'	ifTrue: [^self construirLaberintoTriangulos].</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego laberinto:conf construirLaberinto.</do-it><class><name>LaberintoHexagonalBuilder</name><environment>Smalltalk</environment><super>LaberintoBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>LaberintoHexagonalBuilder</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>LaberintoHexagonalBuilder</class-id><body>LaberintoHexagonalBuilder construye laberintos hexagonales.</body></comment><do-it>LaberintoHexagonalBuilder organization addCategory: #operaciones</do-it><methods><class-id>LaberintoHexagonalBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Hexagono new.	hab forma norte:Pared new.	hab forma noreste:Pared new.	hab forma sureste:Pared new.	hab forma sur:Pared new.	hab forma suroeste:Pared new.	hab forma noroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriNorEste default;add:OriSurEste default;add:OriSur default;add:OriSurOeste default;add:OriNorOeste default.	laberinto habitaciones add:hab.</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabId:">getHabId:unId	laberinto isNil	ifTrue: [laberinto := Laberinto new].		^laberinto getHabId:unId.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].	^builder obtenerLaberinto.</body></methods><remove-selector><class-id>ParserConfig</class-id> <selector>construirLaberintoHexagonos</selector></remove-selector><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].	^builder obtenerLaberinto.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabNS </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabNS numHabEO </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabEO">numHabEO	^numHabEO</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabEO:">numHabEO: anObject	numHabEO := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabNS">numHabNS	^numHabNS</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabNS:">numHabNS: anObject	numHabNS := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabNS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabEO:= (linea copyFrom: 6 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto		forma = 'rectangulos'	ifTrue: [^self construirLaberintoRectangulos].		forma = 'triangulos'	ifTrue: [^self construirLaberintoTriangulos].		forma = 'hexagonos'	ifTrue: [^self construirLaberintoHexagonos].</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	| conf |	conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.	"laberinto: conf construirLaberinto."</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberinto">laberinto	^laberinto</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberinto:">laberinto: anObject	laberinto := anObject</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	laberinto := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarNivel:">agregarNivel:unLaberinto	laberinto add:unLaberinto.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>laberinto</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>laberinto</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>laberintos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarNivel:">agregarNivel:unLaberinto	laberintos add:unLaberinto.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberinto:">laberinto: anObject	laberintos := anObject</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto:">crearLaberinto:unFM	| hab1 hab2 puerta |	hab1:=unFM fabricarHabitacion.	hab1 id:1.	hab2:=unFM fabricarHabitacion.	hab2 id:2.	puerta:=unFM fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:unFM fabricarPared.	hab1 este:unFM fabricarPared.	hab1 oeste:unFM fabricarPared.	hab2 sur:puerta.	hab2 norte:unFM fabricarPared.	hab2 este:unFM fabricarPared.	hab2 oeste:unFM fabricarPared.	laberintos:=unFM fabricarLaberinto.	laberintos addHab:hab1.	laberintos addHab:hab2.		^laberintos</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	laberintos := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto 	| hab1 hab2 puerta |	hab1:=Habitacion new.	hab1 id:1.	hab2:=Habitacion new.	hab2 id:2.	puerta:=Puerta new.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:Pared new.	hab1 este:Pared new.	hab1 oeste:Pared new.	hab2 sur:puerta.	hab2 norte:Pared new.	hab2 este:Pared new.	hab2 oeste:Pared new.	laberintos:=Laberinto new.	laberintos addHab:hab1.	laberintos addHab:hab2.		^laberintos</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberinto">laberinto	^laberintos</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberinto">construirLaberinto	self laberinto: Laberinto new.</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	| conf |	conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.		self laberinto: conf construirLaberinto.</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	| conf |		conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.		self laberinto: conf construirLaberinto.</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabId:">getHabId:unId	laberinto isNil	ifTrue: [self crearLaberinto].		^laberinto getHabId:unId.</body></methods><do-it>BlackHole organization addCategory: #operaciones</do-it><methods><class-id>BlackHole</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:unAlguien	| hab |		self proxyLaberinto juego:unAlguien juego.	hab:= self proxyLaberinto getHabId:1.	unAlguien posicion:hab.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarNivel:">agregarNivel:unLaberinto	self laberintos add:unLaberinto.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarNivel:">agregarNivel:unLaberinto	laberintos add:unLaberinto.</body></methods><class><name>ProxyLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>laberinto juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ProxyLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="juego">juego	^juego</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	| conf |		conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.		self juego agregarNivel:conf construirLaberinto	self laberinto: conf construirLaberinto.		self juego agregarNivel:laberinto</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarNivel:">agregarNivel:unLaberinto	laberintos add:unLaberinto.	^laberintos size</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarNivel:">agregarNivel:unLaberinto	laberintos add:unLaberinto.	^laberintos size.</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	| conf ind |		conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.		ind:= self juego agregarNivel:conf construirLaberinto.	self laberinto: conf construirLaberinto.		self juego agregarNivel:laberinto</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	| conf ind |		conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.		ind:= self juego agregarNivel:conf construirLaberinto.	self laberinto: (self juego laberintos at:ind)</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	| conf ind |		conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.		ind:= self juego agregarNivel:conf construirLaberinto.	self laberinto: (self juego laberintos at:ind).</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="juego">juego	^juego</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabId:nivel:">getHabId:unId nivel:unNivel	^(laberintos at:unNivel) getHabId:unId.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>user:= Personaje new.user juego:juego.</do-it><do-it>user posicion:(juego getHabId:1 nivel:1).</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.user:= Personaje new.user juego:juego.user posicion:(juego getHabId:1 nivel:1).</do-it><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	| conf ind |		conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.		ind:= self juego agregarNivel:conf construirLaberinto.	self laberinto: ((self juego laberintos) at:ind).</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberintos">laberintos	^laberintos</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberintos:">laberintos: anObject	laberintos := anObject</body></methods><remove-selector><class-id>JuegoLaberinto</class-id> <selector>laberinto</selector></remove-selector><remove-selector><class-id>JuegoLaberinto</class-id> <selector>laberinto:</selector></remove-selector><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.user:= Personaje new.user juego:juego.user posicion:(juego getHabId:1 nivel:1).((juego getHabId:1 nivel:1) hijos at:1) entrar:user.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.user:= Personaje new.user juego:juego.user posicion:(juego getHabId:1 nivel:1).((juego getHabId:1 nivel:1) hijos at:1) entrar:user.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 18, 2015' '8:32:22 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:32:22 on 18 de marzo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 19, 2015' '4:24:31 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 16:24:31 on 19 de marzo de 2015."</do-it><component-created><name>SUnitPreload</name> <type>package</type></component-created><parcel-loaded><name>SUnitPreload</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'SUnit' 'SUnitPreload.pcl'))</filename></parcel-loaded><component-created><name>SUnit</name> <type>package</type></component-created><parcel-loaded><name>SUnit</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'contributed' 'SUnit' 'SUnit.pcl'))</filename></parcel-loaded><component-created><name>RBSUnitExtensions</name> <type>package</type></component-created><parcel-loaded><name>RBSUnitExtensions</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'RBSUnitExtensions.pcl'))</filename></parcel-loaded><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.user:= Personaje new.user juego:juego.user posicion:(juego getHabId:1 nivel:1).((juego getHabId:1 nivel:1) hijos at:1) entrar:user.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.user:= Personaje new.user juego:juego.user posicion:(juego getHabId:1 nivel:1).((juego getHabId:1 nivel:1) hijos at:1) entrar:user.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.user:= Personaje new.user juego:juego.user posicion:(juego getHabId:1 nivel:1).((juego getHabId:1 nivel:1) hijos at:1) entrar:user.</do-it><component-created><name>LaberintoTest</name> <type>package</type></component-created><component-property><name>LaberintoTest</name> <type>package</type><property>comment</property> <value>'Test del laberinto.'</value></component-property><component-property><name>LaberintoTest</name> <type>package</type><property>comment</property> <value>'Tests del ejemplo del laberinto'</value></component-property><class><name>Laberinto4RectangulosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><methods><class-id>Laberinto4RectangulosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| conf |	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene1Nivel">testJuegoTiene1Nivel	self assert:(juego niveles size =1)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1 nivel:1.	hab2:=juego obtenerHabitacion:2 nivel:1.		hab3:=juego obtenerHabitacion:3 nivel:1.		hab4:=juego obtenerHabitacion:4 nivel:1.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTiene4Habitaciones">testLaberintoTiene4Habitaciones	| lab |	lab:=juego niveles at:1.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego niveles at:1.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego niveles at:1.	self assert:(lab habitaciones size&gt;0)</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FormaRectangulo</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FormaRectangulo</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testHabEsRectangular">testHabEsRectangular	| lab |	lab:=juego niveles at:1.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testHabEsRectangular">testHabEsRectangular	| lab |	lab:=juego laberintos at:1.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene1Nivel">testJuegoTiene1Nivel	self assert:(juego laberintos size =1)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberintos at:1.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTiene4Habitaciones">testLaberintoTiene4Habitaciones	| lab |	lab:=juego laberintos at:1.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberintos at:1.	self assert:(lab habitaciones size&gt;0)</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>laberintos</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>laberintos</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>niveles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getHabId:nivel:">getHabId:unId nivel:unNivel	^(niveles at:unNivel) getHabId:unId.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarNivel:">agregarNivel:unLaberinto	niveles add:unLaberinto.	^niveles size.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto:">crearLaberinto:unFM	| hab1 hab2 puerta |	hab1:=unFM fabricarHabitacion.	hab1 id:1.	hab2:=unFM fabricarHabitacion.	hab2 id:2.	puerta:=unFM fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:unFM fabricarPared.	hab1 este:unFM fabricarPared.	hab1 oeste:unFM fabricarPared.	hab2 sur:puerta.	hab2 norte:unFM fabricarPared.	hab2 este:unFM fabricarPared.	hab2 oeste:unFM fabricarPared.	niveles:=unFM fabricarLaberinto.	niveles addHab:hab1.	niveles addHab:hab2.		^niveles</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	niveles := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto 	| hab1 hab2 puerta |	hab1:=Habitacion new.	hab1 id:1.	hab2:=Habitacion new.	hab2 id:2.	puerta:=Puerta new.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:Pared new.	hab1 este:Pared new.	hab1 oeste:Pared new.	hab2 sur:puerta.	hab2 norte:Pared new.	hab2 este:Pared new.	hab2 oeste:Pared new.	niveles:=Laberinto new.	niveles addHab:hab1.	niveles addHab:hab2.		^niveles</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberintos:">laberintos: anObject	niveles := anObject</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberintos">laberintos	^niveles</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testHabEsRectangular">testHabEsRectangular	| lab |	lab:=juego niveles at:1.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene1Nivel">testJuegoTiene1Nivel	self assert:(juego niveles size =1)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego niveles at:1.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTiene4Habitaciones">testLaberintoTiene4Habitaciones	| lab |	lab:=juego niveles at:1.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego niveles at:1.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego getHabId:1 nivel:1.	hab2:=juego getHabId:2 nivel:1.		hab3:=juego getHabId:3 nivel:1.		hab4:=juego getHabId:4 nivel:1.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| conf |	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego agregarNivel:conf construirLaberinto.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="niveles">niveles	^niveles</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	| conf ind |		conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.		ind:= self juego agregarNivel:conf construirLaberinto.	self laberinto: ((self juego niveles) at:ind).</body></methods><remove-selector><class-id>JuegoLaberinto</class-id> <selector>laberintos</selector></remove-selector><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="niveles:">niveles: anObject	niveles := anObject</body></methods><remove-selector><class-id>JuegoLaberinto</class-id> <selector>laberintos:</selector></remove-selector><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| conf |	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. 	juego agregarNivel:conf construirLaberinto.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testHabEsRectangular">testHabEsRectangular	| lab |	lab:=juego niveles at:1.	self assert:((lab habitaciones select:[:each | each forma class = Rectangulo]) size =lab habitaciones size)</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 19, 2015' '6:02:33 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:02:33 on 19 de marzo de 2015."</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>niveles personajes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="personajes">personajes	^personajes</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="personajes:">personajes: anObject	personajes := anObject</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="enviarMsg:a:">enviarMsg:unMsg a:unNombre	| netscreen |	netscreen de:self nombre enviaMsg:unMsg a:unNombre</body></methods><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>Personaje addInstVarName: 'netscreen'</do-it><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="enviarMsg:a:">enviarMsg:unMsg a:unNombre	netscreen de:self nombre enviaMsg:unMsg a:unNombre</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="netscreen">netscreen	^netscreen</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="netscreen:">netscreen: anObject	netscreen := anObject</body></methods><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="nombre">nombre	^nombre</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nombre</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nombre</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><remove-selector><class-id>Personaje</class-id> <selector>nombre</selector></remove-selector><remove-selector><class-id>Personaje</class-id> <selector>nombre:</selector></remove-selector><class><name>EnteAutonomo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="nombre">nombre	^nombre</body></methods><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><class><name>NetSreen</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>NetSreen</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>NetSreen class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>NetSreen</class-id><body>NetSreen mediator</body></comment><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearNetScreen">crearNetScreen	</body></methods><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>niveles personajes netscreen </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>JuegoLaberinto addInstVarName: 'netscreen'</do-it><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearNetScreen">crearNetScreen	netscreen:= NetSreen new.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="netscreen">netscreen	^netscreen</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="netscreen:">netscreen: anObject	netscreen := anObject</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearNetScreen">crearNetScreen	self etscreen: NetSreen new.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearNetScreen">crearNetScreen	self netscreen: NetSreen new.</body></methods><do-it>NetSreen renameTo: #NetScreen</do-it><comment><class-id>NetScreen</class-id><body>NetSreen mediator</body></comment><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearNetScreen">crearNetScreen	self netscreen: NetScreen new.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="recibeMsg:de:">recibeMsg:unMsg de:unNombre	Transcript</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="recibeMsg:de:">recibeMsg:unMsg de:unNombre	Transcript show:self nombre,' ha recibido un mensaje de: ',unNombre,' Mensaje: 'unMsg;cr.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="recibeMsg:de:">recibeMsg:unMsg de:unNombre	Transcript show:self nombre,' ha recibido un mensaje de: ',unNombre,' Mensaje: ',unMsg;cr.</body></methods><do-it>NetScreen organization addCategory: #operaciones</do-it><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="de:enviaMsg:a:">de:unEmisor enviaMsg:unMsg a:unReceptor</body></methods><class><name>NetScreen</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>personajes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>NetScreen</class-id> <category>accessing</category><body package="Laberinto" selector="personajes">personajes	^personajes</body></methods><methods><class-id>NetScreen</class-id> <category>accessing</category><body package="Laberinto" selector="personajes:">personajes: anObject	personajes := anObject</body></methods><methods><class-id>NetScreen</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		personajes:= Dictionary new.		^self</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarPersonaje:">agregarPersonaje:unPersonaje		netscreen personajes at:unPersonaje nombre put:unPersonaje.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarPersonaje:">agregarPersonaje:unPersonaje	personajes add:unPersonaje.	netscreen personajes at:unPersonaje nombre put:unPersonaje.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	niveles := List new.	personajes := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="nombre:juego:">nombre:unNombre juego:unJuego	self nombre:unNombre.	self netscreen:unJuego netscreen.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="nombre:juego:">nombre:unNombre juego:unJuego	| p |	p := Personaje new.	self nombre:unNombre.	self netscreen:unJuego netscreen.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="nombre:juego:">nombre:unNombre juego:unJuego	| p |	p := Personaje new.	p nombre:unNombre.	p netscreen:unJuego netscreen.		^p.</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="de:enviaMsg:a:">de:unEmisor enviaMsg:unMsg a:unReceptor	(personajes at:unEmisor) enviarMsg:unMsg a:unReceptor</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="de:enviaMsg:a:">de:unEmisor enviaMsg:unMsg a:unReceptor	(personajes at:unEmisor) recibir:unMsg de:unReceptor</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="de:enviaMsg:a:">de:unEmisor enviaMsg:unMsg a:unReceptor	(personajes at:unEmisor) recibeMsg:unMsg de:unReceptor</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.</do-it><methods><class-id>Personaje class</class-id> <category>instance creation</category><body package="Laberinto" selector="nombre:juego:">nombre:unNombre juego:unJuego	| p |	p := Personaje new.	p nombre:unNombre.	p netscreen:unJuego netscreen.		^p.</body></methods><remove-selector><class-id>Personaje</class-id> <selector>nombre:juego:</selector></remove-selector><do-it>user1:=Personaje nombre:'Pepe' juego:juego.</do-it><do-it>user1:=Personaje nombre:'Pepe' juego:juego.</do-it><do-it>juego agregarPersonaje:user1.</do-it><do-it>user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.</do-it><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="de:enviaMsg:a:">de:unEmisor enviaMsg:unMsg a:unReceptor	| receptor |	receptor:= personajes at:unReceptor.		(personajes at:unEmisor) recibeMsg:unMsg de:unReceptor</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="de:enviaMsg:a:">de:unEmisor enviaMsg:unMsg a:unReceptor	| receptor |	receptor:= personajes at:unReceptor.	receptor isNil	ifFalse:[(personajes at:unEmisor) recibeMsg:unMsg de:unReceptor].</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="de:enviaMsg:a:">de:unEmisor enviaMsg:unMsg a:unReceptor	| receptor |	receptor:= personajes at:unReceptor.	receptor isNil	ifFalse:[receptor recibeMsg:unMsg de:unEmisor].</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.</do-it><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarPersonaje:">agregarPersonaje:unPersonaje		</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarPersonaje:">agregarPersonaje:unPersonaje	personajes at:unPersonaje nombre put:unPersonaje.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarPersonaje:">agregarPersonaje:unPersonaje	personajes add:unPersonaje.	netscreen agregarPersonaje:unPersonaje.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unPersonaje	</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unPersonaje	| numHab |	numHab := self niveles at:1 habitaciones size.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unPersonaje	| numHab |	numHab := self niveles at:1 habitaciones size.	self getHabId:(((Random new next) * numHab) truncated + 1) nivel: 1.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unPersonaje	| numHab hab |	numHab := self niveles at:1 habitaciones size.	hab:= self getHabId:(((Random new next) * numHab) truncated + 1) nivel: 1.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unPersonaje	| numHab hab |	numHab := self niveles at:1 habitaciones size.	hab:= self getHabId:(((Random new next) * numHab) truncated + 1) nivel: 1.		unPersonaje asignarHabitacion:hab.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unaHab	self posicion: unaHab.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarPersonaje:">agregarPersonaje:unPersonaje	self asignarHabitacion:unPersonaje.	netscreen agregarPersonaje:unPersonaje.</body></methods><remove-selector><class-id>JuegoLaberinto</class-id> <selector>personajes:</selector></remove-selector><remove-selector><class-id>JuegoLaberinto</class-id> <selector>personajes</selector></remove-selector><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	niveles := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>niveles netscreen </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unPersonaje	| numHab hab |	numHab := (self niveles at:1) habitaciones size.	hab:= self getHabId:(((Random new next) * numHab) truncated + 1) nivel: 1.		unPersonaje asignarHabitacion:hab.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.</do-it><methods><class-id>Personaje class</class-id> <category>instance creation</category><body package="Laberinto" selector="nombre:juego:">nombre:unNombre juego:unJuego	| p |	p := Personaje new.	p nombre:unNombre.	p juego:unJuego.	p netscreen:unJuego netscreen.		^p.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosEO-2hab.txt'.juego:= JuegoLaberinto new.</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulos' put:LaberintoTriangularBuilder new.	catalogo at:'hexagonos' put:LaberintoHexagonalBuilder new.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>numHabNS</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>numHabNS</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabEO </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabEO:= (linea copyFrom: 6 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabNS">numHabNS	^numHabHexNS</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabNS:">numHabNS: anObject	numHabHexNS := anObject</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>numHabEO</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>numHabEO</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 6 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabEO:">numHabEO: anObject	numHabHexEO := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numHabEO">numHabEO	^numHabHexEO</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].	^builder obtenerLaberinto.</body></methods><methods><class-id>LaberintoHexagonalBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionNS:">construirHabitacionNS:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Hexagono new.	hab forma norte:Pared new.	hab forma noreste:Pared new.	hab forma sureste:Pared new.	hab forma sur:Pared new.	hab forma suroeste:Pared new.	hab forma noroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriNorEste default;add:OriSurEste default;add:OriSur default;add:OriSurOeste default;add:OriNorOeste default.	laberinto habitaciones add:hab.</body></methods><remove-selector><class-id>LaberintoHexagonalBuilder</class-id> <selector>construirHabitacion:</selector></remove-selector><methods><class-id>LaberintoHexagonalBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionEO:">construirHabitacionEO:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Hexagono new.	hab forma este:Pared new.	hab forma noreste:Pared new.	hab forma sureste:Pared new.	hab forma oeste:Pared new.	hab forma suroeste:Pared new.	hab forma noroeste:Pared new.	hab orientaciones add:OriEste default;add:OriNorEste default;add:OriSurOeste default;add:OriSur default;add:OriSurOeste default;add:OriNorOeste default.	laberinto habitaciones add:hab.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionNS:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionEO:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].	^builder obtenerLaberinto.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-triangulosNS-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	numHabHexNS:=0.	numHabHexEO:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		].	stream close.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay">quienMasHay</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay">quienMasHay	netscreen quienMasHay.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay">quienMasHay	^netscreen quienMasHay.</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay">quienMasHay	</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay">quienMasHay	| lista |	lista :=List new.</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay">quienMasHay	| lista |	lista :=List new.		lista keysDo: [:a | Transcript show: a printString; cr].</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay">quienMasHay	^personajes select: [:each | each ~= 'h']</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay:">quienMasHay:unNombre	^personajes select: [:each | each ~= 'h']</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay:">quienMasHay:unNombre	^personajes select: [:each | each nombre ~= 'h']</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay">quienMasHay	^netscreen quienMasHay:self nombre.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.user1 quienMasHay.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.user1 quienMasHay.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.a:= user1 quienMasHay.</do-it><remove-selector><class-id>NetScreen</class-id> <selector>quienMasHay</selector></remove-selector><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="quienMasHay:">quienMasHay:unNombre	^personajes select: [:each | each nombre ~= unNombre]</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.a:= user1 quienMasHay.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.user1 quienMasHay.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 25, 2015' '8:17:18 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:17:18 on 25 de marzo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 25, 2015' '8:17:23 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:17:23 on 25 de marzo de 2015."</do-it><methods><class-id>LaberintoHexagonalBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionEO:">construirHabitacionEO:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Hexagono new.	hab forma este:Pared new.	hab forma noreste:Pared new.	hab forma sureste:Pared new.	hab forma oeste:Pared new.	hab forma suroeste:Pared new.	hab forma noroeste:Pared new.	hab orientaciones add:OriEste default;add:OriNorEste default;add:OriSurEste default;add:OriOeste default;add:OriSurOeste default;add:OriNorOeste default.	laberinto habitaciones add:hab.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarCatalogo">iniciarCatalogo	catalogo at:'norte' put:OriNorte default.	catalogo at:'sur' put:OriSur default.	catalogo at:'este' put:OriEste default.	catalogo at:'oeste' put:OriOeste default.	catalogo at:'noreste' put:OriNorEste default.	catalogo at:'noroeste' put:OriNorOeste default.	catalogo at:'sureste' put:OriSurEste default.	catalogo at:'suroeste' put:OriSurOeste default.	catalogo at:'rectangulos' put:LaberintoRectangularBuilder new.	catalogo at:'triangulos' put:LaberintoTriangularBuilder new.	catalogo at:'hexagonos' put:LaberintoHexagonalBuilder new.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.juego crearNetScreen.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user2:=Personaje nombre:'Juan' juego:juego.juego agregarPersonaje:user2.user3:=Personaje nombre:'Antonio' juego:juego.juego agregarPersonaje:user3.user1 enviarMsg:'hola' a:'Juan'.user2 enviarMsg:'hola' a:'Pepe'.user1 quienMasHay.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><methods><class-id>OriNorEste</class-id> <category>operaciones</category><body package="Laberinto" selector="poner:en:">poner:unaSuperficie en:unaForma	unaForma noreste:unaSuperficie.</body></methods><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>conf:= ParserConfig new.conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.juego:= JuegoLaberinto new.juego agregarNivel:conf construirLaberinto.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 26, 2015' '4:41:22 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 16:41:22 on 26 de marzo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 26, 2015' '4:41:25 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 16:41:25 on 26 de marzo de 2015."</do-it><class><name>Laberinto4HexagonosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>Laberinto4RectangulosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><methods><class-id>Laberinto4HexagonosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FormaHexagono</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FormaHexagono</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="testHabEsHexagonal">testHabEsHexagonal	| lab |	lab:=juego niveles at:1.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagono]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>JuegoFactoryMethod</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>JuegoFactoryMethod</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaLenovo</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTiene4Habitaciones">testLaberintoTiene4Habitaciones	| lab |	lab:=juego niveles at:1.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego niveles at:1.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene1Nivel">testJuegoTiene1Nivel	self assert:(juego niveles size =1)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1 nivel:1.	hab2:=juego obtenerHabitacion:2 nivel:1.		hab3:=juego obtenerHabitacion:3 nivel:1.		hab4:=juego obtenerHabitacion:4 nivel:1.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).	self assert:(hab3 forma noreste class = Puerta).		self assert:(hab3 forma suroeste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	juego := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Laberinto4RectangulosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaLenovo.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTiene4Habitaciones">testLaberintoTiene4Habitaciones	| lab |	lab:=juego niveles at:1.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego niveles at:1.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego niveles at:1.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testHabEsRectangular">testHabEsRectangular	| lab |	lab:=juego niveles at:1.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene1Nivel">testJuegoTiene1Nivel	self assert:(juego niveles size =1)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1 nivel:1.	hab2:=juego obtenerHabitacion:2 nivel:1.		hab3:=juego obtenerHabitacion:3 nivel:1.		hab4:=juego obtenerHabitacion:4 nivel:1.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaLenovo</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego getHabId:1 nivel:1.	hab2:=juego getHabId:2 nivel:1.		hab3:=juego getHabId:3 nivel:1.		hab4:=juego getHabId:4 nivel:1.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).	self assert:(hab3 forma noreste class = Puerta).		self assert:(hab3 forma suroeste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaLenovo</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaLenovo</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| conf |	conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.	juego:= JuegoLaberinto new.	juego agregarNivel:conf construirLaberinto.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego getHabId:1 nivel:1.	hab2:=juego getHabId:2 nivel:1.		hab3:=juego getHabId:3 nivel:1.		hab4:=juego getHabId:4 nivel:1.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		| conf |	conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'.	juego:= JuegoLaberinto new.	juego agregarNivel:conf construirLaberinto.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testHabEsRectangular">testHabEsRectangular	| lab |	lab:=juego niveles at:1.	self assert:((lab habitaciones select:[:each | each forma class = Rectangulo]) size =lab habitaciones size)</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 26, 2015' '4:54:30 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 16:54:30 on 26 de marzo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 26, 2015' '4:54:34 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 16:54:34 on 26 de marzo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 26, 2015' '5:00:27 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:00:27 on 26 de marzo de 2015."</do-it><component-created><name>JuegoLaberinto-FM</name> <type>package</type></component-created><component-property><name>JuegoLaberinto-FM</name> <type>package</type><property>comment</property> <value>'Crea laberintos'</value></component-property><class><name>JuegoFactoryMethod</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juegoLaberinto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>JuegoLaberinto-FM</package></attributes></class><methods><class-id>JuegoFactoryMethod</class-id> <category>accessing</category><body package="JuegoLaberinto-FM" selector="juegoLaberinto">juegoLaberinto	^juegoLaberinto</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>accessing</category><body package="JuegoLaberinto-FM" selector="juegoLaberinto:">juegoLaberinto: anObject	juegoLaberinto := anObject</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>initialize-release</category><body package="JuegoLaberinto-FM" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	juegoLaberinto := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>JuegoFactoryMethod class</class-id> <category>instance creation</category><body package="JuegoLaberinto-FM" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><do-it>JuegoFactoryMethod organization addCategory: #operaciones</do-it><comment><class-id>JuegoFactoryMethod</class-id><body>JuegoFactoryMethod crea laberintos.Instance Variables:	juegoLaberinto	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of juegoLaberinto</body></comment><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarParser">fabricarParser</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBicho">fabricarBicho	^Bicho new.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	^Bicho new.</body></methods><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>niveles netscreen bichos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="bichos">bichos	^bichos</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="bichos:">bichos: anObject	bichos := anObject</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarNetScreen">fabricarNetScreen</body></methods><remove-selector><class-id>JuegoFactoryMethod</class-id> <selector>fabricarParser</selector></remove-selector><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarLaberintoParser">fabricarLaberintoParser</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarNetScreen">fabricarNetScreen	^NetScreen new.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	| bicho |	bicho:=self fabricarBicho.	</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	| bicho |	bicho:=self fabricarBicho.	bicho </body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarLaberintoParser:">fabricarLaberintoParser:unaRuta	| conf |	conf:= ParserConfig new.	conf procesarConfig:unaRuta.	self juegoLaberinto: JuegoLaberinto new.	self juegoLaberinto agregarNivel:conf construirLaberinto.</body></methods><remove-selector><class-id>JuegoFactoryMethod</class-id> <selector>fabricarLaberintoParser</selector></remove-selector><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarJuego">fabricarJuego	^JuegoLaberinto new.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	self juegoLaberinto:self fabricarJuego.	self fabricarLaberintoParser:unaRuta</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	self juegoLaberinto:self fabricarJuego.	self fabricarLaberintoParser:unaRuta.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarLaberintoParser:">fabricarLaberintoParser:unaRuta	| conf |	conf:= ParserConfig new.	conf procesarConfig:unaRuta.	self juegoLaberinto agregarNivel:conf construirLaberinto.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	self juegoLaberinto:self fabricarJuego.	self fabricarLaberintoParser:unaRuta.	self juegoLaberinto netscreen:self fabricarNetScreen.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	self juegoLaberinto:self fabricarJuego.	self fabricarLaberintoParser:unaRuta.	self juegoLaberinto netscreen:self fabricarNetScreen.	self juegoLaberinto bichos add:self fabricarBichoSentidoReloj.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unEnteAutonomo	| numHab hab |	numHab := (self niveles at:1) habitaciones size.	hab:= self getHabId:(((Random new next) * numHab) truncated + 1) nivel: 1.		unEnteAutonomo asignarHabitacion:hab.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	self juegoLaberinto:self fabricarJuego.	self juegoLaberinto netscreen:self fabricarNetScreen.		self fabricarLaberintoParser:unaRuta.		self juegoLaberinto bichos add:self fabricarBichoSentidoReloj.</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unEnteAutonomo	| hab |	hab:= self getHabId:(((Random new next) * (habitaciones size)) truncated + 1).		unEnteAutonomo asignarHabitacion:hab.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unEnteAutonomo	| laberinto |	laberinto := niveles at:(((Random new next) * (niveles size)) truncated + 1).	laberinto asignarHabitacion:unEnteAutonomo.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getLaberinto:">getLaberinto:unId	| laberinto |	laberinto := niveles at:(((Random new next) * (niveles size)) truncated + 1).</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getLaberinto:">getLaberinto:unId	^niveles at:unId.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unEnteAutonomo	| laberinto |	laberinto := self getLaberinto:(((Random new next) * (niveles size)) truncated + 1).	laberinto asignarHabitacion:unEnteAutonomo.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf |	self juegoLaberinto:self fabricarJuego.	self juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	self juegoLaberinto agregarNivel:conf construirLaberinto.	self fabricarLaberintoParser:unaRuta.		self juegoLaberinto bichos add:self fabricarBichoSentidoReloj.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf |	self juegoLaberinto:self fabricarJuego.	self juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	self juegoLaberinto agregarNivel:conf construirLaberinto.		self juegoLaberinto bichos add:self fabricarBichoSentidoReloj.</body></methods><remove-selector><class-id>JuegoFactoryMethod</class-id> <selector>fabricarLaberintoParser:</selector></remove-selector><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	| bicho |	bicho:=self fabricarBicho.	bicho nombre:'1'.	bicho estrategia:SentidoHorario new.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	| bicho |	bicho:=self fabricarBicho.	bicho nombre:'1'.	bicho estrategia:SentidoHorario new.	^bicho.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf bicho |	self juegoLaberinto:self fabricarJuego.	self juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	self juegoLaberinto agregarNivel:conf construirLaberinto.		bicho:=self fabricarBichoSentidoReloj.	self juegoLaberinto asignarHabitacion:bicho.	self juegoLaberinto bichos add:bicho.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto agregarNivel:conf construirLaberinto.		bicho:=self fabricarBichoSentidoReloj.	juegoLaberinto asignarHabitacion:bicho.	juegoLaberinto bichos add:bicho.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unaHab	self posicion: unaHab.</body></methods><remove-selector><class-id>Personaje</class-id> <selector>asignarHabitacion:</selector></remove-selector><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	niveles := List new.	bichos := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta</do-it><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto agregarNivel:conf construirLaberinto.		bicho:=self fabricarBichoSentidoReloj.	juegoLaberinto asignarHabitacion:bicho.	juegoLaberinto bichos add:bicho.		^juegoLaberinto.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta</do-it><do-it>user1:=Personaje nombre:'Pepe' juego:juego.</do-it><do-it>juego agregarPersonaje:user1.</do-it><do-it>user1 posicion id.</do-it><do-it>user1 posicion id.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id. </do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id. </do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id. </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 26, 2015' '6:48:02 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:48:02 on 26 de marzo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'March 26, 2015' '6:48:08 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:48:08 on 26 de marzo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 8, 2015' '7:08:47 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 19:08:47 on 8 de abril de 2015."</do-it><component-created><name>SolucionLaberinto</name> <type>bundle</type></component-created><bundle-structure><name>SolucionLaberinto</name> <structure>#(#(#package 'Laberinto') #(#package 'LaberintoBuilder') #(#package 'IteradorHabitaciones') #(#package 'JuegoLaberinto-FM'))</structure></bundle-structure><component-created><name>LaberintoGUI</name> <type>package</type></component-created><bundle-structure><name>SolucionLaberinto</name> <structure>#(#(#package 'Laberinto') #(#package 'LaberintoBuilder') #(#package 'IteradorHabitaciones') #(#package 'JuegoLaberinto-FM') #(#package 'LaberintoGUI'))</structure></bundle-structure><bundle-structure><name>SolucionLaberinto</name> <structure>#(#(#package 'Laberinto') #(#package 'LaberintoBuilder') #(#package 'IteradorHabitaciones') #(#package 'JuegoLaberinto-FM') #(#package 'LaberintoGUI'))</structure></bundle-structure><class><name>LaberintoGUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><methods><class-id>LaberintoGUI class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'LaberintoGUI' 			#bounds: #(#{Graphics.Rectangle} 1011 469 1548 717 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 164 0 51 0 373 0 72 0 ) 					#name: #ActionButton1 					#model: #cargarArchivo 					#label: 'Elegir archivo de configuración' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 155 0 104 0 ) 					#name: #Label1 					#label: 'Archivo:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 214 0 105 0 373 0 126 0 ) 					#name: #InputField1 					#model: #nombreArchivo ) ) ) )</body></methods><class><name>LaberintoGUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nombreArchivo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #LaberintoGUI	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: ' nombreArchivo '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>LaberintoGUI</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreArchivo">nombreArchivo	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreArchivo isNil		ifTrue:			[nombreArchivo := String new asValue]		ifFalse:			[nombreArchivo]</body></methods><class><name>LaberintoGUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nombreArchivo archivo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>LaberintoGUI addInstVarName: 'archivo'</do-it><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	self inicioParser.</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	"self inicioParser."</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	self inicioParser.</body></methods><class><name>LaberintoGUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nombreArchivo archivo juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>LaberintoGUI addInstVarName: 'juego'</do-it><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="crearJuego">crearJuego	juego:=JuegoFactoryMethod new crearJuego:(self archivo)</body></methods><methods><class-id>LaberintoGUI</class-id> <category>accessing</category><body package="LaberintoGUI" selector="juego">juego	^juego</body></methods><methods><class-id>LaberintoGUI</class-id> <category>accessing</category><body package="LaberintoGUI" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="crearJuego">crearJuego	self juego:JuegoFactoryMethod new crearJuego:(self archivo)</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="crearJuego">crearJuego	self juego:(JuegoFactoryMethod new crearJuego:(self archivo))</body></methods><methods><class-id>LaberintoGUI</class-id> <category>accessing</category><body package="LaberintoGUI" selector="archivo">archivo	^archivo</body></methods><methods><class-id>LaberintoGUI</class-id> <category>accessing</category><body package="LaberintoGUI" selector="archivo:">archivo: anObject	archivo := anObject</body></methods><do-it>labView:=LaberintoGUI new.labView open.</do-it><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	self crearJuego.</body></methods><do-it>labView:=LaberintoGUI new.labView open.</do-it><do-it>labView:=LaberintoGUI new.labView open.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 8, 2015' '8:14:34 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:14:34 on 8 de abril de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 8, 2015' '8:14:38 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:14:38 on 8 de abril de 2015."</do-it><class><name>InfoLaberinto</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#bounds: #(#{Graphics.Rectangle} 1068 459 1694 707 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 295 0 46 0 438 0 195 0 ) 					#name: #List1 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 294 0 17 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 458 0 50 0 558 0 71 0 ) 					#name: #InputField5 					#model: #'usuarioHolder posicion id' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 458 0 21 0 ) 					#name: #Label6 					#label: 'Posición' ) ) ) )</body></methods><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#bounds: #(#{Graphics.Rectangle} 1068 459 1694 707 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 295 0 46 0 438 0 195 0 ) 					#name: #List1 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #mostrarPosicion ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 294 0 17 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 458 0 50 0 558 0 71 0 ) 					#name: #InputField5 					#model: #'usuarioHolder posicion id' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 458 0 21 0 ) 					#name: #Label6 					#label: 'Posición' ) ) ) )</body></methods><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#bounds: #(#{Graphics.Rectangle} 1068 459 1694 707 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 295 0 46 0 438 0 195 0 ) 					#name: #List1 					#model: #listaUsuarios 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #mostrarPosicion ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 294 0 17 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 458 0 50 0 558 0 71 0 ) 					#name: #InputField5 					#model: #'usuarioHolder posicion id' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 458 0 21 0 ) 					#name: #Label6 					#label: 'Posición' ) ) ) )</body></methods><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#bounds: #(#{Graphics.Rectangle} 1068 459 1694 707 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 295 0 46 0 438 0 195 0 ) 					#name: #List1 					#model: #listaUsuarios 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #mostrarPosicion ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 294 0 17 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 458 0 50 0 558 0 71 0 ) 					#name: #InputField5 					#model: #'usuarioHolder posicion id' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 458 0 21 0 ) 					#name: #Label6 					#label: 'Posición' ) ) ) )</body></methods><class><name>InfoLaberinto</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #InfoLaberinto	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: ' numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroUsuarios">numeroUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroUsuarios isNil		ifTrue:			[numeroUsuarios := 0 asValue]		ifFalse:			[numeroUsuarios]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numBichos">numBichos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numBichos isNil		ifTrue:			[numBichos := String new asValue]		ifFalse:			[numBichos]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="usuarioHolder">usuarioHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^usuarioHolder isNil		ifTrue:			[usuarioHolder := nil asValue]		ifFalse:			[usuarioHolder]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numHab">numHab	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numHab isNil		ifTrue:			[numHab := String new asValue]		ifFalse:			[numHab]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="niveles">niveles	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^niveles isNil		ifTrue:			[niveles := String new asValue]		ifFalse:			[niveles]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaUsuarios">listaUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaUsuarios isNil		ifTrue:			[listaUsuarios := SelectionInList new]		ifFalse:			[listaUsuarios]</body></methods><class><name>LaberintoGUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nombreArchivo archivo juego infoJuego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><methods><class-id>LaberintoGUI</class-id> <category>accessing</category><body package="LaberintoGUI" selector="infoJuego">infoJuego	^infoJuego</body></methods><methods><class-id>LaberintoGUI</class-id> <category>accessing</category><body package="LaberintoGUI" selector="infoJuego:">infoJuego: anObject	infoJuego := anObject</body></methods><do-it>LaberintoGUI organization addCategory: #'initialize-release'</do-it><methods><class-id>LaberintoGUI</class-id> <category>initialize-release</category><body package="LaberintoGUI" selector="initialize">initialize	archivo:=''.		infoJuego:=InfoLaberinto new.		^self.</body></methods><class><name>InfoLaberinto</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios modelo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><methods><class-id>InfoLaberinto</class-id> <category>accessing</category><body package="LaberintoGUI" selector="modelo">modelo	^modelo</body></methods><methods><class-id>InfoLaberinto</class-id> <category>accessing</category><body package="LaberintoGUI" selector="modelo:">modelo: anObject	modelo := anObject</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	self crearJuego.		self infoJuego: (self juego).</body></methods><do-it>InfoLaberinto organization addCategory: #operaciones</do-it><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="asignarModelo:">asignarModelo:unModelo	self modelo:unModelo.	self iniciarAspectos.</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	self crearJuego.		self infoJuego asignarModelo:(self juego).</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	niveles value:5.</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	niveles value:(modelo juego niveles size).</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	niveles value:(modelo juego niveles size).	numHab value:(modelo juego niveles size).	numBichos value:(modelo juego bichos size).	numeroUsuarios value:(modelo juego niveles size).</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	niveles value:(modelo juego niveles size).	numHab value:(modelo juego niveles size).	numBichos value:(modelo juego bichos size).	numeroUsuarios value:(modelo juego netscreen personajes size).</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	numBichos value:(modelo juego bichos size).	niveles := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroNiveles.	numHab := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroHabitaciones.		numeroUsuarios := (AspectAdaptor subject:self modelo netscreen sendsUpdates:true) forAspect:#numeroUsuarios.</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	numBichos value:(modelo juego bichos size).	niveles := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroNiveles.	numHab := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroHabitaciones.	numeroUsuarios := (AspectAdaptor subject:self modelo netscreen sendsUpdates:true) forAspect:#numeroUsuarios.		self listaUsuarios list:self modelo netscreen personajes.</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	self crearJuego.		self infoJuego asignarModelo:(self juego).		infoJuego open;mainWindow.</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	self crearJuego.		self infoJuego asignarModelo:(self juego).	infoJuego open;mainWindow.</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	numBichos value:(modelo bichos size).	niveles := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroNiveles.	numHab := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroHabitaciones.	numeroUsuarios := (AspectAdaptor subject:self modelo netscreen sendsUpdates:true) forAspect:#numeroUsuarios.		self listaUsuarios list:self modelo netscreen personajes.</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	self numBichos value:(modelo bichos size).	niveles := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroNiveles.	numHab := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroHabitaciones.	numeroUsuarios := (AspectAdaptor subject:self modelo netscreen sendsUpdates:true) forAspect:#numeroUsuarios.		self listaUsuarios list:self modelo netscreen personajes.</body></methods><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#bounds: #(#{Graphics.Rectangle} 1068 459 1694 707 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 295 0 46 0 438 0 195 0 ) 					#name: #List1 					#model: #listaUsuarios 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #mostrarPosicion ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 294 0 17 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 458 0 50 0 558 0 71 0 ) 					#name: #InputField5 					#model: #'usuarioHolder posicion id' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 458 0 21 0 ) 					#name: #Label6 					#label: 'Posición' ) ) ) )</body></methods><class><name>InfoLaberinto</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios modelo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #InfoLaberinto	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios modelo  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroUsuarios">numeroUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroUsuarios isNil		ifTrue:			[numeroUsuarios := 0 asValue]		ifFalse:			[numeroUsuarios]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numBichos">numBichos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numBichos isNil		ifTrue:			[numBichos := 0 asValue]		ifFalse:			[numBichos]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="usuarioHolder">usuarioHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^usuarioHolder isNil		ifTrue:			[usuarioHolder := nil asValue]		ifFalse:			[usuarioHolder]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numHab">numHab	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numHab isNil		ifTrue:			[numHab := 0 asValue]		ifFalse:			[numHab]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="niveles">niveles	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^niveles isNil		ifTrue:			[niveles := 0 asValue]		ifFalse:			[niveles]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaUsuarios">listaUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaUsuarios isNil		ifTrue:			[listaUsuarios := SelectionInList new]		ifFalse:			[listaUsuarios]</body></methods><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>niveles netscreen bichos numeroNiveles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="numeroNiveles">numeroNiveles	^numeroNiveles</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="numeroNiveles:">numeroNiveles: anObject	numeroNiveles := anObject</body></methods><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>niveles netscreen bichos numeroNiveles numeroHabitaciones </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="numeroHabitaciones">numeroHabitaciones	^numeroHabitaciones</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="numeroHabitaciones:">numeroHabitaciones: anObject	numeroHabitaciones := anObject</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="numeroNiveles:">numeroNiveles: anObject	numeroNiveles := anObject	self changed:#numeroNiveles.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="numeroNiveles:">numeroNiveles: anObject	numeroNiveles := anObject.	self changed:#numeroNiveles.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="numeroHabitaciones:">numeroHabitaciones: anObject	numeroHabitaciones := anObject.	self changed:#numeroHabitaciones.</body></methods><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id forma orientaciones numeroUsuarios </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="numeroUsuarios">numeroUsuarios	^numeroUsuarios</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="numeroUsuarios:">numeroUsuarios: anObject	numeroUsuarios := anObject</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="numeroUsuarios:">numeroUsuarios: anObject	numeroUsuarios := anObject.	self changed:#numeroUsuarios.</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarPersonaje:">agregarPersonaje:unPersonaje	personajes at:unPersonaje nombre put:unPersonaje.		self numeroUsuarios:self personajes size.</body></methods><class><name>NetScreen</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>personajes numeroUsuarios </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><remove-selector><class-id>Habitacion</class-id> <selector>numeroUsuarios</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>numeroUsuarios:</selector></remove-selector><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id forma orientaciones </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>NetScreen</class-id> <category>accessing</category><body package="Laberinto" selector="numeroUsuarios">numeroUsuarios	^numeroUsuarios</body></methods><methods><class-id>NetScreen</class-id> <category>accessing</category><body package="Laberinto" selector="numeroUsuarios:">numeroUsuarios: anObject	numeroUsuarios := anObject</body></methods><methods><class-id>NetScreen</class-id> <category>accessing</category><body package="Laberinto" selector="numeroUsuarios:">numeroUsuarios: anObject	numeroUsuarios := anObject.	self changed:#numeroUsuarios.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarNivel:">agregarNivel:unLaberinto	niveles add:unLaberinto.		self numeroNiveles:self niveles size.		^niveles size.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularHabitaciones">calcularHabitaciones		self numeroHabitaciones: numeroHabitaciones + 1.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularNumeroHabitaciones">calcularNumeroHabitaciones		self numeroHabitaciones: numeroHabitaciones + 1.</body></methods><remove-selector><class-id>JuegoLaberinto</class-id> <selector>calcularHabitaciones</selector></remove-selector><methods><class-id>NetScreen</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		"personajes:= Dictionary new."		personajes:=List new.		^self</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularNumeroHabitaciones">calcularNumeroHabitaciones	1 to: niveles size do: [:n | self numeroHabitaciones: numeroHabitaciones + n habitaciones size].	</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto agregarNivel:conf construirLaberinto.		juegoLaberinto calcularNumeroHabitaciones.		bicho:=self fabricarBichoSentidoReloj.	juegoLaberinto asignarHabitacion:bicho.	juegoLaberinto bichos add:bicho.		^juegoLaberinto.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularNumeroHabitaciones">calcularNumeroHabitaciones	1 to: niveles size do: [:n | self numeroHabitaciones: numeroHabitaciones + (n habitaciones) size].</body></methods><methods><class-id>LaberintoGUI class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'LaberintoGUI' 			#bounds: #(#{Graphics.Rectangle} 692 392 1229 640 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 164 0 51 0 373 0 72 0 ) 					#name: #ActionButton1 					#model: #cargarArchivo 					#label: 'Elegir archivo de configuración' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 155 0 104 0 ) 					#name: #Label1 					#label: 'Archivo:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 214 0 105 0 373 0 126 0 ) 					#name: #InputField1 					#model: #nombreArchivo ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 151 0 187 0 ) 					#name: #Label2 					#label: 'Jugador' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 211 0 190 0 369 0 211 0 ) 					#name: #InputField2 					#model: #nombreJugador ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 388 0 187 0 505 0 208 0 ) 					#name: #ActionButton2 					#model: #agregarJugador 					#label: 'Añadir Jugador' 					#defaultable: true ) ) ) )</body></methods><class><name>LaberintoGUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nombreArchivo archivo juego infoJuego nombreJugador </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #LaberintoGUI	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'nombreArchivo archivo juego infoJuego  nombreJugador '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="agregarJugador">agregarJugador	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>LaberintoGUI</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreArchivo">nombreArchivo	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreArchivo isNil		ifTrue:			[nombreArchivo := String new asValue]		ifFalse:			[nombreArchivo]</body></methods><methods><class-id>LaberintoGUI</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreJugador">nombreJugador	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreJugador isNil		ifTrue:			[nombreJugador := String new asValue]		ifFalse:			[nombreJugador]</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="agregarJugador">agregarJugador	((self nombreJugador value = '') or:(self juego inNil))	ifTrue:[Dialog warn: 'El juego no se ha creado o el nombre dle jugador está en blanco']	ifFalse:[self infoJuego agregarPersonaje:self nombreJugador value.]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="agregarPersonaje:">agregarPersonaje:aString	| user |	user:= Personaje nombre:aString juego: self modelo.	self modelo agregarPersonaje:user.</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="agregarPersonaje:">agregarPersonaje:aString	| user |	user:= Personaje nombre:aString juego:self modelo.	self modelo agregarPersonaje:user.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularNumeroHabitaciones">calcularNumeroHabitaciones	1 to: niveles size do: [:n | self numeroHabitaciones: numeroHabitaciones + ((niveles at:n) habitaciones) size].</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularNumeroHabitaciones">calcularNumeroHabitaciones	1 to: niveles size do: [:n | self numeroHabitaciones: self numeroHabitaciones + (niveles at:n) habitaciones size].</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularNumeroHabitaciones">calcularNumeroHabitaciones	| numHab |	numHab:=0.	1 to: niveles size do: [:n | numHab:= numHab + (niveles at:n) habitaciones size].	self numeroHabitaciones:numHab.</body></methods><methods><class-id>LaberintoGUI class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'LaberintoGUI' 			#bounds: #(#{Graphics.Rectangle} 692 392 1229 640 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 152 0 39 0 361 0 60 0 ) 					#name: #ActionButton1 					#model: #cargarArchivo 					#label: 'Elegir archivo de configuración' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 143 0 92 0 ) 					#name: #Label1 					#label: 'Archivo:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 93 0 361 0 114 0 ) 					#name: #InputField1 					#model: #nombreArchivo ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 139 0 193 0 ) 					#name: #Label2 					#label: 'Jugador' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 199 0 196 0 357 0 217 0 ) 					#name: #InputField2 					#model: #nombreJugador ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 376 0 193 0 493 0 214 0 ) 					#name: #ActionButton2 					#model: #agregarJugador 					#label: 'Añadir Jugador' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 200 0 145 0 352 0 166 0 ) 					#name: #ActionButton3 					#label: 'Mostrar información' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>LaberintoGUI class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'LaberintoGUI' 			#bounds: #(#{Graphics.Rectangle} 692 392 1229 640 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 152 0 39 0 361 0 60 0 ) 					#name: #ActionButton1 					#model: #cargarArchivo 					#label: 'Elegir archivo de configuración' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 143 0 92 0 ) 					#name: #Label1 					#label: 'Archivo:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 93 0 361 0 114 0 ) 					#name: #InputField1 					#model: #nombreArchivo ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 139 0 193 0 ) 					#name: #Label2 					#label: 'Jugador' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 199 0 196 0 357 0 217 0 ) 					#name: #InputField2 					#model: #nombreJugador ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 376 0 193 0 493 0 214 0 ) 					#name: #ActionButton2 					#model: #agregarJugador 					#label: 'Añadir Jugador' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 200 0 145 0 352 0 166 0 ) 					#name: #ActionButton3 					#model: #mostrarInfo 					#label: 'Mostrar información' 					#defaultable: true ) ) ) )</body></methods><class><name>LaberintoGUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nombreArchivo archivo juego infoJuego nombreJugador </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #LaberintoGUI	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'nombreArchivo archivo juego infoJuego nombreJugador  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="mostrarInfo">mostrarInfo	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>LaberintoGUI</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreJugador">nombreJugador	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreJugador isNil		ifTrue:			[nombreJugador := String new asValue]		ifFalse:			[nombreJugador]</body></methods><methods><class-id>LaberintoGUI</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreArchivo">nombreArchivo	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreArchivo isNil		ifTrue:			[nombreArchivo := String new asValue]		ifFalse:			[nombreArchivo]</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="mostrarInfo">mostrarInfo	infoJuego closeRequest.	infoJuego open;mainWindow.</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	self crearJuego.		self infoJuego asignarModelo:(self juego).</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="cargarArchivo">cargarArchivo	| dialog |	dialog:=OpenFileDialog new.	dialog		windowTitle:'Obtener archivo de configuración';		acceptButtonLabel:'Cargar';		addFileFilter:'Txt (*.txt)' pattern:'*.txt';		defaultFilename:''.		archivo:=dialog select.	archivo isNil	ifFalse:[ self nombreArchivo value:archivo tail ].	self crearJuego.		self infoJuego asignarModelo:(self juego).	infoJuego open;mainWindow.</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="agregarJugador">agregarJugador	((self nombreJugador value = '') or:(self juego isNil))	ifTrue:[Dialog warn: 'El juego no se ha creado o el nombre dle jugador está en blanco']	ifFalse:[self infoJuego agregarPersonaje:self nombreJugador value.]</body></methods><methods><class-id>NetScreen</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarPersonaje:">agregarPersonaje:unPersonaje	"personajes at:unPersonaje nombre put:unPersonaje."		personajes add:unPersonaje.		self numeroUsuarios:self personajes size.</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="mostrarPosicion">mostrarPosicion	| listaUsuario |	usuarioHolder value:listaUsuario selection.</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="mostrarPosicion">mostrarPosicion	usuarioHolder value:listaUsuarios selection.</body></methods><methods><class-id>Personaje</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream		aStream nextPutAll:nombre.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 9, 2015' '5:53:16 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:53:16 on 9 de abril de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 9, 2015' '6:00:47 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:00:47 on 9 de abril de 2015."</do-it><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>niveles netscreen bichos numeroNiveles numeroHabitaciones laberinto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberinto">laberinto	^laberinto</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="laberinto:">laberinto: anObject	laberinto := anObject</body></methods><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>niveles netscreen bichos numeroNiveles numeroHabitaciones laberinto prototipo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="prototipo">prototipo	^prototipo</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="prototipo:">prototipo: anObject	prototipo := anObject</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.		juegoLaberinto calcularNumeroHabitaciones.		bicho:=self fabricarBichoSentidoReloj.	juegoLaberinto asignarHabitacion:bicho.	juegoLaberinto bichos add:bicho.		^juegoLaberinto.</body></methods><methods><class-id>ProxyLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto	"| conf ind |		conf:= ParserConfig new.	conf procesarConfig:'C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'.		ind:= self juego agregarNivel:conf construirLaberinto.	self laberinto: ((self juego niveles) at:ind)."		self laberinto:self juego prototipo dcopy.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unEnteAutonomo	"| laberinto |	laberinto := self getLaberinto:(((Random new next) * (niveles size)) truncated + 1)."	laberinto asignarHabitacion:unEnteAutonomo.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'. </do-it><do-it>juego:= JuegoFactoryMethod new crearJuego:ruta.</do-it><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		bicho:=self fabricarBichoSentidoReloj.	juegoLaberinto asignarHabitacion:bicho.	juegoLaberinto bichos add:bicho.		^juegoLaberinto.</body></methods><remove-selector><class-id>JuegoLaberinto</class-id> <selector>agregarNivel:</selector></remove-selector><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularNumeroHabitaciones">calcularNumeroHabitaciones	"| numHab |	numHab:=0.	1 to: niveles size do: [:n | numHab:= numHab + (niveles at:n) habitaciones size].	self numeroHabitaciones:numHab."		self numeroHabitaciones:laberinto habitaciones size.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="getLaberinto:">getLaberinto:unId	^laberinto.</body></methods><remove-selector><class-id>JuegoLaberinto</class-id> <selector>getHabId:nivel:</selector></remove-selector><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	bichos := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><remove-selector><class-id>JuegoLaberinto</class-id> <selector>niveles:</selector></remove-selector><remove-selector><class-id>JuegoLaberinto</class-id> <selector>niveles</selector></remove-selector><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto 	| hab1 hab2 puerta |	hab1:=Habitacion new.	hab1 id:1.	hab2:=Habitacion new.	hab2 id:2.	puerta:=Puerta new.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:Pared new.	hab1 este:Pared new.	hab1 oeste:Pared new.	hab2 sur:puerta.	hab2 norte:Pared new.	hab2 este:Pared new.	hab2 oeste:Pared new.	laberinto:=Laberinto new.	laberinto addHab:hab1.	laberinto addHab:hab2.		^niveles</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto:">crearLaberinto:unFM	| hab1 hab2 puerta |	hab1:=unFM fabricarHabitacion.	hab1 id:1.	hab2:=unFM fabricarHabitacion.	hab2 id:2.	puerta:=unFM fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:unFM fabricarPared.	hab1 este:unFM fabricarPared.	hab1 oeste:unFM fabricarPared.	hab2 sur:puerta.	hab2 norte:unFM fabricarPared.	hab2 este:unFM fabricarPared.	hab2 oeste:unFM fabricarPared.	laberinto:=unFM fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^niveles</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto:">crearLaberinto:unFM	| hab1 hab2 puerta |	hab1:=unFM fabricarHabitacion.	hab1 id:1.	hab2:=unFM fabricarHabitacion.	hab2 id:2.	puerta:=unFM fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:unFM fabricarPared.	hab1 este:unFM fabricarPared.	hab1 oeste:unFM fabricarPared.	hab2 sur:puerta.	hab2 norte:unFM fabricarPared.	hab2 este:unFM fabricarPared.	hab2 oeste:unFM fabricarPared.	laberinto:=unFM fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto">crearLaberinto 	| hab1 hab2 puerta |	hab1:=Habitacion new.	hab1 id:1.	hab2:=Habitacion new.	hab2 id:2.	puerta:=Puerta new.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:Pared new.	hab1 este:Pared new.	hab1 oeste:Pared new.	hab2 sur:puerta.	hab2 norte:Pared new.	hab2 este:Pared new.	hab2 oeste:Pared new.	laberinto:=Laberinto new.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="crearLaberinto:">crearLaberinto:unFM	| hab1 hab2 puerta |	hab1:=unFM fabricarHabitacion.	hab1 id:1.	hab2:=unFM fabricarHabitacion.	hab2 id:2.	puerta:=unFM fabricarPuerta.	puerta h1: hab1.	puerta h2: hab2.	hab1 norte:puerta.	hab1 sur:unFM fabricarPared.	hab1 este:unFM fabricarPared.	hab1 oeste:unFM fabricarPared.	hab2 sur:puerta.	hab2 norte:unFM fabricarPared.	hab2 este:unFM fabricarPared.	hab2 oeste:unFM fabricarPared.	laberinto:=unFM fabricarLaberinto.	laberinto addHab:hab1.	laberinto addHab:hab2.		^laberinto.</body></methods><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>netscreen bichos numeroNiveles numeroHabitaciones laberinto prototipo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.</do-it><do-it>user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.</do-it><do-it>user1 posicion id.  </do-it><do-it>((juego laberinto getHabId:1) hijos at:1) entrar:user1.</do-it><bundle-structure><name>SolucionLaberinto</name> <structure>#(#(#package 'Laberinto') #(#package 'LaberintoBuilder') #(#package 'IteradorHabitaciones') #(#package 'JuegoLaberinto-FM') #(#package 'LaberintoGUI'))</structure></bundle-structure><bundle-structure><name>SolucionLaberinto</name> <structure>#(#(#package 'Laberinto') #(#package 'LaberintoBuilder') #(#package 'IteradorHabitaciones') #(#package 'JuegoLaberinto-FM') #(#package 'LaberintoGUI'))</structure></bundle-structure><bundle-structure><name>SolucionLaberinto</name> <structure>#(#(#package 'Laberinto') #(#package 'LaberintoBuilder') #(#package 'IteradorHabitaciones') #(#package 'JuegoLaberinto-FM') #(#package 'LaberintoGUI') #(#package 'LaberintoTest'))</structure></bundle-structure><class><name>Laberinto4HexagonosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>JuegoLaberintoTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>Laberinto4RectangulosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><methods><class-id>Laberinto4RectangulosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaLenovo.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4HexagonosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).	self assert:(hab3 forma noreste class = Puerta).		self assert:(hab3 forma suroeste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FormaHexagonoNS</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FormaHexagonoNS</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	juego := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = Rectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego laberinto getHabId:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><remove-selector><class-id>Laberinto4RectangulosTest</class-id> <selector>testHabEsRectangular</selector></remove-selector><remove-selector><class-id>Laberinto4RectangulosTest</class-id> <selector>testJuegoTiene1Nivel</selector></remove-selector><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTiene4Habitaciones">testLaberintoTiene4Habitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><remove-selector><class-id>Laberinto4RectangulosTest</class-id> <selector>testLaberintoTiene4Habitaciones</selector></remove-selector><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego laberinto getHabId:1.	hab2:=juego laberinto getHabId:2.		hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaPc |	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	'C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaPc |	'C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaPc |	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaPc |	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = Hexagono]) size =lab habitaciones size)</body></methods><remove-selector><class-id>Laberinto4HexagonosTest</class-id> <selector>testJuegoTiene1Nivel</selector></remove-selector><remove-selector><class-id>Laberinto4HexagonosTest</class-id> <selector>testLaberintoTiene4Habitaciones</selector></remove-selector><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego laberinto getHabId:1.	hab2:=juego laberinto getHabId:2.		hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).	self assert:(hab3 forma noreste class = Puerta).		self assert:(hab3 forma suroeste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		| rutaPc |	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-hexagonosNS-4hab.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		| rutaPc |	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><class><name>ElementoMapa</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>comandos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ElementoMapa</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		comandos:=List new.		^self</body></methods><class><name>Comando</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>receptor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Comando</class-id> <category>accessing</category><body package="Laberinto" selector="receptor">receptor	^receptor</body></methods><methods><class-id>Comando</class-id> <category>accessing</category><body package="Laberinto" selector="receptor:">receptor: anObject	receptor := anObject</body></methods><methods><class-id>Comando</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	receptor := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Comando class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>ComandoAbrir</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoAbrir</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>ComandoCoger</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoCoger</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>ComandoMover</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars>direccion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoMover</class-id> <category>accessing</category><body package="Laberinto" selector="direccion">direccion	^direccion</body></methods><methods><class-id>ComandoMover</class-id> <category>accessing</category><body package="Laberinto" selector="direccion:">direccion: anObject	direccion := anObject</body></methods><methods><class-id>ComandoMover</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	direccion := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>Comando</class-id><body>Comando representa los comandos que permite un determinado elemento mapa.Instance Variables:	receptor	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of receptor</body></comment><comment><class-id>ComandoAbrir</class-id><body>ComandoAbrir .</body></comment><comment><class-id>ComandoCoger</class-id><body>ComandoCoger .</body></comment><comment><class-id>ComandoMover</class-id><body>ComandoMover para movernos hacia una dirección.Instance Variables:	direccion	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of direccion</body></comment><do-it>Comando organization addCategory: #operaciones</do-it><methods><class-id>Comando</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje</body></methods><do-it>ComandoMover organization addCategory: #operaciones</do-it><methods><class-id>ComandoMover</class-id> <category>operaciones</category><body package="Laberinto" selector="irHacia:quien:">irHacia:unaOr quien:unPersonaje</body></methods><methods><class-id>ComandoMover</class-id> <category>operaciones</category><body package="Laberinto" selector="irHacia:quien:">irHacia:unaOr quien:unPersonaje	</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="irHacia:quien:">irHacia:unaOr quien:unPersonaje</body></methods><methods><class-id>Comando</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	self subclassResponsibility.</body></methods><do-it>ComandoAbrir organization addCategory: #operaciones</do-it><methods><class-id>ComandoAbrir</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor abrir:unPersonaje.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirPuertaDe:orientacion:a:orientacion:">construirPuertaDe:unaHab1 orientacion:or1 a:unaHab2 orientacion:or2	|puerta h1 h2|	puerta:= Puerta new.	h1:= laberinto getHabId:unaHab1.	h2:= laberinto getHabId:unaHab2.	puerta h1:h1.	puerta h2:h2.		puerta comandos add:(ComandoAbrir new receptor:puerta).		h1 ponerEn:or1 superficie:puerta.	h2 ponerEn:or2 superficie:puerta.</body></methods><methods><class-id>ElementoMapa</class-id> <category>accessing</category><body package="Laberinto" selector="comandos">comandos	^comandos</body></methods><methods><class-id>ElementoMapa</class-id> <category>accessing</category><body package="Laberinto" selector="comandos:">comandos: anObject	comandos := anObject</body></methods><class><name>Puerta</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 h2 abierta unPersonaje </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>Puerta addInstVarName: 'unPersonaje'</do-it><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	"self abierta	ifTrue:[		alguien posicion = h1		ifTrue:[			Transcript show:'Entro a la habitacion 2';cr.			h2 entrar:alguien.		]		ifFalse:[			Transcript show:'Entro a la habitacion 1';cr.			h1 entrar:alguien.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]."		self estado entrar:unPersonaje puerta:self.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	"self abierta	ifTrue:[		alguien posicion = h1		ifTrue:[			Transcript show:'Entro a la habitacion 2';cr.			h2 entrar:alguien.		]		ifFalse:[			Transcript show:'Entro a la habitacion 1';cr.			h1 entrar:alguien.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]."		self estado entrar:alguien puerta:self.</body></methods><class><name>Puerta</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 h2 abierta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Puerta</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 h2 abierta estado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="estado">estado	^estado</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="estado:">estado: anObject	estado := anObject</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="abrir:">abrir: alguien	"self abierta	ifTrue:[		alguien posicion = h1		ifTrue:[			Transcript show:'Entro a la habitacion 2';cr.			h2 entrar:alguien.		]		ifFalse:[			Transcript show:'Entro a la habitacion 1';cr.			h1 entrar:alguien.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr]."		self estado entrar:alguien puerta:self.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 15, 2015' '8:10:22 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:10:22 on 15 de abril de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 15, 2015' '8:10:27 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:10:27 on 15 de abril de 2015."</do-it><methods><class-id>ComandoMover</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor abrir:unPersonaje.</body></methods><methods><class-id>ComandoMover</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor irHacia:direccion quien:unPersonaje.</body></methods><remove-selector><class-id>ComandoMover</class-id> <selector>irHacia:quien:</selector></remove-selector><methods><class-id>ComandoMover</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	self receptor irHacia:direccion quien:unPersonaje.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="irHacia:quien:">irHacia:unaOr quien:unPersonaje	forma irHacia:unaOr quien:unPersonaje.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="irHacia:quien:">irHacia:unaOr quien:unPersonaje	unaOr ir:unPersonaje.</body></methods><methods><class-id>LaberintoRectangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacion:">construirHabitacion:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Rectangulo new.	hab forma norte:Pared new.	hab forma sur:Pared new.	hab forma este:Pared new.	hab forma oeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSur default;add:OriEste default;add:OriOeste default.		hab orientaciones do:[:each | hab comandos add:(ComandoMover new direccion:each;receptor:hab)].		laberinto habitaciones add:hab.</body></methods><do-it>labView:=LaberintoGUI new.labView open.</do-it><methods><class-id>LaberintoTriangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionE:">construirHabitacionE:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma este:Pared new.	hab forma noroeste:Pared new.	hab forma suroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriNorOeste default;add:OriSurOeste default.		hab orientaciones do:[:each | hab comandos add:(ComandoMover new direccion:each;receptor:hab)].		laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoTriangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionN:">construirHabitacionN:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma norte:Pared new.	hab forma sureste:Pared new.	hab forma suroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriSurEste default;add:OriSurOeste default.		hab orientaciones do:[:each | hab comandos add:(ComandoMover new direccion:each;receptor:hab)].		laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoTriangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionO:">construirHabitacionO:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma oeste:Pared new.	hab forma noreste:Pared new.	hab forma sureste:Pared new.	hab orientaciones add:OriNorte default;add:OriNorEste default;add:OriSurEste default.		hab orientaciones do:[:each | hab comandos add:(ComandoMover new direccion:each;receptor:hab)].		laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoTriangularBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionS:">construirHabitacionS:unId		| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Triangulo new.	hab forma sur:Pared new.	hab forma noreste:Pared new.	hab forma noroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriNorEste default;add:OriNorOeste default.		hab orientaciones do:[:each | hab comandos add:(ComandoMover new direccion:each;receptor:hab)].		laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoHexagonalBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionEO:">construirHabitacionEO:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Hexagono new.	hab forma este:Pared new.	hab forma noreste:Pared new.	hab forma sureste:Pared new.	hab forma oeste:Pared new.	hab forma suroeste:Pared new.	hab forma noroeste:Pared new.	hab orientaciones add:OriEste default;add:OriNorEste default;add:OriSurEste default;add:OriOeste default;add:OriSurOeste default;add:OriNorOeste default.	hab orientaciones do:[:each | hab comandos add:(ComandoMover new direccion:each;receptor:hab)].	laberinto habitaciones add:hab.</body></methods><methods><class-id>LaberintoHexagonalBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirHabitacionNS:">construirHabitacionNS:unId	| hab | 	hab:=Habitacion new.	hab id:unId.	hab forma:Hexagono new.	hab forma norte:Pared new.	hab forma noreste:Pared new.	hab forma sureste:Pared new.	hab forma sur:Pared new.	hab forma suroeste:Pared new.	hab forma noroeste:Pared new.	hab orientaciones add:OriNorte default;add:OriNorEste default;add:OriSurEste default;add:OriSur default;add:OriSurOeste default;add:OriNorOeste default.	hab orientaciones do:[:each | hab comandos add:(ComandoMover new direccion:each;receptor:hab)].	laberinto habitaciones add:hab.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		alguien posicion = h1		ifTrue:[			Transcript show:'Entro a la habitacion 2';cr.			h2 entrar:alguien.		]		ifFalse:[			Transcript show:'Entro a la habitacion 1';cr.			h1 entrar:alguien.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr].</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-hole.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.  </do-it><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlEste">irAlEste	posicion irAlEste:self.</body></methods><remove-selector><class-id>Bicho</class-id> <selector>irAlEste</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurOeste">irAlSurOeste	posicion irAlSurOeste:self.</body></methods><remove-selector><class-id>Bicho</class-id> <selector>irAlSurOeste</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSurEste">irAlSurEste	posicion irAlSurEste:self.</body></methods><remove-selector><class-id>Bicho</class-id> <selector>irAlSurEste</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlSur">irAlSur	posicion irAlSur:self.</body></methods><remove-selector><class-id>Bicho</class-id> <selector>irAlSur</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlOeste">irAlOeste	posicion irAlOeste:self.</body></methods><remove-selector><class-id>Bicho</class-id> <selector>irAlOeste</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorte">irAlNorte	posicion irAlNorte:self.</body></methods><remove-selector><class-id>Bicho</class-id> <selector>irAlNorte</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorOeste">irAlNorOeste	posicion irAlNorOeste:self.</body></methods><remove-selector><class-id>Bicho</class-id> <selector>irAlNorOeste</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="irAlNorEste">irAlNorEste	posicion irAlNorEste:self.</body></methods><remove-selector><class-id>Bicho</class-id> <selector>irAlNorEste</selector></remove-selector><do-it>((juego laberinto getHabId:1) comandos at:1) ejecutar:user1.</do-it><do-it>((juego laberinto getHabId:1) comandos at:1) ejecutar:user1.</do-it><do-it>((juego laberinto getHabId:1) comandos at:2) ejecutar:user1.</do-it><do-it>((juego laberinto getHabId:1) comandos at:3) ejecutar:user1.</do-it><do-it>((juego laberinto getHabId:1) comandos at:4) ejecutar:user1.</do-it><remove-selector><class-id>Bicho</class-id> <selector>camina</selector></remove-selector><do-it>Bicho organization removeCategory: #operaciones</do-it><do-it>Bicho organization addCategory: #operaciones</do-it><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="camina">camina		self estrategia camina:self.</body></methods><do-it>Llave organization addCategory: #operaciones</do-it><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	</body></methods><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |		</body></methods><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	</body></methods><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	coleccion addAll:self comandos.	self hijos do:[:each | coleccion addAll:each obtenerComandos].	^coleccion.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	coleccion addAll:self comandos.	coleccion addAll:self forma obtenerComandos.	self hijos do:[:each | coleccion addAll:each obtenerComandos].	^coleccion.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 16, 2015' '5:03:19 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:03:19 on 16 de abril de 2015."</do-it><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	subclassResponsibility.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	self subclassResponsibility.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion add:norte obtenerComandos.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion add:norte obtenerComandos.	^coleccion.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	coleccion add:norte obtenerComandos.	^coleccion.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	coleccion add:norte obtenerComandos.	coleccion add:sur obtenerComandos.	coleccion add:este obtenerComandos.	coleccion add:oeste obtenerComandos.	^coleccion.</body></methods><methods><class-id>Superficie</class-id> <category>operaciones</category><body package="Laberinto" selector="hijos">hijos	^List new.</body></methods><do-it>(juego laberinto getHabId:1) obtenerComandos.</do-it><do-it>(juego laberinto getHabId:1) obtenerComandos.</do-it><do-it>(juego laberinto getHabId:1) obtenerComandos.</do-it><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	coleccion add:self norte obtenerComandos.	coleccion add:self sur obtenerComandos.	coleccion add:self este obtenerComandos.	coleccion add:self oeste obtenerComandos.	^coleccion.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.  (juego laberinto getHabId:1) obtenerComandos.</do-it><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	coleccion addAll:self norte obtenerComandos.	coleccion addAll:self sur obtenerComandos.	coleccion addAll:self este obtenerComandos.	coleccion addAll:self oeste obtenerComandos.	^coleccion.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.  (juego laberinto getHabId:1) obtenerComandos. </do-it><methods><class-id>Triangulo</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	coleccion addAll:self norte obtenerComandos.	coleccion addAll:self sur obtenerComandos.	coleccion addAll:self este obtenerComandos.	coleccion addAll:self oeste obtenerComandos.	^coleccion.</body></methods><do-it>ComandoCoger organization addCategory: #operaciones</do-it><methods><class-id>ComandoCoger</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor coger:unPersonaje comando:self.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLlave">construirLlave	Llave new.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLlave:">construirLlave:unId	(laberinto getHabId:unId) add:Llave new.</body></methods><remove-selector><class-id>LaberintoBuilder</class-id> <selector>construirLlave</selector></remove-selector><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO llaveHab </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'llaveHab'</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [llaveHab:= (linea copyFrom: 7 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionNS:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionEO:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].		llaveHab isNil 	ifFalse: [builder construirLlave:llaveHab].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].		llaveHab isNil 	ifFalse: [builder construirLlave:llaveHab].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].				^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].		llaveHab isNil 	ifFalse: [builder construirLlave:llaveHab].		^builder obtenerLaberinto.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.</do-it><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLlave:">construirLlave:unId	| llave |	llave:= Llave new.	llave comandos add:(ComandoCoger new).	(laberinto getHabId:unId) add:llave.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLlave:">construirLlave:unId	| llave |	llave:= Llave new.	llave comandos add:(ComandoCoger new receptor llave).	(laberinto getHabId:unId) add:llave.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLlave:">construirLlave:unId	| llave |	llave:= Llave new.	llave comandos add:(ComandoCoger new receptor:llave).	(laberinto getHabId:unId) add:llave.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.</do-it><methods><class-id>Llave</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando	unPersonaje equipamiento add:self.	comandos remove:unComando ifAbsent:[0].</body></methods><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>netscreen bichos numeroNiveles numeroHabitaciones laberinto prototipo procBicho </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>JuegoLaberinto addInstVarName: 'procBicho'</do-it><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="lanzarBicho:">lanzarBicho:unNum	| proceso bicho |	bicho:=self bichos at:unNum.	proceso:=[[true] whileTrue:[bicho camina]] fork.	procBicho at:unNum put:proceso.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	bichos := List new.	procBicho := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	bichos := List new.	procBicho := Dictionary new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="terminarBicho:">terminarBicho:unNum	| proceso |	Transcript show:'Muere el bicho ',unNum printString;cr.	proceso:=[procBicho at:unNum ifAbsent:[nil]].	proceso isNil ifFalse:[proceso terminate].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 16, 2015' '6:13:24 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:13:24 on 16 de abril de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 16, 2015' '6:13:32 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:13:32 on 16 de abril de 2015."</do-it><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="lanzarBicho:">lanzarBicho:unNum	| proceso bicho |	bicho:=self bichos at:unNum.	bicho id:unNum.	proceso:=[[true] whileTrue:[bicho camina]] fork.	procBicho at:unNum put:proceso.</body></methods><class><name>Bicho</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>estrategia id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="id">id	^id</body></methods><methods><class-id>Bicho</class-id> <category>accessing</category><body package="Laberinto" selector="id:">id: anObject	id := anObject</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	orientacion:= self siguiente.		Transcript show: orientacion printString;cr.		orientacion ir:unBicho.		(Delay forSeconds:3) wait.		unBicho atacar.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>orden</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>orden</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Estrategia</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actual orientaciones </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="orden:">orden: anObject	orientaciones := anObject</body></methods><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="orden">orden	^orientaciones</body></methods><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="orientaciones">orientaciones	^orientaciones</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="siguiente">siguiente	self calcularSiguiente.		^self orientaciones at:actual.</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularSiguiente">calcularSiguiente	actual:= (actual\\(self orientaciones size)) + 1.</body></methods><methods><class-id>SentidoAntihorario</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularSiguiente">calcularSiguiente	actual:= (actual\\(self orientaciones size)) + 1.</body></methods><remove-selector><class-id>Estrategia</class-id> <selector>orden</selector></remove-selector><methods><class-id>Estrategia</class-id> <category>accessing</category><body package="Laberinto" selector="orientaciones:">orientaciones: anObject	orientaciones := anObject</body></methods><remove-selector><class-id>Estrategia</class-id> <selector>orden:</selector></remove-selector><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	self orientaciones:unBicho posicion orientaciones.		orientacion:= self siguiente.	"Transcript show: orientacion printString;cr."		orientacion ir:unBicho.		(Delay forSeconds:3) wait.		unBicho atacar.</body></methods><methods><class-id>SentidoAntihorario</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularSiguiente">calcularSiguiente	actual:= (actual\\(self orientaciones size)) + 1. "CORREGIR ESTO"</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.  </do-it><do-it>juego lanzarBicho:1.</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	self orientaciones:unBicho posicion orientaciones.		orientacion:= self siguiente.	"Transcript show: orientacion printString;cr."	Transcript show: 'Bicho en habitacion',unBicho posicion id printString;cr.		orientacion ir:unBicho.		(Delay forSeconds:3) wait.		"unBicho atacar."</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>juego lanzarBicho:1.</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	self orientaciones:unBicho posicion orientaciones.		orientacion:= self siguiente.	"Transcript show: orientacion printString;cr."	Transcript show: 'Bicho en habitacion ',unBicho posicion id printString;cr.		orientacion ir:unBicho.		(Delay forSeconds:3) wait.		"unBicho atacar."</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	| bicho |	bicho:=self fabricarBicho.	bicho id:'1'.	bicho estrategia:SentidoHorario new.	^bicho.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>juego lanzarBicho:1.</do-it><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="terminarBicho:">terminarBicho:unNum	| proceso |	proceso:=[procBicho at:unNum ifAbsent:[nil]].	proceso isNil ifFalse:[proceso terminate].	Transcript show:'Muere el bicho ',unNum printString;cr.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>juego lanzarBicho:1.</do-it><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="terminarBicho:">terminarBicho:unNum	| proceso |	proceso:=procBicho at:unNum ifAbsent:[nil].	proceso isNil ifFalse:[proceso terminate].	Transcript show:'Muere el bicho ',unNum printString;cr.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>juego lanzarBicho:1.</do-it><do-it>juego terminarBicho:1.</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	self orientaciones:unBicho posicion orientaciones.		orientacion:= self siguiente.	"Transcript show: orientacion printString;cr."	"Transcript show: 'Bicho en habitacion ',unBicho posicion id printString;cr."		orientacion ir:unBicho.		(Delay forSeconds:3) wait.		"unBicho atacar."</body></methods><class><name>EstadoPuerta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EstadoPuerta</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>EstadoPuerta class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>EstadoPuerta</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>EstadoPuerta</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>EstadoPuerta removeFromSystem</do-it><class><name>EstadoAbierta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EstadoAbierta</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>EstadoAbierta class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>EstadoCerrada</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EstadoCerrada</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>EstadoCerrada class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>EstadoAbierta</class-id><body>EstadoAbierta representa una puerta abierta.</body></comment><comment><class-id>EstadoCerrada</class-id><body>EstadoCerrada representa una puerta cerrada.</body></comment><methods><class-id>Puerta</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	h1 := nil.	h2 := nil.	estado := EstadoAbierta new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><remove-selector><class-id>Puerta</class-id> <selector>abierta:</selector></remove-selector><methods><class-id>ComandoAbrir</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor entrar:unPersonaje.</body></methods><do-it>EstadoAbierta organization addCategory: #operaciones</do-it><class><name>Puerta</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 h2 abierta estado nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirPuertaDe:orientacion:a:orientacion:">construirPuertaDe:unaHab1 orientacion:or1 a:unaHab2 orientacion:or2	|puerta h1 h2|	puerta:= Puerta new.	puerta nombre:'Puerta-',unaHab1 printString,'-',unaHab2 printString.	h1:= laberinto getHabId:unaHab1.	h2:= laberinto getHabId:unaHab2.	puerta h1:h1.	puerta h2:h2.		puerta comandos add:(ComandoAbrir new receptor:puerta).		h1 ponerEn:or1 superficie:puerta.	h2 ponerEn:or2 superficie:puerta.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	self abierta	ifTrue:[		alguien posicion = h1		ifTrue:[			Transcript show:'Entro a la habitacion 2';cr.			h2 entrar:alguien.		]		ifFalse:[			Transcript show:'Entro a la habitacion 1';cr.			h1 entrar:alguien.		]	]	ifFalse:[Transcript show:'La puerta está cerrada';cr].		self estado entrar:alguien puerta:self.</body></methods><methods><class-id>EstadoAbierta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:puerta:">entrar: alguien puerta:unaPuerta	unaPuerta puedeEntrar:alguien.</body></methods><do-it>EstadoCerrada organization addCategory: #operaciones</do-it><methods><class-id>EstadoCerrada</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:puerta:">entrar: alguien puerta:unaPuerta</body></methods><remove-selector><class-id>Puerta</class-id> <selector>abrir:</selector></remove-selector><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien		self estado entrar:alguien puerta:self.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="puedeEntrar:">puedeEntrar:alguien	| habEntrada habSalida |		alguien posicion = h1		ifTrue:[habEntrada:=self h2. habSalida:=self h1]		ifFalse:[habEntrada:=self h1. habSalida:=self h1]</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 22, 2015' '8:05:37 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:05:37 on 22 de abril de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 22, 2015' '8:05:40 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:05:40 on 22 de abril de 2015."</do-it><methods><class-id>SentidoAntihorario</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularSiguiente">calcularSiguiente	actual:= (actual-1)\\(self orientaciones size). "CORREGIR ESTO"	actual = 0 ifTrue:[actual = orientaciones size].</body></methods><methods><class-id>SentidoAntihorario</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularSiguiente">calcularSiguiente	actual:= (actual-1)\\(self orientaciones size). "CORREGIR ESTO"	actual = 0 ifTrue:[actual = self orientaciones size].</body></methods><methods><class-id>ComandoAbrir</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Abrir-&gt;',self receptor nombre.</body></methods><methods><class-id>SentidoAntihorario</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularSiguiente">calcularSiguiente	actual:= (actual-1)\\(self orientaciones size). "CORREGIR ESTO"	actual &lt; 0 ifTrue:[actual = self orientaciones size].</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="puedeEntrar:">puedeEntrar:alguien	| habEntrada habSalida |		alguien posicion = h1		ifTrue:[habEntrada:=self h2. habSalida:=self h1]		ifFalse:[habEntrada:=self h1. habSalida:=self h2]</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="puedeEntrar:">puedeEntrar:alguien	| habEntrada habSalida |		alguien posicion = h1		ifTrue:[habEntrada:=self h2. habSalida:=self h1]		ifFalse:[habEntrada:=self h1. habSalida:=self h2].</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="puedeEntrar:">puedeEntrar:alguien	| habEntrada habSalida |		alguien posicion = h1		ifTrue:[habEntrada:=self h2. habSalida:=self h1]		ifFalse:[habEntrada:=self h1. habSalida:=self h2].	habSalida salir:alguien.	habEntrada entrar:alguien.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="salir:">salir:alguien	</body></methods><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id forma orientaciones ocupantes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="ocupantes">ocupantes	^ocupantes</body></methods><methods><class-id>Habitacion</class-id> <category>accessing</category><body package="Laberinto" selector="ocupantes:">ocupantes: anObject	ocupantes := anObject</body></methods><methods><class-id>EstadoCerrada</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:puerta:">entrar: alguien puerta:unaPuerta	Transcript show:'Puerta cerrada'.cr.</body></methods><methods><class-id>EstadoCerrada</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:puerta:">entrar: alguien puerta:unaPuerta	Transcript show:'Puerta cerrada';cr.</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="nombre">nombre	^nombre</body></methods><methods><class-id>Puerta</class-id> <category>accessing</category><body package="Laberinto" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user1:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user1.user1 posicion id.</do-it><do-it>user1 posicion id.</do-it><do-it>user:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user.user posicion id.</do-it><do-it>user posicion comandos.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user.user posicion id.user posicion comandos.</do-it><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PanelControl</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>PanelControl</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>PanelControl removeFromSystem</do-it><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 860 416 1548 895 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #numeroHabitacion ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: ' numeroHabitacion listaComandos nombreUsuario '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreUsuario">nombreUsuario	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreUsuario isNil		ifTrue:			[nombreUsuario := String new asValue]		ifFalse:			[nombreUsuario]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := String new asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaComandos">listaComandos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaComandos isNil		ifTrue:			[listaComandos := SelectionInList new]		ifFalse:			[listaComandos]</body></methods><do-it>PanelControl organization addCategory: #operaciones</do-it><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."		self listaComados list:self usuario comandos.</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."		self nombreUsuario value:self usuario nombre.		self listaComados list:self usuario comandos.</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><methods><class-id>PanelControl</class-id> <category>accessing</category><body package="LaberintoGUI" selector="usuario">usuario	^usuario</body></methods><methods><class-id>PanelControl</class-id> <category>accessing</category><body package="LaberintoGUI" selector="usuario:">usuario: anObject	usuario := anObject</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."		self nombreUsuario value:self usuario nombre.		self listaComandos list:self usuario comandos.</body></methods><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#bounds: #(#{Graphics.Rectangle} 701 314 1327 562 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 295 0 46 0 438 0 195 0 ) 					#name: #List1 					#model: #listaUsuarios 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #abrirPanelControl ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 294 0 17 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 458 0 50 0 558 0 71 0 ) 					#name: #InputField5 					#model: #'usuarioHolder posicion id' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 458 0 21 0 ) 					#name: #Label6 					#label: 'Posición' ) ) ) )</body></methods><class><name>InfoLaberinto</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios modelo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #InfoLaberinto	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios modelo  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroUsuarios">numeroUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroUsuarios isNil		ifTrue:			[numeroUsuarios := 0 asValue]		ifFalse:			[numeroUsuarios]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numBichos">numBichos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numBichos isNil		ifTrue:			[numBichos := 0 asValue]		ifFalse:			[numBichos]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="usuarioHolder">usuarioHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^usuarioHolder isNil		ifTrue:			[usuarioHolder := nil asValue]		ifFalse:			[usuarioHolder]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numHab">numHab	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numHab isNil		ifTrue:			[numHab := 0 asValue]		ifFalse:			[numHab]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="niveles">niveles	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^niveles isNil		ifTrue:			[niveles := 0 asValue]		ifFalse:			[niveles]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaUsuarios">listaUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaUsuarios isNil		ifTrue:			[listaUsuarios := SelectionInList new]		ifFalse:			[listaUsuarios]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="abrirPanelControl">abrirPanelControl	|user panel|	user:=listaUsuarios selection.	panel:=PanelControl new.		panel usuario:user.	panel iniciarAspectos.	panel open.	</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."		self nombreUsuario value:self usuario nombre.		"self listaComandos list:self usuario comandos."</body></methods><methods><class-id>Personaje</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream			aStream nextPutAll:nombre,' en habitación ',posicion id printString.</body></methods><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 616 277 1304 756 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #numeroHabitacion 					#type: #number ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numeroHabitacion listaComandos nombreUsuario usuario  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := 0 asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 616 277 1304 756 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #numeroHabitacion 					#type: #number ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numeroHabitacion listaComandos nombreUsuario usuario  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreUsuario">nombreUsuario	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreUsuario isNil		ifTrue:			[nombreUsuario := String new asValue]		ifFalse:			[nombreUsuario]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := 0 asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaComandos">listaComandos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaComandos isNil		ifTrue:			[listaComandos := SelectionInList new]		ifFalse:			[listaComandos]</body></methods><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#bounds: #(#{Graphics.Rectangle} 647 392 1273 640 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 295 0 46 0 544 0 197 0 ) 					#name: #List1 					#model: #listaUsuarios 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #abrirPanelControl ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 294 0 17 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 554 0 46 0 654 0 67 0 ) 					#name: #InputField5 					#model: #'usuarioHolder posicion id' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 555 0 19 0 ) 					#name: #Label6 					#label: 'Posición' ) ) ) )</body></methods><methods><class-id>ElementoMapa</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:self nombre.</body></methods><remove-selector><class-id>ElementoMapa</class-id> <selector>printOn:</selector></remove-selector><do-it>ElementoMapa organization removeCategory: #printing</do-it><methods><class-id>Habitacion</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:self id.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	alguien posicion:self.	Transcript show:'Estoy en la habitación ',self id printString;cr.	alguien actualizarComandos.		self ocupantes add:alguien.</body></methods><methods><class-id>Habitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	id := nil.	orientaciones := List new.	hijos := List new.	ocupantes := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos">actualizarComandos	|lista|	lista := List new.	lista addAll:self comandos.	self comandos removeAll:lista.	self comandos addAll:self posicion obtenerComandos.	self equipamiento do:[:each | self comandos addAll:each comandos].</body></methods><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen equipamiento </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Personaje</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		equipamiento:=List new.		^self</body></methods><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen equipamiento comandos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="comandos">comandos	^comandos</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="comandos:">comandos: anObject	comandos := anObject</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="equipamiento">equipamiento	^equipamiento</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="equipamiento:">equipamiento: anObject	equipamiento := anObject</body></methods><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 616 277 1304 756 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #numeroHabitacion 					#type: #string ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numeroHabitacion listaComandos nombreUsuario usuario  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreUsuario">nombreUsuario	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreUsuario isNil		ifTrue:			[nombreUsuario := String new asValue]		ifFalse:			[nombreUsuario]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := String new asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaComandos">listaComandos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaComandos isNil		ifTrue:			[listaComandos := SelectionInList new]		ifFalse:			[listaComandos]</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	"coleccion addAll:self comandos."	coleccion addAll:self forma obtenerComandos.	self hijos do:[:each | coleccion addAll:each obtenerComandos].	^coleccion.</body></methods><methods><class-id>Habitacion</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:self id printString.</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		"numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion."	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."		self nombreUsuario value:self usuario nombre.		"self listaComandos list:self usuario comandos."</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		"numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion."	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."		self nombreUsuario value:self usuario nombre.		self listaComandos list:self usuario comandos.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	alguien posicion:self.	"Transcript show:'Estoy en la habitación ',self id printString;cr."	alguien actualizarComandos.		self ocupantes add:alguien.</body></methods><methods><class-id>Personaje</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		equipamiento:=List new.	comandos:=List new.		^self</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."		self nombreUsuario value:self usuario nombre.		self listaComandos list:self usuario comandos.</body></methods><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 616 277 1304 756 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #'numeroHabitacion id' 					#type: #number ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numeroHabitacion listaComandos nombreUsuario usuario  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreUsuario">nombreUsuario	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreUsuario isNil		ifTrue:			[nombreUsuario := String new asValue]		ifFalse:			[nombreUsuario]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := nil asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaComandos">listaComandos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaComandos isNil		ifTrue:			[listaComandos := SelectionInList new]		ifFalse:			[listaComandos]</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unaHab	unaHab entrar:self.</body></methods><methods><class-id>ComandoCoger</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor coger:unPersonaje comando:self.	unPersonaje actualizarComandos.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos">actualizarComandos	self subclassResponsibility.</body></methods><methods><class-id>Bicho</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos">actualizarComandos	</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando		self quitarComado:unComando.	self generarComandoPosicion:(unPersonaje posicion).	unPersonaje agregarEquipamiento:self.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="quitarComado:">quitarComado:unComando	self comandos remove:unComando ifAbsent:[0].</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandoPosicion:">generarComandoPosicion:unPersonaje	self subclassResponsibility.</body></methods><class><name>ComandoUsar</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoUsar</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ComandoUsar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	" *** This method was defined by Comando as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Llave</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandoPosicion:">generarComandoPosicion:unaHab	| puertas |		puertas:=unaHab obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></methods><comment><class-id>ComandoUsar</class-id><body>ComandoUsar comando usar.</body></comment><methods><class-id>Llave</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarComando:">agregarComando:unComando	self comandos add:unComando.</body></methods><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarComando:">agregarComando:unComando	self comandos add:unComando.</body></methods><remove-selector><class-id>Llave</class-id> <selector>agregarComando:</selector></remove-selector><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandoPosicion:">generarComandoPosicion:unaHab	self subclassResponsibility.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerPuertas">obtenerPuertas		| puertas |	puertas:=List new.	self orientaciones do:[:each | 		((each obtenerSuperficieDe:self forma) class) = Puerta		ifTrue:[puertas add:(each obtenerSuperficieDe:self forma)]].	^puertas.</body></methods><methods><class-id>Orientacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerSuperficieDe:">obtenerSuperficieDe:unaForma		self subclassResponsibility.</body></methods><methods><class-id>OriEste</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerSuperficieDe:">obtenerSuperficieDe:unaForma		^unaForma este.</body></methods><methods><class-id>OriNorte</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerSuperficieDe:">obtenerSuperficieDe:unaForma		^unaForma norte.</body></methods><methods><class-id>OriSur</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerSuperficieDe:">obtenerSuperficieDe:unaForma		^unaForma sur</body></methods><methods><class-id>OriNorEste</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerSuperficieDe:">obtenerSuperficieDe:unaForma		^unaForma noreste.</body></methods><methods><class-id>OriNorOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerSuperficieDe:">obtenerSuperficieDe:unaForma		^unaForma noroeste.</body></methods><methods><class-id>OriOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerSuperficieDe:">obtenerSuperficieDe:unaForma		^unaForma oeste.</body></methods><methods><class-id>OriSurEste</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerSuperficieDe:">obtenerSuperficieDe:unaForma		^unaForma sureste.</body></methods><methods><class-id>OriSurOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerSuperficieDe:">obtenerSuperficieDe:unaForma		^unaForma suroeste.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 23, 2015' '6:10:44 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:10:44 on 23 de abril de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 23, 2015' '6:10:46 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 18:10:46 on 23 de abril de 2015."</do-it><class><name>ComandoDejar</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoDejar</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ComandoDejar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	" *** This method was defined by Comando as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando		self quitarComado:unComando.	"self agregarComando:(ComandoDejar new receptor:self)."	self generarComandos.	unPersonaje agregarEquipamiento:self.	unPersonaje posicion quitarElemento:self.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	self subclassResponsibility.</body></methods><remove-selector><class-id>ElementoHoja</class-id> <selector>generarComandoPosicion:</selector></remove-selector><methods><class-id>Llave</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLlave:">construirLlave:unId	| hab llave |	hab:=self laberinto getHabId:unId.	llave:= Llave new.	llave nombre:'Llave'.	llave posicion:hab.	llave comandos add:(ComandoCoger new receptor:llave).	hab add:llave.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarEquipamiento:">agregarEquipamiento:unElemento		self equipamiento add:unElemento.</body></methods><remove-selector><class-id>Personaje</class-id> <selector>agregarEquipamiento:</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarEquipamiento:">agregarEquipamiento:unElemento		self equipamiento add:unElemento.</body></methods><remove-selector><class-id>EnteAutonomo</class-id> <selector>agregarEquipamiento:</selector></remove-selector><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="agregarEquipamiento:">agregarEquipamiento:unElemento		self equipamiento add:unElemento.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="quitarElemento:">quitarElemento:unElemento	self hijos remove:unElemento ifAbsent:[0].	self obtenerComandos.</body></methods><class><name>ElementoHoja</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hijos posicion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ElementoHoja</class-id> <category>accessing</category><body package="Laberinto" selector="posicion">posicion	^posicion</body></methods><methods><class-id>ElementoHoja</class-id> <category>accessing</category><body package="Laberinto" selector="posicion:">posicion: anObject	posicion := anObject</body></methods><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 616 277 1304 756 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #ejecutarComando ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #'numeroHabitacion id' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 136 0 ) 					#name: #Label4 					#label: 'Vidas' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 86 0 135 0 186 0 156 0 ) 					#name: #InputField3 					#model: #vidas ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 45 0 170 0 ) 					#name: #Label5 					#label: 'Riqueza' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 86 0 168 0 186 0 189 0 ) 					#name: #InputField4 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 44 0 200 0 ) 					#name: #Label6 					#label: 'Equipamiento conseguido:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 45 0 233 0 232 0 430 0 ) 					#name: #List2 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario vidas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numeroHabitacion listaComandos nombreUsuario usuario  vidas '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="vidas">vidas	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^vidas isNil		ifTrue:			[vidas := String new asValue]		ifFalse:			[vidas]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreUsuario">nombreUsuario	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreUsuario isNil		ifTrue:			[nombreUsuario := String new asValue]		ifFalse:			[nombreUsuario]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := nil asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaComandos">listaComandos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaComandos isNil		ifTrue:			[listaComandos := SelectionInList new]		ifFalse:			[listaComandos]</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="ejecutarComando">ejecutarComando	| comando |	comando:=self listaComandos selection.	comando ejecutar:self usuairo.</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="ejecutarComando">ejecutarComando	| comando |	comando:=self listaComandos selection.	comando ejecutar:self usuario.</body></methods><class><name>ElementoHoja</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hijos posicion nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ElementoHoja</class-id> <category>accessing</category><body package="Laberinto" selector="nombre">nombre	^nombre</body></methods><methods><class-id>ElementoHoja</class-id> <category>accessing</category><body package="Laberinto" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 616 277 1304 756 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #ejecutarComando ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #'numeroHabitacion id' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 136 0 ) 					#name: #Label4 					#label: 'Vidas' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 135 0 206 0 156 0 ) 					#name: #InputField3 					#model: #vidas ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 45 0 170 0 ) 					#name: #Label5 					#label: 'Riqueza' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 168 0 206 0 189 0 ) 					#name: #InputField4 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 44 0 200 0 ) 					#name: #Label6 					#label: 'Equipamiento conseguido:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 45 0 233 0 232 0 430 0 ) 					#name: #List2 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 616 277 1304 756 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #ejecutarComando ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #'numeroHabitacion id' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 136 0 ) 					#name: #Label4 					#label: 'Vidas' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 135 0 206 0 156 0 ) 					#name: #InputField3 					#model: #vidas ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 45 0 170 0 ) 					#name: #Label5 					#label: 'Riqueza' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 168 0 206 0 189 0 ) 					#name: #InputField4 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 44 0 200 0 ) 					#name: #Label6 					#label: 'Equipamiento conseguido:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 45 0 233 0 232 0 430 0 ) 					#name: #List2 					#model: #listaEquipamiento 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario vidas listaEquipamiento </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numeroHabitacion listaComandos nombreUsuario usuario vidas  listaEquipamiento '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="vidas">vidas	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^vidas isNil		ifTrue:			[vidas := String new asValue]		ifFalse:			[vidas]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreUsuario">nombreUsuario	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreUsuario isNil		ifTrue:			[nombreUsuario := String new asValue]		ifFalse:			[nombreUsuario]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := nil asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaEquipamiento">listaEquipamiento	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaEquipamiento isNil		ifTrue:			[listaEquipamiento := SelectionInList new]		ifFalse:			[listaEquipamiento]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaComandos">listaComandos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaComandos isNil		ifTrue:			[listaComandos := SelectionInList new]		ifFalse:			[listaComandos]</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."		self nombreUsuario value:self usuario nombre.		self listaComandos list:self usuario comandos.	self listaEquipamiento list:self usuario equipamiento.</body></methods><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen equipamiento comandos vidas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen equipamiento comandos vidas riqueza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="riqueza">riqueza	^riqueza</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="riqueza:">riqueza: anObject	riqueza := anObject</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="vidas">vidas	^vidas</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="vidas:">vidas: anObject	vidas := anObject</body></methods><remove-selector><class-id>Llave</class-id> <selector>generarComandoPosicion:</selector></remove-selector><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos		| riqueza |	numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas.	riqueza:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#riqueza.		self nombreUsuario value:self usuario nombre.		self listaComandos list:self usuario comandos.	self listaEquipamiento list:self usuario equipamiento.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>vidas</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>vidas</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen equipamiento comandos estadoSalud riqueza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="vidas:">vidas: anObject	estadoSalud := anObject</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="vidas">vidas	^estadoSalud</body></methods><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 616 277 1304 756 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #ejecutarComando ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #'numeroHabitacion id' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 136 0 ) 					#name: #Label4 					#label: 'Vidas' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 135 0 206 0 156 0 ) 					#name: #InputField3 					#model: #vidas ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 45 0 170 0 ) 					#name: #Label5 					#label: 'Riqueza' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 168 0 206 0 189 0 ) 					#name: #InputField4 					#model: #riqueza ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 44 0 200 0 ) 					#name: #Label6 					#label: 'Equipamiento conseguido:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 45 0 233 0 232 0 430 0 ) 					#name: #List2 					#model: #listaEquipamiento 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario vidas listaEquipamiento riqueza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numeroHabitacion listaComandos nombreUsuario usuario vidas listaEquipamiento  riqueza '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="riqueza">riqueza	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^riqueza isNil		ifTrue:			[riqueza := String new asValue]		ifFalse:			[riqueza]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="vidas">vidas	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^vidas isNil		ifTrue:			[vidas := String new asValue]		ifFalse:			[vidas]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := nil asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreUsuario">nombreUsuario	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreUsuario isNil		ifTrue:			[nombreUsuario := String new asValue]		ifFalse:			[nombreUsuario]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaEquipamiento">listaEquipamiento	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaEquipamiento isNil		ifTrue:			[listaEquipamiento := SelectionInList new]		ifFalse:			[listaEquipamiento]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaComandos">listaComandos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaComandos isNil		ifTrue:			[listaComandos := SelectionInList new]		ifFalse:			[listaComandos]</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas.	riqueza:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#riqueza.		self nombreUsuario value:self usuario nombre.		self listaComandos list:self usuario comandos.	self listaEquipamiento list:self usuario equipamiento.</body></methods><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 616 277 1304 756 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #ejecutarComando ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #'numeroHabitacion id' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 136 0 ) 					#name: #Label4 					#label: 'Vidas' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 135 0 206 0 156 0 ) 					#name: #InputField3 					#model: #vidas 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 45 0 170 0 ) 					#name: #Label5 					#label: 'Riqueza' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 168 0 206 0 189 0 ) 					#name: #InputField4 					#model: #'riqueza riqueza' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 44 0 200 0 ) 					#name: #Label6 					#label: 'Equipamiento conseguido:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 45 0 233 0 232 0 430 0 ) 					#name: #List2 					#model: #listaEquipamiento 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario vidas listaEquipamiento riqueza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numeroHabitacion listaComandos nombreUsuario usuario vidas listaEquipamiento riqueza  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="riqueza">riqueza	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^riqueza isNil		ifTrue:			[riqueza := nil asValue]		ifFalse:			[riqueza]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="vidas">vidas	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^vidas isNil		ifTrue:			[vidas := 0 asValue]		ifFalse:			[vidas]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := nil asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreUsuario">nombreUsuario	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreUsuario isNil		ifTrue:			[nombreUsuario := String new asValue]		ifFalse:			[nombreUsuario]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaEquipamiento">listaEquipamiento	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaEquipamiento isNil		ifTrue:			[listaEquipamiento := SelectionInList new]		ifFalse:			[listaEquipamiento]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaComandos">listaComandos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaComandos isNil		ifTrue:			[listaComandos := SelectionInList new]		ifFalse:			[listaComandos]</body></methods><methods><class-id>ComandoUsar</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Usar--&gt;',self receptor printString.</body></methods><methods><class-id>ComandoCoger</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Coger--&gt;',self receptor printString.</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."	riqueza:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#riqueza.		self nombreUsuario value:self usuario nombre.		self listaComandos list:self usuario comandos.	self listaEquipamiento list:self usuario equipamiento.</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	"vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas."	riqueza:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#riqueza.		self nombreUsuario value:self usuario nombre.	self listaComandos list:self usuario comandos.	self listaEquipamiento list:self usuario equipamiento.</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="posicion1">posicion1	^posicion</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="posicion1:">posicion1: anObject	posicion := anObject</body></methods><remove-selector><class-id>Personaje</class-id> <selector>posicion1:</selector></remove-selector><remove-selector><class-id>Personaje</class-id> <selector>posicion1</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="posicion:">posicion: anObject	posicion := anObject	self changed:#posicion.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="posicion:">posicion: anObject	posicion := anObject.	self changed:#posicion.</body></methods><remove-selector><class-id>Llave</class-id> <selector>coger:comando:</selector></remove-selector><class><name>Laberinto4HexagonosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>JuegoLaberintoTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>Laberinto4RectangulosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><methods><class-id>Laberinto4RectangulosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4HexagonosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.			self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).	self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).		self assert:(hab3 forma noreste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	juego := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:3.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBichosTienenPosicion">testBichosTienenPosicion	| bichos |	bichos:=juego bichos.	self assert: (bichos detect:[:each | each posicion isNil] ifNone:[^true])</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		hab5:=juego obtenerHabitacion:5.	hab6:=juego obtenerHabitacion:6.	hab7:=juego obtenerHabitacion:7.	hab8:=juego obtenerHabitacion:8.	hab9:=juego obtenerHabitacion:9.	hab10:=juego obtenerHabitacion:10.	self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma sureste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma noreste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma sureste class = Puerta).		self assert:(hab4 forma noroeste class = Puerta).			self assert:(hab4 forma sureste class = Puerta).	self assert:(hab5 forma noroeste class = Puerta).	self assert:(hab5 forma noreste class = Puerta).	self assert:(hab5 forma sureste class = Puerta).	self assert:(hab5 forma sur class = Puerta).	self assert:(hab6 forma suroeste class = Puerta).	self assert:(hab6 forma sur class = Puerta).	self assert:(hab7 forma noroeste class = Puerta).	self assert:(hab7 forma norte class = Puerta).	self assert:(hab7 forma suroeste class = Puerta).	self assert:(hab8 forma norte class = Puerta).	self assert:(hab8 forma noreste class = Puerta).	self assert:(hab8 forma suroeste class = Puerta).	self assert:(hab9 forma noreste class = Puerta).	self assert:(hab9 forma noroeste class = Puerta).	self assert:(hab10 forma sureste class = Puerta).	self assert:(hab10 forma noroeste class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLlave">testLlave	| hab |	hab:=juego laberinto obtenerHabitacion:10.	self deny:(hab hijos detect:[:each | each class = Llave] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneNetScreen">testJuegoTieneNetScreen	| netscreen |	netscreen:=juego netscreen.	self deny:(netscreen isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene3Bichos">testJuegoTiene3Bichos	| bichos |	bichos:=juego bichos.	self assert: bichos size =3.	self deny:(bichos isNil)</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Armario</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Armario</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testArmarios">testArmarios	| hab |	hab:=juego laberinto obtenerHabitacion:1.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:3.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:6.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:8.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoUsuario">testJuegoUsuario	| usr ns |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=10)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneBichos">testJuegoTieneBichos	| bichos |	bichos:=juego bichos.	self assert: bichos size &gt;=1.	self deny:(bichos isNil)</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BlackHoleBox</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>BlackHoleBox</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBlackHole">testBlackHole	| hab |	hab:=juego laberinto obtenerHabitacion:4.	self deny:(hab hijos detect:[:each | each class = BlackHoleBox] ifNone:[nil]) isNil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SableLaser</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SableLaser</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testSableLaser">testSableLaser	| hab |	hab:=juego laberinto obtenerHabitacion:7.	self deny:(hab hijos detect:[:each | each class = SableLaser] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>Laberinto4HexagonosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>JuegoLaberintoTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>Laberinto4RectangulosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><methods><class-id>Laberinto4RectangulosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4HexagonosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.			self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).	self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).		self assert:(hab3 forma noreste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	juego := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:3.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBichosTienenPosicion">testBichosTienenPosicion	| bichos |	bichos:=juego bichos.	self assert: (bichos detect:[:each | each posicion isNil] ifNone:[^true])</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		hab5:=juego obtenerHabitacion:5.	hab6:=juego obtenerHabitacion:6.	hab7:=juego obtenerHabitacion:7.	hab8:=juego obtenerHabitacion:8.	hab9:=juego obtenerHabitacion:9.	hab10:=juego obtenerHabitacion:10.	self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma sureste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma noreste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma sureste class = Puerta).		self assert:(hab4 forma noroeste class = Puerta).			self assert:(hab4 forma sureste class = Puerta).	self assert:(hab5 forma noroeste class = Puerta).	self assert:(hab5 forma noreste class = Puerta).	self assert:(hab5 forma sureste class = Puerta).	self assert:(hab5 forma sur class = Puerta).	self assert:(hab6 forma suroeste class = Puerta).	self assert:(hab6 forma sur class = Puerta).	self assert:(hab7 forma noroeste class = Puerta).	self assert:(hab7 forma norte class = Puerta).	self assert:(hab7 forma suroeste class = Puerta).	self assert:(hab8 forma norte class = Puerta).	self assert:(hab8 forma noreste class = Puerta).	self assert:(hab8 forma suroeste class = Puerta).	self assert:(hab9 forma noreste class = Puerta).	self assert:(hab9 forma noroeste class = Puerta).	self assert:(hab10 forma sureste class = Puerta).	self assert:(hab10 forma noroeste class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLlave">testLlave	| hab |	hab:=juego laberinto obtenerHabitacion:10.	self deny:(hab hijos detect:[:each | each class = Llave] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneNetScreen">testJuegoTieneNetScreen	| netscreen |	netscreen:=juego netscreen.	self deny:(netscreen isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene3Bichos">testJuegoTiene3Bichos	| bichos |	bichos:=juego bichos.	self assert: bichos size =3.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testArmarios">testArmarios	| hab |	hab:=juego laberinto obtenerHabitacion:1.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:3.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:6.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:8.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoUsuario">testJuegoUsuario	| usr ns |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=10)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneBichos">testJuegoTieneBichos	| bichos |	bichos:=juego bichos.	self assert: bichos size &gt;=1.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBlackHole">testBlackHole	| hab |	hab:=juego laberinto obtenerHabitacion:4.	self deny:(hab hijos detect:[:each | each class = BlackHoleBox] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testSableLaser">testSableLaser	| hab |	hab:=juego laberinto obtenerHabitacion:7.	self deny:(hab hijos detect:[:each | each class = SableLaser] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>Laberinto4HexagonosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>JuegoLaberintoTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>Laberinto4RectangulosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><methods><class-id>Laberinto4RectangulosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4HexagonosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.			self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).	self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).		self assert:(hab3 forma noreste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	juego := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:3.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBichosTienenPosicion">testBichosTienenPosicion	| bichos |	bichos:=juego bichos.	self assert: (bichos detect:[:each | each posicion isNil] ifNone:[^true])</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		hab5:=juego obtenerHabitacion:5.	hab6:=juego obtenerHabitacion:6.	hab7:=juego obtenerHabitacion:7.	hab8:=juego obtenerHabitacion:8.	hab9:=juego obtenerHabitacion:9.	hab10:=juego obtenerHabitacion:10.	self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma sureste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma noreste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma sureste class = Puerta).		self assert:(hab4 forma noroeste class = Puerta).			self assert:(hab4 forma sureste class = Puerta).	self assert:(hab5 forma noroeste class = Puerta).	self assert:(hab5 forma noreste class = Puerta).	self assert:(hab5 forma sureste class = Puerta).	self assert:(hab5 forma sur class = Puerta).	self assert:(hab6 forma suroeste class = Puerta).	self assert:(hab6 forma sur class = Puerta).	self assert:(hab7 forma noroeste class = Puerta).	self assert:(hab7 forma norte class = Puerta).	self assert:(hab7 forma suroeste class = Puerta).	self assert:(hab8 forma norte class = Puerta).	self assert:(hab8 forma noreste class = Puerta).	self assert:(hab8 forma suroeste class = Puerta).	self assert:(hab9 forma noreste class = Puerta).	self assert:(hab9 forma noroeste class = Puerta).	self assert:(hab10 forma sureste class = Puerta).	self assert:(hab10 forma noroeste class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLlave">testLlave	| hab |	hab:=juego laberinto obtenerHabitacion:10.	self deny:(hab hijos detect:[:each | each class = Llave] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneNetScreen">testJuegoTieneNetScreen	| netscreen |	netscreen:=juego netscreen.	self deny:(netscreen isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene3Bichos">testJuegoTiene3Bichos	| bichos |	bichos:=juego bichos.	self assert: bichos size =3.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testArmarios">testArmarios	| hab |	hab:=juego laberinto obtenerHabitacion:1.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:3.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:6.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:8.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoUsuario">testJuegoUsuario	| usr ns |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=10)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneBichos">testJuegoTieneBichos	| bichos |	bichos:=juego bichos.	self assert: bichos size &gt;=1.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBlackHole">testBlackHole	| hab |	hab:=juego laberinto obtenerHabitacion:4.	self deny:(hab hijos detect:[:each | each class = BlackHoleBox] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testSableLaser">testSableLaser	| hab |	hab:=juego laberinto obtenerHabitacion:7.	self deny:(hab hijos detect:[:each | each class = SableLaser] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><do-it>Caja renameTo: #Armario</do-it><comment><class-id>Armario</class-id><body>Caja es un elemento contenedor.</body></comment><class><name>SableLaser</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>SableLaser</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SableLaser</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	" *** This method was defined by ElementoHoja as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>SableLaser</class-id><body>SableLaser representa el sable laser.</body></comment><class><name>Cofre</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Cofre</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unElemento	" *** This method was defined by ElementoContenedor as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="remove:">remove:unElemento	" *** This method was defined by ElementoContenedor as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	" *** This method was defined by ElementoContenedor as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>Cofre</class-id><body>Cofre.</body></comment><class><name>Laberinto4HexagonosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>JuegoLaberintoTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>Laberinto4RectangulosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><methods><class-id>Laberinto4RectangulosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4HexagonosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.			self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).	self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).		self assert:(hab3 forma noreste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	juego := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:3.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBichosTienenPosicion">testBichosTienenPosicion	| bichos |	bichos:=juego bichos.	self assert: (bichos detect:[:each | each posicion isNil] ifNone:[^true])</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		hab5:=juego obtenerHabitacion:5.	hab6:=juego obtenerHabitacion:6.	hab7:=juego obtenerHabitacion:7.	hab8:=juego obtenerHabitacion:8.	hab9:=juego obtenerHabitacion:9.	hab10:=juego obtenerHabitacion:10.	self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma sureste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma noreste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma sureste class = Puerta).		self assert:(hab4 forma noroeste class = Puerta).			self assert:(hab4 forma sureste class = Puerta).	self assert:(hab5 forma noroeste class = Puerta).	self assert:(hab5 forma noreste class = Puerta).	self assert:(hab5 forma sureste class = Puerta).	self assert:(hab5 forma sur class = Puerta).	self assert:(hab6 forma suroeste class = Puerta).	self assert:(hab6 forma sur class = Puerta).	self assert:(hab7 forma noroeste class = Puerta).	self assert:(hab7 forma norte class = Puerta).	self assert:(hab7 forma suroeste class = Puerta).	self assert:(hab8 forma norte class = Puerta).	self assert:(hab8 forma noreste class = Puerta).	self assert:(hab8 forma suroeste class = Puerta).	self assert:(hab9 forma noreste class = Puerta).	self assert:(hab9 forma noroeste class = Puerta).	self assert:(hab10 forma sureste class = Puerta).	self assert:(hab10 forma noroeste class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLlave">testLlave	| hab |	hab:=juego laberinto obtenerHabitacion:10.	self deny:(hab hijos detect:[:each | each class = Llave] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneNetScreen">testJuegoTieneNetScreen	| netscreen |	netscreen:=juego netscreen.	self deny:(netscreen isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene3Bichos">testJuegoTiene3Bichos	| bichos |	bichos:=juego bichos.	self assert: bichos size =3.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testArmarios">testArmarios	| hab |	hab:=juego laberinto obtenerHabitacion:1.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:3.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:6.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:8.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoUsuario">testJuegoUsuario	| usr ns |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=10)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneBichos">testJuegoTieneBichos	| bichos |	bichos:=juego bichos.	self assert: bichos size &gt;=1.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBlackHole">testBlackHole	| hab |	hab:=juego laberinto obtenerHabitacion:4.	self deny:(hab hijos detect:[:each | each class = BlackHoleBox] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testSableLaser">testSableLaser	| hab |	hab:=juego laberinto obtenerHabitacion:7.	self deny:(hab hijos detect:[:each | each class = SableLaser] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>JuegoLaberintoTest</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>JuegoLaberintoTest</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>XProgramming.SUnit.JuegoLaberintoTest removeFromSystem</do-it><class><name>Laberinto4HexagonosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>JuegoLaberintoTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>Laberinto4RectangulosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><methods><class-id>Laberinto4RectangulosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4HexagonosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.			self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).	self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).		self assert:(hab3 forma noreste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	juego := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:3.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBichosTienenPosicion">testBichosTienenPosicion	| bichos |	bichos:=juego bichos.	self assert: (bichos detect:[:each | each posicion isNil] ifNone:[^true])</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		hab5:=juego obtenerHabitacion:5.	hab6:=juego obtenerHabitacion:6.	hab7:=juego obtenerHabitacion:7.	hab8:=juego obtenerHabitacion:8.	hab9:=juego obtenerHabitacion:9.	hab10:=juego obtenerHabitacion:10.	self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma sureste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma noreste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma sureste class = Puerta).		self assert:(hab4 forma noroeste class = Puerta).			self assert:(hab4 forma sureste class = Puerta).	self assert:(hab5 forma noroeste class = Puerta).	self assert:(hab5 forma noreste class = Puerta).	self assert:(hab5 forma sureste class = Puerta).	self assert:(hab5 forma sur class = Puerta).	self assert:(hab6 forma suroeste class = Puerta).	self assert:(hab6 forma sur class = Puerta).	self assert:(hab7 forma noroeste class = Puerta).	self assert:(hab7 forma norte class = Puerta).	self assert:(hab7 forma suroeste class = Puerta).	self assert:(hab8 forma norte class = Puerta).	self assert:(hab8 forma noreste class = Puerta).	self assert:(hab8 forma suroeste class = Puerta).	self assert:(hab9 forma noreste class = Puerta).	self assert:(hab9 forma noroeste class = Puerta).	self assert:(hab10 forma sureste class = Puerta).	self assert:(hab10 forma noroeste class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLlave">testLlave	| hab |	hab:=juego laberinto obtenerHabitacion:10.	self deny:(hab hijos detect:[:each | each class = Llave] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneNetScreen">testJuegoTieneNetScreen	| netscreen |	netscreen:=juego netscreen.	self deny:(netscreen isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene3Bichos">testJuegoTiene3Bichos	| bichos |	bichos:=juego bichos.	self assert: bichos size =3.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testArmarios">testArmarios	| hab |	hab:=juego laberinto obtenerHabitacion:1.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:3.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:6.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:8.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoUsuario">testJuegoUsuario	| usr ns |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=10)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneBichos">testJuegoTieneBichos	| bichos |	bichos:=juego bichos.	self assert: bichos size &gt;=1.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBlackHole">testBlackHole	| hab |	hab:=juego laberinto obtenerHabitacion:4.	self deny:(hab hijos detect:[:each | each class = BlackHoleBox] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testSableLaser">testSableLaser	| hab |	hab:=juego laberinto obtenerHabitacion:7.	self deny:(hab hijos detect:[:each | each class = SableLaser] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:numero:">crearJuego:unaRuta numero:numBichos	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		1 to:numBichos do:[:each |		bicho:=self fabricarBichoSentidoReloj.		juegoLaberinto asignarHabitacion:bicho.		juegoLaberinto bichos add:bicho.	].		^juegoLaberinto.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj:">fabricarBichoSentidoReloj:unNum	| bicho |	bicho:=self fabricarBicho.	bicho id:'1'.	bicho estrategia:SentidoHorario new.	^bicho.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj:">fabricarBichoSentidoReloj:unNum	| bicho |	bicho:=self fabricarBicho.	bicho id:unNum.	bicho estrategia:SentidoHorario new.	^bicho.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:numero:">crearJuego:unaRuta numero:numBichos	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		1 to:numBichos do:[:each |		bicho:=self fabricarBichoSentidoReloj:numBichos.		juegoLaberinto asignarHabitacion:bicho.		juegoLaberinto bichos add:bicho.	].		^juegoLaberinto.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 29, 2015' '8:20:52 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:20:52 on 29 de abril de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 29, 2015' '8:20:58 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:20:58 on 29 de abril de 2015."</do-it><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	self orientaciones:unBicho posicion orientaciones.		orientacion:= self siguiente.	"Transcript show: orientacion printString;cr."	"Transcript show: 'Bicho en habitacion ',unBicho posicion id printString;cr."		orientacion ir:unBicho.		(Delay forSeconds:3) wait.		unBicho atacar.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacar">atacar	| victima |	victima:=self elegirVictima.	victima isNill False:[victima atacadoPor:self].</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacar">atacar	| victima |	victima:=self elegirVictima.	victima isNil ifFalse:[victima atacadoPor:self].</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacadoPor:">atacadoPor:alguien</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="elegirVictima">elegirVictima</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="elegirVictima">elegirVictima	| numPersonaje ocupantes |		ocupantes:=List new.	ocupantes:=self posicion ocupantes select:[:each | each class ~= self class].	ocupantes size &gt;= 1	ifTrue:[		numPersonaje:=((Random new next)*(ocupantes size)) truncated + 1.		^ocupantes at:numPersonaje.		]	ifFalse:[^nil].</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="elegirVictima">elegirVictima	| numPersonaje ocupantes |		ocupantes:=List new.	ocupantes:=self posicion ocupantes select:[:each | each class ~= self class].		ocupantes size &gt;= 1	ifTrue:[		numPersonaje:=((Random new next)*(ocupantes size)) truncated + 1.		^ocupantes at:numPersonaje.		]	ifFalse:[^nil].</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ocupantes</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ocupantes</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Habitacion</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id forma orientaciones </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>ElementoContenedor</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hijos ocupantes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><remove-selector><class-id>Habitacion</class-id> <selector>ocupantes</selector></remove-selector><remove-selector><class-id>Habitacion</class-id> <selector>ocupantes:</selector></remove-selector><methods><class-id>ElementoContenedor</class-id> <category>accessing</category><body package="Laberinto" selector="ocupantes">ocupantes	^ocupantes</body></methods><methods><class-id>ElementoContenedor</class-id> <category>accessing</category><body package="Laberinto" selector="ocupantes:">ocupantes: anObject	ocupantes := anObject</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>riqueza</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>riqueza</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen equipamiento comandos estadoSalud </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>EnteAutonomo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion nombre riqueza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>EnteAutonomo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen equipamiento comandos estadoSalud riqueza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>estadoSalud</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>estadoSalud</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego netscreen equipamiento comandos riqueza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>EnteAutonomo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion nombre estadoSalud </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><remove-selector><class-id>Personaje</class-id> <selector>vidas</selector></remove-selector><remove-selector><class-id>Personaje</class-id> <selector>vidas:</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="estadoSalud">estadoSalud	^estadoSalud</body></methods><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="estadoSalud:">estadoSalud: anObject	estadoSalud := anObject</body></methods><class><name>EnteAutonomo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion nombre estadoSalud fuerza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>EnteAutonomo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion nombre estadoSalud fuerza vidas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EnteAutonomo</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	posicion := nil.	vidas:=10.	fuerza:=1.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>EnteAutonomo</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		posicion := nil.	vidas:=10.	fuerza:=1.		^self</body></methods><class><name>EstadoSaludVivo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vidas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EstadoSaludVivo</class-id> <category>accessing</category><body package="Laberinto" selector="vidas">vidas	^vidas</body></methods><methods><class-id>EstadoSaludVivo</class-id> <category>accessing</category><body package="Laberinto" selector="vidas:">vidas: anObject	vidas := anObject</body></methods><methods><class-id>EstadoSaludVivo</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	vidas := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>EstadoSaludVivo class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>EstadoSaludMuerto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EstadoSaludMuerto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>EstadoSaludMuerto class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><do-it>EstadoSaludVivo organization addCategory: #operaciones</do-it><methods><class-id>EstadoSaludVivo</class-id> <category>operaciones</category><body package="Laberinto" selector="atadoPor:soy:">atadoPor:alguien soy:yo	</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacadoPor:">atacadoPor:alguien	self estadoSalud atacadoPor:alguien soy:self.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		posicion := nil.	estadoSalud:=EstadoSaludVivo new vidas:10.	fuerza:=1.		^self</body></methods><class><name>EnteAutonomo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion nombre estadoSalud fuerza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>EstadoSaludMuerto organization addCategory: #operaciones</do-it><methods><class-id>EstadoSaludMuerto</class-id> <category>operaciones</category><body package="Laberinto" selector="atadoPor:soy:">atadoPor:alguien soy:yo	</body></methods><methods><class-id>EstadoSaludVivo</class-id> <category>operaciones</category><body package="Laberinto" selector="atadoPor:soy:">atadoPor:alguien soy:yo	self vidas:(self vidas - alguien fuerza).	self vidas = 0	ifTrue:[		yo estadoSalud:EstadoSaludMuerto new.		yo juego meMataron:yo.		]</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="meMataron:">meMataron:alguien		alguien class = Bicho	ifTrue:[self terminarBicho:alguien id].</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="meMataron:">meMataron:alguien		Transcript show:alguien nombre,' me mataron';cr.	alguien class = Bicho	ifTrue:[self terminarBicho:alguien id].</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="meMataron:">meMataron:alguien		Transcript show:alguien nombre,' me mataron';cr.		alguien class = Bicho	ifTrue:[self terminarBicho:alguien id].</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab.txt'. juego:= JuegoFactoryMethod new crearJuego:ruta.user:=Personaje nombre:'Pepe' juego:juego.juego agregarPersonaje:user.user posicion id.</do-it><do-it>user posicion comandos.</do-it><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#bounds: #(#{Graphics.Rectangle} 647 392 1273 640 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 295 0 46 0 544 0 197 0 ) 					#name: #List1 					#model: #listaUsuarios 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #abrirPanelControl ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 294 0 17 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 565 0 46 0 699 0 201 0 ) 					#name: #List2 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 565 0 17 0 ) 					#name: #Label6 					#label: 'Bichos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 48 0 251 0 356 0 484 0 ) 					#name: #List3 					#model: #infoEstado 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 46 0 218 0 ) 					#name: #Label7 					#label: 'Registro del juego' ) ) ) )</body></methods><class><name>InfoLaberinto</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios modelo infoEstado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #InfoLaberinto	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios modelo  infoEstado '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroUsuarios">numeroUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroUsuarios isNil		ifTrue:			[numeroUsuarios := 0 asValue]		ifFalse:			[numeroUsuarios]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numBichos">numBichos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numBichos isNil		ifTrue:			[numBichos := 0 asValue]		ifFalse:			[numBichos]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numHab">numHab	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numHab isNil		ifTrue:			[numHab := 0 asValue]		ifFalse:			[numHab]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="niveles">niveles	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^niveles isNil		ifTrue:			[niveles := 0 asValue]		ifFalse:			[niveles]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="infoEstado">infoEstado	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^infoEstado isNil		ifTrue:			[infoEstado := SelectionInList new]		ifFalse:			[infoEstado]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaUsuarios">listaUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaUsuarios isNil		ifTrue:			[listaUsuarios := SelectionInList new]		ifFalse:			[listaUsuarios]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	self numBichos value:(modelo bichos size).	niveles := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroNiveles.	numHab := (AspectAdaptor subject:self modelo sendsUpdates:true) forAspect:#numeroHabitaciones.	numeroUsuarios := (AspectAdaptor subject:self modelo netscreen sendsUpdates:true) forAspect:#numeroUsuarios.		self listaUsuarios list:self modelo netscreen personajes.	self infoEstado list:self modelo infoEstado.</body></methods><class><name>JuegoLaberinto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>netscreen bichos numeroNiveles numeroHabitaciones laberinto prototipo procBicho infoEstado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	bichos := List new.	procBicho := Dictionary new.	infoEstado := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	bichos := List new.	procBicho := Dictionary new.	infoEstado := List new.		^self</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		bichos := List new.	procBicho := Dictionary new.	infoEstado := List new.		^self</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="enviarEstado:">enviarEstado:unString	self juego enviarEstado:unString.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="enviarEstado:">enviarEstado:unString	self infoEstado addFirst:unString.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="infoEstado">infoEstado	^infoEstado</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>accessing</category><body package="Laberinto" selector="infoEstado:">infoEstado: anObject	infoEstado := anObject</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacadoPor:">atacadoPor:alguien	self enviarEstado: 		self estadoSalud atacadoPor:alguien soy:self.</body></methods><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#bounds: #(#{Graphics.Rectangle} 647 392 1273 640 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 404 0 48 0 653 0 199 0 ) 					#name: #List1 					#model: #listaUsuarios 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #abrirPanelControl ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 403 0 19 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 674 0 48 0 808 0 203 0 ) 					#name: #List2 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 674 0 19 0 ) 					#name: #Label6 					#label: 'Bichos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 48 0 251 0 356 0 484 0 ) 					#name: #List3 					#model: #infoEstado 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 46 0 218 0 ) 					#name: #Label7 					#label: 'Registro del juego' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 281 0 132 0 383 0 155 0 ) 					#name: #ActionButton1 					#model: #lanzarBichos 					#label: 'Lanzar bichos' 					#defaultable: true ) ) ) )</body></methods><class><name>InfoLaberinto</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios modelo infoEstado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #InfoLaberinto	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numBichos niveles listaUsuarios usuarioHolder numHab numeroUsuarios modelo infoEstado  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>InfoLaberinto</class-id> <category>actions</category><body package="LaberintoGUI" selector="lanzarBichos">lanzarBichos	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroUsuarios">numeroUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroUsuarios isNil		ifTrue:			[numeroUsuarios := 0 asValue]		ifFalse:			[numeroUsuarios]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numBichos">numBichos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numBichos isNil		ifTrue:			[numBichos := 0 asValue]		ifFalse:			[numBichos]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numHab">numHab	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numHab isNil		ifTrue:			[numHab := 0 asValue]		ifFalse:			[numHab]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="niveles">niveles	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^niveles isNil		ifTrue:			[niveles := 0 asValue]		ifFalse:			[niveles]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="infoEstado">infoEstado	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^infoEstado isNil		ifTrue:			[infoEstado := SelectionInList new]		ifFalse:			[infoEstado]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaUsuarios">listaUsuarios	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaUsuarios isNil		ifTrue:			[listaUsuarios := SelectionInList new]		ifFalse:			[listaUsuarios]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>actions</category><body package="LaberintoGUI" selector="lanzarBichos">lanzarBichos	1 to:self modelo bichos size do:[:each |		self modelo lanzarBicho:each		Transcript show:'Lanzado bicho numero ',each printString;cr.		]</body></methods><methods><class-id>InfoLaberinto</class-id> <category>actions</category><body package="LaberintoGUI" selector="lanzarBichos">lanzarBichos	1 to:self modelo bichos size do:[:each |		self modelo lanzarBicho:each.		Transcript show:'Lanzado bicho numero ',each printString;cr.		]</body></methods><methods><class-id>Bicho</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:self id.</body></methods><methods><class-id>Bicho</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:self id printString.</body></methods><methods><class-id>InfoLaberinto</class-id> <category>interface closing</category><body package="LaberintoGUI" selector="noticeOfWindowClose:">noticeOfWindowClose:aWindow	1 to: self modelo bichos size do:[:each | self modelo terminarBicho:each].</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacadoPor:">atacadoPor:alguien	alguien		self estadoSalud atacadoPor:alguien soy:self.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:numero:">crearJuego:unaRuta numero:numBichos	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		1 to:numBichos do:[:each |		bicho:=self fabricarBichoSentidoReloj:numBichos.		bicho juego:juegoLaberinto.		juegoLaberinto asignarHabitacion:bicho.		juegoLaberinto bichos add:bicho.	].		^juegoLaberinto.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:numero:">crearJuego:unaRuta numero:numBichos	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		1 to:numBichos do:[:each |		bicho:=self fabricarBichoSentidoReloj:numBichos.		bicho juego:juegoLaberinto.		bicho id:each.		juegoLaberinto asignarHabitacion:bicho.		juegoLaberinto bichos add:bicho.	].		^juegoLaberinto.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:numero:">crearJuego:unaRuta numero:numBichos	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		1 to:numBichos do:[:each |		bicho:=self fabricarBichoSentidoReloj.		bicho juego:juegoLaberinto.		bicho id:each.		juegoLaberinto asignarHabitacion:bicho.		juegoLaberinto bichos add:bicho.	].		^juegoLaberinto.</body></methods><remove-selector><class-id>JuegoFactoryMethod</class-id> <selector>fabricarBichoSentidoReloj:</selector></remove-selector><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	| bicho |	bicho:=self fabricarBicho.	bicho estrategia:SentidoHorario new.	^bicho.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	| bicho |	bicho:=self fabricarBicho.	bicho:='1'.	bicho estrategia:SentidoHorario new.	^bicho.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>juego</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>juego</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Personaje</name><environment>Smalltalk</environment><super>EnteAutonomo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>netscreen equipamiento comandos riqueza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>EnteAutonomo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion nombre estadoSalud fuerza juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="juego1">juego1	^juego</body></methods><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="juego1:">juego1: anObject	juego := anObject</body></methods><remove-selector><class-id>EnteAutonomo</class-id> <selector>juego1</selector></remove-selector><remove-selector><class-id>EnteAutonomo</class-id> <selector>juego1:</selector></remove-selector><remove-selector><class-id>Personaje</class-id> <selector>juego:</selector></remove-selector><remove-selector><class-id>Personaje</class-id> <selector>juego</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="juego">juego	^juego</body></methods><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="enviarEstado:">enviarEstado:unString	self juego enviarEstado:unString.</body></methods><remove-selector><class-id>Personaje</class-id> <selector>enviarEstado:</selector></remove-selector><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacadoPor:">atacadoPor:alguien	alguien enviarEstado:alguien nombre,' ataca a ',self nombre.		self estadoSalud atacadoPor:alguien soy:self.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacadoPor:">atacadoPor:alguien	alguien enviarEstado:alguien nombre,alguien id,' ataca a ',self nombre.		self estadoSalud atacadoPor:alguien soy:self.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacadoPor:">atacadoPor:alguien	alguien enviarEstado:alguien nombre,' ataca a ',self nombre.		self estadoSalud atacadoPor:alguien soy:self.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		bicho:=self fabricarBichoSentidoReloj.	bicho juego:juegoLaberinto.	bicho id:'1'.	bicho nombre:'bicho'.	juegoLaberinto asignarHabitacion:bicho.	juegoLaberinto bichos add:bicho.		^juegoLaberinto.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:numero:">crearJuego:unaRuta numero:numBichos	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		1 to:numBichos do:[:each |		bicho:=self fabricarBichoSentidoReloj.		bicho juego:juegoLaberinto.		bicho id:each.		bicho nombre:'bicho'.		juegoLaberinto asignarHabitacion:bicho.		juegoLaberinto bichos add:bicho.	].		^juegoLaberinto.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	| bicho |	bicho:=self fabricarBicho.	bicho estrategia:SentidoHorario new.	^bicho.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="fabricarBichoSentidoReloj">fabricarBichoSentidoReloj	| bicho |	bicho:=self fabricarBicho.	bicho nombre:'bicho'.	bicho estrategia:SentidoHorario new.	^bicho.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:numero:">crearJuego:unaRuta numero:numBichos	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		1 to:numBichos do:[:each |		bicho:=self fabricarBichoSentidoReloj.		bicho juego:juegoLaberinto.		bicho id:each.		juegoLaberinto asignarHabitacion:bicho.		juegoLaberinto bichos add:bicho.	].		^juegoLaberinto.</body></methods><methods><class-id>JuegoFactoryMethod</class-id> <category>operaciones</category><body package="JuegoLaberinto-FM" selector="crearJuego:">crearJuego:unaRuta	| conf bicho |	juegoLaberinto:=self fabricarJuego.	juegoLaberinto netscreen:self fabricarNetScreen.		conf:= ParserConfig new.	conf procesarConfig:unaRuta.	juegoLaberinto prototipo:conf construirLaberinto.	juegoLaberinto laberinto:juegoLaberinto prototipo dcopy.	"método dcopy hace una copia profunda (deep copy)"		juegoLaberinto calcularNumeroHabitaciones.		bicho:=self fabricarBichoSentidoReloj.	bicho juego:juegoLaberinto.	bicho id:'1'.	juegoLaberinto asignarHabitacion:bicho.	juegoLaberinto bichos add:bicho.		^juegoLaberinto.</body></methods><methods><class-id>InfoLaberinto class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Información de laberinto' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 647 392 1468 898 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 53 0 49 0 ) 					#name: #Label1 					#label: 'Número niveles' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 40 0 89 0 ) 					#name: #Label2 					#label: 'Num habitaciones' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 77 0 128 0 ) 					#name: #Label3 					#label: 'Num bichos' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 65 0 171 0 ) 					#name: #Label4 					#label: 'Num usuarios' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 49 0 263 0 70 0 ) 					#name: #InputField1 					#model: #niveles 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 89 0 266 0 110 0 ) 					#name: #InputField2 					#model: #numHab 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 167 0 133 0 267 0 154 0 ) 					#name: #InputField3 					#model: #numBichos 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 174 0 268 0 195 0 ) 					#name: #InputField4 					#model: #numeroUsuarios 					#type: #number ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 404 0 48 0 653 0 199 0 ) 					#name: #List1 					#model: #listaUsuarios 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #abrirPanelControl ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 403 0 19 0 ) 					#name: #Label5 					#label: 'Usuarios' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 674 0 48 0 808 0 203 0 ) 					#name: #List2 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 674 0 19 0 ) 					#name: #Label6 					#label: 'Bichos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 48 0 251 0 356 0 484 0 ) 					#name: #List3 					#model: #infoEstado 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 46 0 218 0 ) 					#name: #Label7 					#label: 'Registro del juego' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 281 0 132 0 383 0 155 0 ) 					#name: #ActionButton1 					#model: #lanzarBichos 					#label: 'Lanzar bichos' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	self orientaciones:unBicho posicion orientaciones.		orientacion:= self siguiente.	"Transcript show: orientacion printString;cr."	"Transcript show: 'Bicho en habitacion ',unBicho posicion id printString;cr."		orientacion ir:unBicho.		unBicho enviarEstado:'bicho en habitacion',unBicho posicion.		(Delay forSeconds:3) wait.		unBicho atacar.</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	self orientaciones:unBicho posicion orientaciones.		orientacion:= self siguiente.	"Transcript show: orientacion printString;cr."	"Transcript show: 'Bicho en habitacion ',unBicho posicion id printString;cr."		orientacion ir:unBicho.		unBicho enviarEstado:'bicho en habitacion',unBicho posicion printString.		(Delay forSeconds:3) wait.		unBicho atacar.</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	self orientaciones:unBicho posicion orientaciones.		orientacion:= self siguiente.		orientacion ir:unBicho.		unBicho enviarEstado:'bicho en habitacion ',unBicho posicion printString.		(Delay forSeconds:3) wait.		unBicho atacar.</body></methods><methods><class-id>EstadoSaludVivo</class-id> <category>operaciones</category><body package="Laberinto" selector="atacadoPor:soy:">atacadoPor:alguien soy:yo	self vidas:(self vidas - alguien fuerza).	self vidas = 0	ifTrue:[		yo estadoSalud:EstadoSaludMuerto new.		yo juego meMataron:yo.		]</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>operaciones</category><body package="Laberinto" selector="atacadoPor:soy:">atacadoPor:alguien soy:yo</body></methods><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="fuerza">fuerza	^fuerza</body></methods><methods><class-id>EnteAutonomo</class-id> <category>accessing</category><body package="Laberinto" selector="fuerza:">fuerza: anObject	fuerza := anObject</body></methods><methods><class-id>PanelControl</class-id> <category>operaciones</category><body package="LaberintoGUI" selector="iniciarAspectos">iniciarAspectos	numeroHabitacion:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#posicion.	vidas:=(AspectAdaptor subject:self usuario estadoSalud sendsUpdates:true) forAspect:#vidas.	riqueza:=(AspectAdaptor subject:self usuario sendsUpdates:true) forAspect:#riqueza.		self nombreUsuario value:self usuario nombre.	self listaComandos list:self usuario comandos.	self listaEquipamiento list:self usuario equipamiento.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="salir:">salir:alguien	self ocupantes remove:alguien.</body></methods><methods><class-id>EstadoSaludVivo</class-id> <category>accessing</category><body package="Laberinto" selector="vidas:">vidas: anObject	vidas := anObject.	self changed:#vidas.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		posicion := nil.	estadoSalud:=EstadoSaludVivo new vidas:2.	fuerza:=1.		^self</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 30, 2015' '5:49:41 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:49:41 on 30 de abril de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 30, 2015' '5:50:18 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:50:18 on 30 de abril de 2015."</do-it><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO llaveHab listaArmarios </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'listaArmarios'</do-it><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO llaveHab listaArmarios listaCofres </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'listaCofres'</do-it><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO llaveHab listaArmarios listaCofres listaSables </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'listaSables'</do-it><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	listaArmarios := List new.	listaCofres := List new.	listaSables := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	numHabHexNS:=0.	numHabHexEO:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaSables">listaSables	^listaSables</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaSables:">listaSables: anObject	listaSables := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaCofres">listaCofres	^listaCofres</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaCofres:">listaCofres: anObject	listaCofres := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaArmarios">listaArmarios	^listaArmarios</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaArmarios:">listaArmarios: anObject	listaArmarios := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [llaveHab:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 8 to:linea size)].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [llaveHab:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 9 to:linea size) asNumber].		clave = 'cofre' ifTrue: [listaCofres add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'sable' ifTrue: [listaSables add:(linea copyFrom: 7 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionNS:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionEO:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil 	ifFalse: [builder addHole:holeHab].		llaveHab isNil 	ifFalse: [builder construirLlave:llaveHab].		self listaArmarios do:[:each | builder construirArmario:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionNS:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionEO:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	llaveHab isNil ifFalse: [builder construirLlave:llaveHab].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].		^builder obtenerLaberinto.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO llaveHab listaArmarios listaCofres listaSables listaLlaves </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'listaLlaves'</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionNS:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionEO:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaLlaves">listaLlaves	^listaLlaves</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaLlaves:">listaLlaves: anObject	listaLlaves := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [listaLlaves add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 9 to:linea size) asNumber].		clave = 'cofre' ifTrue: [listaCofres add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'sable' ifTrue: [listaSables add:(linea copyFrom: 7 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].		^builder obtenerLaberinto.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO listaArmarios listaCofres listaSables listaLlaves </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirArmario:">construirArmario:idHab	| hab armario |	hab:=self laberinto getHabId:idHab.	armario:= Armario new.	armario nombre:'Armario'.	armario posicion:hab.	"armario comandos add:(ComandoCoger new receptor:llave)."	hab add:armario.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirCofre:">construirCofre:idHab	| hab cofre |	hab:=self laberinto getHabId:idHab.	cofre:= Armario new.	cofre nombre:'Cofre'.	cofre posicion:hab.	"armario comandos add:(ComandoCoger new receptor:llave)."	hab add:cofre.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirSable:">construirSable:idHab	| hab sable |	hab:=self laberinto getHabId:idHab.	sable:= SableLaser new.	sable nombre:'Sable laser'.	sable posicion:hab.	"armario comandos add:(ComandoCoger new receptor:llave)."	hab add:sable.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirCofre:">construirCofre:idHab	| hab cofre |	hab:=self laberinto getHabId:idHab.	cofre:= Cofre new.	cofre nombre:'Cofre'.	cofre posicion:hab.	"armario comandos add:(ComandoCoger new receptor:llave)."	hab add:cofre.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaPc |	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testArmarios">testArmarios	| hab |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:6.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:8.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBlackHole">testBlackHole	| hab |	hab:=juego laberinto getHabId:4.	self deny:(hab hijos detect:[:each | each class = BlackHoleBox] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = Hexagono]) size =lab habitaciones size)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLlave">testLlave	| hab |	hab:=juego laberinto getHabId:10.	self deny:(hab hijos detect:[:each | each class = Llave] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego getHabId:1.	hab2:=juego getHabId:2.		hab3:=juego getHabId:3.		hab4:=juego getHabId:4.		hab5:=juego getHabId:5.	hab6:=juego getHabId:6.	hab7:=juego getHabId:7.	hab8:=juego getHabId:8.	hab9:=juego getHabId:9.	hab10:=juego getHabId:10.	self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma sureste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma noreste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma sureste class = Puerta).		self assert:(hab4 forma noroeste class = Puerta).			self assert:(hab4 forma sureste class = Puerta).	self assert:(hab5 forma noroeste class = Puerta).	self assert:(hab5 forma noreste class = Puerta).	self assert:(hab5 forma sureste class = Puerta).	self assert:(hab5 forma sur class = Puerta).	self assert:(hab6 forma suroeste class = Puerta).	self assert:(hab6 forma sur class = Puerta).	self assert:(hab7 forma noroeste class = Puerta).	self assert:(hab7 forma norte class = Puerta).	self assert:(hab7 forma suroeste class = Puerta).	self assert:(hab8 forma norte class = Puerta).	self assert:(hab8 forma noreste class = Puerta).	self assert:(hab8 forma suroeste class = Puerta).	self assert:(hab9 forma noreste class = Puerta).	self assert:(hab9 forma noroeste class = Puerta).	self assert:(hab10 forma sureste class = Puerta).	self assert:(hab10 forma noroeste class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testSableLaser">testSableLaser	| hab |	hab:=juego laberinto getHabId:7.	self deny:(hab hijos detect:[:each | each class = SableLaser] ifNone:[nil]) isNil.</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	listaArmarios := List new.	listaCofres := List new.	listaSables := List new.	listaLlaves := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	numHabHexNS:=0.	numHabHexEO:=0.	self iniciarCatalogo.	^self</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 30, 2015' '7:33:05 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 19:33:05 on 30 de abril de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'April 30, 2015' '7:33:09 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 19:33:09 on 30 de abril de 2015."</do-it><remove-selector><class-id>ElementoHoja</class-id> <selector>nombre:</selector></remove-selector><remove-selector><class-id>ElementoHoja</class-id> <selector>nombre</selector></remove-selector><class><name>ElementoHoja</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hijos posicion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><remove-selector><class-id>Puerta</class-id> <selector>nombre:</selector></remove-selector><remove-selector><class-id>Puerta</class-id> <selector>nombre</selector></remove-selector><class><name>Puerta</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 h2 abierta estado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>ElementoMapa</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>comandos nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ElementoMapa</class-id> <category>accessing</category><body package="Laberinto" selector="nombre">nombre	^nombre</body></methods><methods><class-id>ElementoMapa</class-id> <category>accessing</category><body package="Laberinto" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><class><name>Armario</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Armario</class-id> <category>accessing</category><body package="Laberinto" selector="posicion">posicion	^posicion</body></methods><methods><class-id>Armario</class-id> <category>accessing</category><body package="Laberinto" selector="posicion:">posicion: anObject	posicion := anObject</body></methods><class><name>Cofre</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="posicion">posicion	^posicion</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="posicion:">posicion: anObject	posicion := anObject</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</do-it><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="addHole:">addHole:unId	(laberinto getHabId:unId) add:BlackHole new.	Transcript show:'hole',unId.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="addHole:">addHole:unId	(laberinto getHabId:unId) add:BlackHole new.	Transcript show:unId.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="addHole:">addHole:unId	(laberinto getHabId:unId) add:BlackHole new.	Transcript show:'hole ',unId.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="addHole:">addHole:unId	(laberinto getHabId:unId) add:BlackHole new.	Transcript show:'hole ',unId printString.</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</do-it><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="addHole:">addHole:unId	(laberinto getHabId:unId) add:BlackHole new.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBlackHole">testBlackHole	| hab |	hab:=juego laberinto getHabId:4.	self deny:(hab hijos detect:[:each | each class = BlackHole] ifNone:[nil]) isNil.</body></methods><methods><class-id>Hexagono</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	coleccion addAll:self norte obtenerComandos.	coleccion addAll:self sur obtenerComandos.	coleccion addAll:self este obtenerComandos.	coleccion addAll:self oeste obtenerComandos.	^coleccion.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.		"Hexagonos NS"	este isNil	ifTrue:[		coleccion addAll:self norte obtenerComandos.		coleccion addAll:self sur obtenerComandos.		].		"Hexagonos OE"	norte isNil	ifTrue:[		coleccion addAll:self este obtenerComandos.		coleccion addAll:self oeste obtenerComandos.		].		coleccion addAll:self noreste obtenerComandos.	coleccion addAll:self sureste obtenerComandos.	coleccion addAll:self suroeste obtenerComandos.	coleccion addAll:self noroeste obtenerComandos.	^coleccion.</body></methods><methods><class-id>Hexagono</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.		"Hexagonos NS"	este isNil	ifTrue:[		coleccion addAll:self norte obtenerComandos.		coleccion addAll:self sur obtenerComandos.		].		"Hexagonos OE"	norte isNil	ifTrue:[		coleccion addAll:self este obtenerComandos.		coleccion addAll:self oeste obtenerComandos.		].		coleccion addAll:self noreste obtenerComandos.	coleccion addAll:self sureste obtenerComandos.	coleccion addAll:self suroeste obtenerComandos.	coleccion addAll:self noroeste obtenerComandos.	^coleccion.</body></methods><methods><class-id>Forma</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerComandos">obtenerComandos	| coleccion |	coleccion:=List new.	coleccion addAll:self norte obtenerComandos.	coleccion addAll:self sur obtenerComandos.	coleccion addAll:self este obtenerComandos.	coleccion addAll:self oeste obtenerComandos.	^coleccion.</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.</do-it><do-it>	ns:=juego netscreen.ns personajes size</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.(ns personajes at:1) nombre</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.(ns personajes at:1) nombre</do-it><do-it>ns personajes size</do-it><remove-selector><class-id>Llave</class-id> <selector>generarComandos</selector></remove-selector><do-it>Llave organization removeCategory: #operaciones</do-it><comment><class-id>Llave</class-id><body>generarComandos	| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></comment><methods><class-id>Llave</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4|	hab1:=juego getHabId:1.	hab2:=juego getHabId:2.		hab3:=juego getHabId:3.		hab4:=juego getHabId:4.			self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).	self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).		self assert:(hab3 forma noreste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego laberinto getHabId:1.	hab2:=juego getHabId:2.		hab3:=juego getHabId:3.		hab4:=juego getHabId:4.		hab5:=juego getHabId:5.	hab6:=juego getHabId:6.	hab7:=juego getHabId:7.	hab8:=juego getHabId:8.	hab9:=juego getHabId:9.	hab10:=juego getHabId:10.	self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma sureste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma noreste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma sureste class = Puerta).		self assert:(hab4 forma noroeste class = Puerta).			self assert:(hab4 forma sureste class = Puerta).	self assert:(hab5 forma noroeste class = Puerta).	self assert:(hab5 forma noreste class = Puerta).	self assert:(hab5 forma sureste class = Puerta).	self assert:(hab5 forma sur class = Puerta).	self assert:(hab6 forma suroeste class = Puerta).	self assert:(hab6 forma sur class = Puerta).	self assert:(hab7 forma noroeste class = Puerta).	self assert:(hab7 forma norte class = Puerta).	self assert:(hab7 forma suroeste class = Puerta).	self assert:(hab8 forma norte class = Puerta).	self assert:(hab8 forma noreste class = Puerta).	self assert:(hab8 forma suroeste class = Puerta).	self assert:(hab9 forma noreste class = Puerta).	self assert:(hab9 forma noroeste class = Puerta).	self assert:(hab10 forma sureste class = Puerta).	self assert:(hab10 forma noroeste class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego laberinto getHabId:1.	hab2:=juego laberinto getHabId:2.		hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.		hab5:=juego laberinto getHabId:5.	hab6:=juego laberinto getHabId:6.	hab7:=juego laberinto getHabId:7.	hab8:=juego laberinto getHabId:8.	hab9:=juego laberinto getHabId:9.	hab10:=juego laberinto getHabId:10.	self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma sureste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma noreste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma sureste class = Puerta).		self assert:(hab4 forma noroeste class = Puerta).			self assert:(hab4 forma sureste class = Puerta).	self assert:(hab5 forma noroeste class = Puerta).	self assert:(hab5 forma noreste class = Puerta).	self assert:(hab5 forma sureste class = Puerta).	self assert:(hab5 forma sur class = Puerta).	self assert:(hab6 forma suroeste class = Puerta).	self assert:(hab6 forma sur class = Puerta).	self assert:(hab7 forma noroeste class = Puerta).	self assert:(hab7 forma norte class = Puerta).	self assert:(hab7 forma suroeste class = Puerta).	self assert:(hab8 forma norte class = Puerta).	self assert:(hab8 forma noreste class = Puerta).	self assert:(hab8 forma suroeste class = Puerta).	self assert:(hab9 forma noreste class = Puerta).	self assert:(hab9 forma noroeste class = Puerta).	self assert:(hab10 forma sureste class = Puerta).	self assert:(hab10 forma noroeste class = Puerta).</body></methods><methods><class-id>Habitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	id := nil.	orientaciones := List new.	ocupantes := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ElementoContenedor</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		hijos := List new.		^self</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaPc |	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:3.</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:3.</do-it><comment><class-id>EstadoSaludVivo</class-id><body>EstadoSaludVivo.Instance Variables:	vidas	&lt;ArithmeticValue | CPointer | Date | Duration | Set | Timestamp&gt;	description of vidas</body></comment><comment><class-id>EstadoSaludMuerto</class-id><body>EstadoSaludMuerto.</body></comment><remove-selector><class-id>EstadoSaludMuerto</class-id> <selector>atadoPor:soy:</selector></remove-selector><remove-selector><class-id>EstadoSaludVivo</class-id> <selector>atadoPor:soy:</selector></remove-selector><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 3, 2015' '9:04:17 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 21:04:17 on 3 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 3, 2015' '9:04:19 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 21:04:19 on 3 de mayo de 2015."</do-it><comment><class-id>ComandoCoger</class-id><body>ComandoCoger coger elementos.</body></comment><comment><class-id>ComandoDejar</class-id><body>ComandoDejar dejar un elemento que se pueda coger.</body></comment><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirArmario:">construirArmario:idHab	| hab armario |	hab:=self laberinto getHabId:idHab.	armario:= Armario new.	armario nombre:'Armario'.	armario posicion:hab.	armario comandos add:(ComandoAbrir new receptor:armario).	hab add:armario.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirCofre:">construirCofre:idHab	| hab cofre |	hab:=self laberinto getHabId:idHab.	cofre:= Cofre new.	cofre nombre:'Cofre'.	cofre posicion:hab.	cofre comandos add:(ComandoAbrir new receptor:cofre).	hab add:cofre.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirSable:">construirSable:idHab	| hab sable |	hab:=self laberinto getHabId:idHab.	sable:= SableLaser new.	sable nombre:'Sable laser'.	sable posicion:hab.	sable comandos add:(ComandoCoger new receptor:sable).	hab add:sable.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerBichos">obtenerBichos		| puertas |	puertas:=List new.	self ocupantes do:[:each | 		((each obtenerSuperficieDe:self forma) class) = Puerta		ifTrue:[puertas add:(each obtenerSuperficieDe:self forma)]].	^puertas.</body></methods><methods><class-id>SableLaser</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| ocupantes |		ocupantes:=List new.	ocupantes:=self posicion ocupantes select:[:each | each class ~= self class].</body></methods><methods><class-id>SableLaser</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| bichos |		bichos:=List new.	bichos:=self posicion ocupantes select:[:each | each class = Bicho].	bichos do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></methods><methods><class-id>ComandoDejar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="quitarEquipamiento:">quitarEquipamiento:unElemento		self equipamiento remove:unElemento.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="dejar:comando:">dejar:unPersonaje comando:unComando		self quitarComado:unComando.	self agregarComando:(ComandoCoger new receptor:self).	self generarComandos.	unPersonaje quitarEquipamiento:self.	unPersonaje posicion quitarElemento:self.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando		self quitarComado:unComando.	self agregarComando:(ComandoDejar new receptor:self).	self generarComandos.	unPersonaje agregarEquipamiento:self.	unPersonaje posicion quitarElemento:self.</body></methods><methods><class-id>SableLaser</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| bichos |		bichos:=List new.	bichos:=self posicion obtenerBichos.	bichos do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerBichos">obtenerBichos		| bichos |	bichos:=List new.	bichos:=self ocupantes select:[:each | each class = Bicho].	^bichos.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unHijo	self hijos add:unHijo.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="add:">add:unHijo	self hijos add:unHijo.	self obtenerComandos.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="dejar:comando:">dejar:unPersonaje comando:unComando		self quitarComado:unComando.	self agregarComando:(ComandoCoger new receptor:self).	self generarComandos.	unPersonaje quitarEquipamiento:self.	unPersonaje posicion add:self.</body></methods><methods><class-id>ComandoDejar</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Dejar--&gt;',self receptor printString.</body></methods><methods><class-id>ComandoDejar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor dejar:unPersonaje comando:self.	unPersonaje actualizarComandos.</body></methods><methods><class-id>ComandoUsar</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Abrir-&gt;',self receptor nombre.</body></methods><methods><class-id>ComandoUsar</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Usar-&gt;',self receptor nombre.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="dejar:comando:">dejar:unPersonaje comando:unComando		self quitarComado:unComando.	self agregarComando:(ComandoCoger new receptor:self).	unPersonaje quitarEquipamiento:self.	unPersonaje posicion add:self.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="dejar:comando:">dejar:unPersonaje comando:unComando		self comandos:List new.	self agregarComando:(ComandoCoger new receptor:self).	unPersonaje quitarEquipamiento:self.	unPersonaje posicion add:self.</body></methods><class><name>Pocion</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vidas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Pocion</class-id> <category>accessing</category><body package="Laberinto" selector="vidas">vidas	^vidas</body></methods><methods><class-id>Pocion</class-id> <category>accessing</category><body package="Laberinto" selector="vidas:">vidas: anObject	vidas := anObject</body></methods><methods><class-id>Pocion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	vidas := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	" *** This method was defined by ElementoHoja as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Pocion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	vidas := 1.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	self agregarComando:(ComandoUsar new receptor:self).</body></methods><methods><class-id>ComandoUsar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		</body></methods><methods><class-id>ComandoUsar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor usarObjeto</body></methods><methods><class-id>ComandoUsar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor usarObjeto.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="usarObjeto">usarObjeto	</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="usarObjeto">usarObjeto	estado usarLlave.</body></methods><methods><class-id>EstadoAbierta</class-id> <category>operaciones</category><body package="Laberinto" selector="usarLlave">usarLlave	</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="usarObjeto">usarObjeto	estado usarLlaveSobrePuerta:self.</body></methods><remove-selector><class-id>Puerta</class-id> <selector>abierta</selector></remove-selector><class><name>Puerta</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 h2 estado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="abrir">abrir	self estado:EstadoAbierta new.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="cerrar">cerrar	self estado:EstadoCerrada new.</body></methods><remove-selector><class-id>EstadoAbierta</class-id> <selector>usarLlave</selector></remove-selector><methods><class-id>EstadoAbierta</class-id> <category>operaciones</category><body package="Laberinto" selector="usarLlaveSobrePuerta:">usarLlaveSobrePuerta:unaPuerta	unaPuerta cerrar.</body></methods><methods><class-id>EstadoCerrada</class-id> <category>operaciones</category><body package="Laberinto" selector="usarLlaveSobrePuerta:">usarLlaveSobrePuerta:unaPuerta	unaPuerta abrir.</body></methods><methods><class-id>EstadoCerrada</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:puerta:">entrar: alguien puerta:unaPuerta	Transcript show:unaPuerta nombre,' esta cerrada';cr.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="abrir">abrir	self estado:EstadoAbierta new.	Transcript show:self nombre,' ha sido abierta';cr.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="cerrar">cerrar	self estado:EstadoCerrada new.	Transcript show:self nombre,' ha sido cerrada';cr.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="terminarBicho:">terminarBicho:unNum	| proceso |	proceso:=procBicho at:unNum ifAbsent:[nil].	proceso isNil ifFalse:[		proceso terminate.		Transcript show:'Muere el bicho ',unNum printString;cr.		].	</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 4, 2015' '6:17:44 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 06:17:44 on 4 de mayo de 2015."</do-it><methods><class-id>ComandoUsar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor usarObjeto.	unPersonaje actualizarComandos.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 4, 2015' '6:26:21 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 06:26:21 on 4 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 4, 2015' '6:26:26 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 06:26:26 on 4 de mayo de 2015."</do-it><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos:">generarComandos:unPersonaje	self subclassResponsibility.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando		self quitarComado:unComando.	self agregarComando:(ComandoDejar new receptor:self).	self generarComandos:unPersonaje.	unPersonaje agregarEquipamiento:self.	unPersonaje posicion quitarElemento:self.</body></methods><methods><class-id>Llave</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos:">generarComandos:unPersonaje	| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></methods><remove-selector><class-id>Llave</class-id> <selector>generarComandos</selector></remove-selector><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos:">generarComandos:unPersonaje	| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></methods><remove-selector><class-id>Pocion</class-id> <selector>generarComandos</selector></remove-selector><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos:">generarComandos:unPersonaje	self agregarComando:(ComandoUsar new receptor:unPersonaje).</body></methods><comment><class-id>Pocion</class-id><body>Pocion permite a un personaje obtener vidas.Instance Variables:	vidas	&lt;SmallInteger&gt;	description of vidas</body></comment><comment><class-id>Pocion</class-id><body>Pocion permite a un personaje recuperar vidas.Instance Variables:	vidas	&lt;SmallInteger&gt;	description of vidas</body></comment><comment><class-id>Pocion</class-id><body>Pocion permite a un personaje recuperar vidas.Instance Variables:	vidas	&lt;SmallInteger&gt;	description of vidas</body></comment><methods><class-id>SableLaser</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos:">generarComandos:unPersonaje		| bichos |		bichos:=List new.	bichos:=self posicion obtenerBichos.	bichos do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></methods><remove-selector><class-id>SableLaser</class-id> <selector>generarComandos</selector></remove-selector><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="usarObjeto">usarObjeto</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="usarObjeto">usarObjeto	</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="usarObjeto">usarObjeto	self estadoSalud vidas:(self estadoSalud vidas + 1).</body></methods><methods><class-id>Pocion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		^self</body></methods><remove-selector><class-id>Pocion</class-id> <selector>vidas</selector></remove-selector><remove-selector><class-id>Pocion</class-id> <selector>vidas:</selector></remove-selector><do-it>Pocion organization removeCategory: #accessing</do-it><class><name>Pocion</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'.juego:= JuegoFactoryMethod new crearJuego:ruta numero:0.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'.juego:= JuegoFactoryMethod new crearJuego:ruta numero:0.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'.juego:= JuegoFactoryMethod new crearJuego:ruta numero:0.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-llave.txt'.juego:= JuegoFactoryMethod new crearJuego:ruta numero:0.</do-it><do-it>(juego laberinto getHabId:2)</do-it><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO listaArmarios listaCofres listaSables listaLlaves listaPociones </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'listaPociones'</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [listaLlaves add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 9 to:linea size) asNumber].		clave = 'cofre' ifTrue: [listaCofres add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'sable' ifTrue: [listaSables add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'pocion' ifTrue: [listaPociones add:(linea copyFrom: 8 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaPociones">listaPociones	^listaPociones</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaPociones:">listaPociones: anObject	listaPociones := anObject</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirPocion:">construirPocion:unId	| hab pocion |	hab:=self laberinto getHabId:unId.	pocion:= Llave new.	pocion nombre:'Pocion'.	pocion posicion:hab.	pocion comandos add:(ComandoCoger new receptor:pocion).	hab add:pocion.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionNS:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionEO:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	listaArmarios := List new.	listaCofres := List new.	listaSables := List new.	listaLlaves := List new.	listaPociones := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	numHabHexNS:=0.	numHabHexEO:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirPocion:">construirPocion:unId	| hab pocion |	hab:=self laberinto getHabId:unId.	pocion:= Pocion new.	pocion nombre:'Pocion'.	pocion posicion:hab.	pocion comandos add:(ComandoCoger new receptor:pocion).	hab add:pocion.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 4, 2015' '5:19:05 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:19:05 on 4 de mayo de 2015."</do-it><methods><class-id>Llave</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:nombre.</body></methods><methods><class-id>Pocion</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:self nombre.</body></methods><methods><class-id>Llave</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:self nombre.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 4, 2015' '5:21:03 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:21:03 on 4 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 4, 2015' '5:23:26 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:23:26 on 4 de mayo de 2015."</do-it><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testCofre">testCofre	| hab |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Cofre] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:5.	self deny:(hab hijos detect:[:each | each class = Cofre] ifNone:[nil]) isNil.</body></methods><class><name>LlaveMaestra</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>LlaveMaestra</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>LlaveMaestra</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos:">generarComandos:unPersonaje	" *** This method was defined by ElementoHoja as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>LlaveMaestra</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	" *** This method was defined by ElementoHoja as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>LlaveMaestra</class-id><body>LlaveMaestra</body></comment><methods><class-id>ComandoUsar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor usar:unPersonaje.	unPersonaje actualizarComandos.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="usar:">usar:unPersonaje	estado usarLlaveSobrePuerta:self.</body></methods><remove-selector><class-id>Puerta</class-id> <selector>usarObjeto</selector></remove-selector><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="usar:">usar:unPersonaje	</body></methods><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="usar:">usar:unPersonaje	unPersonaje recuperarVidas:self vidas.</body></methods><class><name>Pocion</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vidas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Pocion</class-id> <category>accessing</category><body package="Laberinto" selector="vidas">vidas	^vidas</body></methods><methods><class-id>Pocion</class-id> <category>accessing</category><body package="Laberinto" selector="vidas:">vidas: anObject	vidas := anObject</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="recuperarVidas:">recuperarVidas:numVidas	self estadoSalud vidas:(self estadoSalud vidas + numVidas).</body></methods><methods><class-id>Pocion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		vidas := 1.		^self</body></methods><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos:">generarComandos:unPersonaje	self agregarComando:(ComandoUsar new receptor:self).</body></methods><remove-selector><class-id>Personaje</class-id> <selector>usarObjeto</selector></remove-selector><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="recuperarVidas:">recuperarVidas:unaPocion	self estadoSalud vidas:(self estadoSalud vidas + unaPocion vidas).</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="recuperarVidas:">recuperarVidas:unaPocion	self estadoSalud vidas:(self estadoSalud vidas + unaPocion vidas).	self equipamiento remove:unaPocion.</body></methods><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="usar:">usar:unPersonaje	unPersonaje recuperarVidas:self.</body></methods><class><name>ParedAdyacente</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 h2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ParedAdyacente</class-id> <category>accessing</category><body package="Laberinto" selector="h1">h1	^h1</body></methods><methods><class-id>ParedAdyacente</class-id> <category>accessing</category><body package="Laberinto" selector="h1:">h1: anObject	h1 := anObject</body></methods><methods><class-id>ParedAdyacente</class-id> <category>accessing</category><body package="Laberinto" selector="h2">h2	^h2</body></methods><methods><class-id>ParedAdyacente</class-id> <category>accessing</category><body package="Laberinto" selector="h2:">h2: anObject	h2 := anObject</body></methods><methods><class-id>ParedAdyacente</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	h1 := nil.	h2 := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	" *** This method was defined by Superficie as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>ParedAdyacente</class-id><body>ParedAdyacente pared compartida por dos habitaciones.Instance Variables:	h1	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of h1	h2	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of h2</body></comment><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 5, 2015' '11:09:44 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 11:09:44 on 5 de mayo de 2015."</do-it><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien		</body></methods><class><name>ParedAdyacente</name><environment>Smalltalk</environment><super>Superficie</super><private>false</private><indexed-type>none</indexed-type><inst-vars>h1 h2 estado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>EstadoRota</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EstadoRota</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>EstadoRota class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>EstadoSinRomper</name><environment>Smalltalk</environment><super>EstadoRota</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EstadoSinRomper</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><do-it>EstadoRota organization addCategory: #operaciones</do-it><methods><class-id>EstadoRota</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:aTravesDe:">entrar:unPersonaje aTravesDe:unaPared	unaPared atravesar:unPersonaje.</body></methods><do-it>EstadoSinRomper organization addCategory: #operaciones</do-it><methods><class-id>EstadoSinRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:aTravesDe:">entrar:unPersonaje aTravesDe:unaPared	Transcript show:'No puedes atravesar esta pared'.</body></methods><comment><class-id>EstadoSinRomper</class-id><body>EstadoSinRomper la pared adyancente no está rota.</body></comment><comment><class-id>EstadoRota</class-id><body>EstadoRota la pared adyacente está rota.</body></comment><methods><class-id>ParedAdyacente</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	h1 := nil.	h2 := nil.	estado := EstadoSinRomper new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><class><name>LlaveMaestra</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visitorAbrirPuertas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>LlaveMaestra</class-id> <category>accessing</category><body package="Laberinto" selector="visitorAbrirPuertas">visitorAbrirPuertas	^visitorAbrirPuertas</body></methods><methods><class-id>LlaveMaestra</class-id> <category>accessing</category><body package="Laberinto" selector="visitorAbrirPuertas:">visitorAbrirPuertas: anObject	visitorAbrirPuertas := anObject</body></methods><class><name>LlaveMaestra</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visitorAbrirPuertas visitorCerrarPuertas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>LlaveMaestra</class-id> <category>accessing</category><body package="Laberinto" selector="visitorCerrarPuertas">visitorCerrarPuertas	^visitorCerrarPuertas</body></methods><methods><class-id>LlaveMaestra</class-id> <category>accessing</category><body package="Laberinto" selector="visitorCerrarPuertas:">visitorCerrarPuertas: anObject	visitorCerrarPuertas := anObject</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLlaveMaestra:">construirLlaveMaestra:unId	| hab llave |	hab:=self laberinto getHabId:unId.	llave:= LlaveMaestra new.	llave nombre:'Llave Maestra'.	llave posicion:hab.	llave comandos add:(ComandoCoger new receptor:llave).	hab add:llave.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLlaveMaestra:">construirLlaveMaestra:unId	| hab llave |	hab:=self laberinto getHabId:unId.	llave:= LlaveMaestra new.	llave nombre:'Llave Maestra'.	llave posicion:hab.	"llave visitorAbrirPuertas:LaberintoVisitorAbrirPuertas new.	llave visitorCerrarPuertas:LaberintoVisitorCerrarPuertas new."	llave comandos add:(ComandoCoger new receptor:llave).	hab add:llave.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO listaArmarios listaCofres listaSables listaLlaves listaPociones listaLlavesMaestras </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'listaLlavesMaestras'</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [listaLlaves add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 9 to:linea size) asNumber].		clave = 'cofre' ifTrue: [listaCofres add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'sable' ifTrue: [listaSables add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'pocion' ifTrue: [listaPociones add:(linea copyFrom: 8 to:linea size) asNumber].		clave = 'llaveMaestra' ifTrue: [listaLlavesMaestras add:(linea copyFrom: 14 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaLlavesMaestras">listaLlavesMaestras	^listaLlavesMaestras</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaLlavesMaestras:">listaLlavesMaestras: anObject	listaLlavesMaestras := anObject</body></methods><component-created><name>LaberintoVisitor</name> <type>package</type></component-created><bundle-structure><name>SolucionLaberinto</name> <structure>#(#(#package 'Laberinto') #(#package 'LaberintoBuilder') #(#package 'IteradorHabitaciones') #(#package 'JuegoLaberinto-FM') #(#package 'LaberintoGUI') #(#package 'LaberintoTest') #(#package 'LaberintoVisitor'))</structure></bundle-structure><bundle-structure><name>SolucionLaberinto</name> <structure>#(#(#package 'Laberinto') #(#package 'LaberintoBuilder') #(#package 'IteradorHabitaciones') #(#package 'JuegoLaberinto-FM') #(#package 'LaberintoGUI') #(#package 'LaberintoTest') #(#package 'LaberintoVisitor'))</structure></bundle-structure><class><name>LaberintoVisitor</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoVisitor</package></attributes></class><methods><class-id>LaberintoVisitor</class-id> <category>initialize-release</category><body package="LaberintoVisitor" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>LaberintoVisitor class</class-id> <category>instance creation</category><body package="LaberintoVisitor" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>LaberintoVisitorAbrirPuertas</name><environment>Smalltalk</environment><super>LaberintoVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoVisitor</package></attributes></class><methods><class-id>LaberintoVisitorAbrirPuertas</class-id> <category>initialize-release</category><body package="LaberintoVisitor" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>LaberintoVisitorCerrarPuertas</name><environment>Smalltalk</environment><super>LaberintoVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoVisitor</package></attributes></class><methods><class-id>LaberintoVisitorCerrarPuertas</class-id> <category>initialize-release</category><body package="LaberintoVisitor" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LaberintoVisitorCerrarPuertas</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LaberintoVisitorCerrarPuertas</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>LaberintoVisitorCerrarPuertas removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LaberintoVisitorAbrirPuertas</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>LaberintoVisitorAbrirPuertas</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>LaberintoVisitorAbrirPuertas removeFromSystem</do-it><do-it>LaberintoVisitor organization addCategory: #operaciones</do-it><methods><class-id>LaberintoVisitor</class-id> <category>operaciones</category><body package="LaberintoVisitor" selector="visitorPuerta:">visitorPuerta:unObjeto	self subclassResponsibility.</body></methods><methods><class-id>LaberintoVisitor</class-id> <category>operaciones</category><body package="LaberintoVisitor" selector="visitarPuerta:">visitarPuerta:unObjeto	self subclassResponsibility.</body></methods><remove-selector><class-id>LaberintoVisitor</class-id> <selector>visitorPuerta:</selector></remove-selector><class><name>LaberintoVisitorAbrirPuertas</name><environment>Smalltalk</environment><super>LaberintoVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoVisitor</package></attributes></class><methods><class-id>LaberintoVisitorAbrirPuertas</class-id> <category>initialize-release</category><body package="LaberintoVisitor" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>LaberintoVisitorAbrirPuertas</class-id> <category>operaciones</category><body package="LaberintoVisitor" selector="visitarPuerta:">visitarPuerta:unObjeto	" *** This method was defined by LaberintoVisitor as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>LaberintoVisitorAbrirPuertas</class-id> <category>operaciones</category><body package="LaberintoVisitor" selector="visitarPuerta:">visitarPuerta:unObjeto		unObjeto abrir.</body></methods><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:">aceptar:unVisitor	self subclassResponsibility.</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:">aceptar:unVisitor	unVisitor visitarPuerta:self.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:">aceptar:unVisitor	unVisitor visitarHabitacion:self.	self hijos do:[:each | each aceptar:unVisitor].	self orientaciones do:[:each | each aceptar:unVisitor en:self forma].</body></methods><methods><class-id>OriNorte</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	unaForma este aceptar:unVisitor.</body></methods><methods><class-id>Orientacion</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	self subclassResponsibility.</body></methods><methods><class-id>OriEste</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	unaForma este aceptar:unVisitor.</body></methods><methods><class-id>OriNorEste</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	unaForma noreste aceptar:unVisitor.</body></methods><methods><class-id>OriNorOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	unaForma noroeste aceptar:unVisitor.</body></methods><methods><class-id>OriNorte</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	unaForma norte aceptar:unVisitor.</body></methods><methods><class-id>OriOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	unaForma oeste aceptar:unVisitor.</body></methods><methods><class-id>OriSur</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	unaForma sur aceptar:unVisitor.</body></methods><methods><class-id>OriSurOeste</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	unaForma suroeste aceptar:unVisitor.</body></methods><methods><class-id>OriSurEste</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:en:">aceptar:unVisitor en:unaForma	unaForma sureste aceptar:unVisitor.</body></methods><methods><class-id>LaberintoVisitor</class-id> <category>operaciones</category><body package="LaberintoVisitor" selector="visitarHabitacion:">visitarHabitacion:unObjeto	self subclassResponsibility.</body></methods><methods><class-id>LaberintoVisitor</class-id> <category>operaciones</category><body package="LaberintoVisitor" selector="visitarHabitacion:">visitarHabitacion:unObjeto</body></methods><methods><class-id>LaberintoVisitor</class-id> <category>operaciones</category><body package="LaberintoVisitor" selector="visitarPuerta:">visitarPuerta:unObjeto</body></methods><class><name>LaberintoVisitorCerrarPuertas</name><environment>Smalltalk</environment><super>LaberintoVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoVisitor</package></attributes></class><methods><class-id>LaberintoVisitorCerrarPuertas</class-id> <category>initialize-release</category><body package="LaberintoVisitor" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><do-it>LaberintoVisitorCerrarPuertas organization addCategory: #operaciones</do-it><methods><class-id>LaberintoVisitorCerrarPuertas</class-id> <category>operaciones</category><body package="LaberintoVisitor" selector="visitarPuerta:">visitarPuerta:unObjeto		unObjeto cerrar.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLlaveMaestra:">construirLlaveMaestra:unId	| hab llave |	hab:=self laberinto getHabId:unId.	llave:= LlaveMaestra new.	llave nombre:'Llave Maestra'.	llave posicion:hab.	llave visitorAbrirPuertas:LaberintoVisitorAbrirPuertas new.	llave visitorCerrarPuertas:LaberintoVisitorCerrarPuertas new.	llave comandos add:(ComandoCoger new receptor:llave).	hab add:llave.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando		self quitarComado:unComando.	self agregarComando:(ComandoDejar new receptor:self).	self generarComandos.	unPersonaje agregarEquipamiento:self.	unPersonaje posicion quitarElemento:self.</body></methods><methods><class-id>Llave</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoUsar new receptor:each))].</body></methods><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	self agregarComando:(ComandoUsar new receptor:self).</body></methods><remove-selector><class-id>Pocion</class-id> <selector>generarComandos:</selector></remove-selector><remove-selector><class-id>Llave</class-id> <selector>generarComandos:</selector></remove-selector><remove-selector><class-id>LlaveMaestra</class-id> <selector>generarComandos:</selector></remove-selector><remove-selector><class-id>ElementoHoja</class-id> <selector>generarComandos:</selector></remove-selector><methods><class-id>LlaveMaestra</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		</body></methods><methods><class-id>LlaveMaestra</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	ComandoUsar new receptor:self.</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:">aceptar:unVisitor	self habitaciones do:[:each | each aceptar:unVisitor].</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	listaArmarios := List new.	listaCofres := List new.	listaSables := List new.	listaLlaves := List new.	listaPociones := List new.	listaLlavesMaestras := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	numHabHexNS:=0.	numHabHexEO:=0.	self iniciarCatalogo.	^self</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 5, 2015' '11:53:20 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 11:53:20 on 5 de mayo de 2015."</do-it><methods><class-id>Pared</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:">aceptar:unVisitor	unVisitor visitarPared:self.</body></methods><methods><class-id>LaberintoVisitor</class-id> <category>operaciones</category><body package="LaberintoVisitor" selector="visitarPared:">visitarPared:unObjeto</body></methods><class><name>ComandoCerrar</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoCerrar</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ComandoCerrar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	" *** This method was defined by Comando as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>ComandoCerrar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor cerrar:unPersonaje.</body></methods><methods><class-id>LlaveMaestra</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	self comandos add:(ComandoAbrir new receptor:self).	self comandos add:(ComandoCerrar new receptor:self).</body></methods><methods><class-id>LlaveMaestra</class-id> <category>operaciones</category><body package="Laberinto" selector="abrir:">abrir:unPersonaje	unPersonaje juego asignarVisitor:self visitorAbrirPuertas.</body></methods><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="aceptar:">aceptar:unVisitor</body></methods><methods><class-id>LlaveMaestra</class-id> <category>operaciones</category><body package="Laberinto" selector="cerrar:">cerrar:unPersonaje	unPersonaje juego asignarVisitor:self visitorCerrarPuertas.</body></methods><methods><class-id>JuegoLaberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarVisitor:">asignarVisitor:unVisitor	self laberinto aceptar:unVisitor</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-llave-sable-armario.txt'.</do-it><do-it>juego:= JuegoFactoryMethod new crearJuego:ruta numero:0.</do-it><do-it>juego laberinto aceptar:LaberintoVisitor new.</do-it><do-it>juego laberinto aceptar:LaberintoVisitor new.</do-it><do-it>juego laberinto aceptar:LaberintoVisitor new.</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].			^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionNS:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionEO:cont. cont:=cont+1].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ComandoCerrar</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Cerrar-&gt;',self receptor nombre.</body></methods><methods><class-id>LlaveMaestra</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:unPersonaje	unPersonaje juego asignarVisitor:self visitorAbrirPuertas.</body></methods><remove-selector><class-id>LlaveMaestra</class-id> <selector>abrir:</selector></remove-selector><class><name>DoblonesFactory</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>doblones </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>DoblonesFactory</class-id> <category>accessing</category><body package="Laberinto" selector="doblones">doblones	^doblones</body></methods><methods><class-id>DoblonesFactory</class-id> <category>accessing</category><body package="Laberinto" selector="doblones:">doblones: anObject	doblones := anObject</body></methods><methods><class-id>DoblonesFactory</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	doblones := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>DoblonesFactory class</class-id> <category>instance creation</category><body package="Laberinto" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Doblon</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars>valor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Doblon</class-id> <category>accessing</category><body package="Laberinto" selector="valor">valor	^valor</body></methods><methods><class-id>Doblon</class-id> <category>accessing</category><body package="Laberinto" selector="valor:">valor: anObject	valor := anObject</body></methods><methods><class-id>Doblon</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	valor := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Doblon</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	" *** This method was defined by ElementoHoja as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><do-it>DoblonesFactory organization addCategory: #operaciones</do-it><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="Laberinto" selector="crearDoblon">crearDoblon	</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="Laberinto" selector="iniciarDoblones">iniciarDoblones	</body></methods><methods><class-id>DoblonesFactory</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	doblones := Dictionary new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="Laberinto" selector="iniciarDoblones">iniciarDoblones		doblones at:'1' put:nil.</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="Laberinto" selector="iniciarDoblones">iniciarDoblones		doblones at:'1' put:nil.	doblones at:'5' put:nil.	doblones at:'10' put:nil.	doblones at:'20' put:nil.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 5, 2015' '12:45:49 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 12:45:49 on 5 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 5, 2015' '12:45:55 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 12:45:55 on 5 de mayo de 2015."</do-it><class><name>Martillo</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Martillo</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Martillo</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	" *** This method was defined by ElementoHoja as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="atravesar:">atravesar:alguien	| habEntrada habSalida |		alguien posicion = h1		ifTrue:[habEntrada:=self h2. habSalida:=self h1]		ifFalse:[habEntrada:=self h1. habSalida:=self h2].	habSalida salir:alguien.	habEntrada entrar:alguien.</body></methods><methods><class-id>EstadoRota</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:aTravesDe:">entrar:alguien aTravesDe:unaPared	unaPared atravesar:alguien.</body></methods><methods><class-id>EstadoSinRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:aTravesDe:">entrar:unPersonaje aTravesDe:unaPared	Transcript show:'Te topaste con una pared';cr.</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	self estado entrar:alguien aTravesDe:self.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO listaArmarios listaCofres listaSables listaLlaves listaPociones listaLlavesMaestras listaParedesAdy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'listaParedesAdy'</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [listaLlaves add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 9 to:linea size) asNumber].		clave = 'cofre' ifTrue: [listaCofres add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'sable' ifTrue: [listaSables add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'pocion' ifTrue: [listaPociones add:(linea copyFrom: 8 to:linea size) asNumber].		clave = 'llaveMaestra' ifTrue: [listaLlavesMaestras add:(linea copyFrom: 14 to:linea size) asNumber].		clave = 'paredAdyacente' ifTrue: [listaParedesAdy add:(linea copyFrom: 8 to:linea size)].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaParedesAdy">listaParedesAdy	^listaParedesAdy</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaParedesAdy:">listaParedesAdy: anObject	listaParedesAdy := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	listaArmarios := List new.	listaCofres := List new.	listaSables := List new.	listaLlaves := List new.	listaPociones := List new.	listaLlavesMaestras := List new.	listaParedesAdy := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	numHabHexNS:=0.	numHabHexEO:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [listaLlaves add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 9 to:linea size) asNumber].		clave = 'cofre' ifTrue: [listaCofres add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'sable' ifTrue: [listaSables add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'pocion' ifTrue: [listaPociones add:(linea copyFrom: 8 to:linea size) asNumber].		clave = 'llaveMaestra' ifTrue: [listaLlavesMaestras add:(linea copyFrom: 14 to:linea size) asNumber].		clave = 'paredAdyacente' ifTrue: [listaParedesAdy add:(linea copyFrom: 16 to:linea size)].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirParedAdyDe:orientacion:a:orientacion:">construirParedAdyDe:unaHab1 orientacion:or1 a:unaHab2 orientacion:or2	|pared h1 h2|	pared:= ParedAdyacente new.	pared nombre:'Pared Adyacente-',unaHab1 printString,'-',unaHab2 printString.	h1:= laberinto getHabId:unaHab1.	h2:= laberinto getHabId:unaHab2.	pared h1:h1.	pared h2:h2.		pared comandos add:(ComandoAbrir new receptor:pared).		h1 ponerEn:or1 superficie:pared.	h2 ponerEn:or2 superficie:pared.</body></methods><class><name>ComandoRomper</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoRomper</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	" *** This method was defined by Comando as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirParedAdyDe:orientacion:a:orientacion:">construirParedAdyDe:unaHab1 orientacion:or1 a:unaHab2 orientacion:or2	|pared h1 h2|	pared:= ParedAdyacente new.	pared nombre:'Pared Adyacente-',unaHab1 printString,'-',unaHab2 printString.	h1:= laberinto getHabId:unaHab1.	h2:= laberinto getHabId:unaHab2.	pared h1:h1.	pared h2:h2.		h1 ponerEn:or1 superficie:pared.	h2 ponerEn:or2 superficie:pared.</body></methods><methods><class-id>Martillo</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		comandos add:(ComandoRomper new receptor).</body></methods><methods><class-id>Martillo</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoRomper new receptor:each))].	comandos add:(ComandoRomper new receptor).</body></methods><methods><class-id>Martillo</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoRomper new receptor:each))].</body></methods><methods><class-id>Martillo</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:self nombre.</body></methods><methods><class-id>Martillo</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| paredes |		paredes:=self posicion obtenerParedesAdy.	paredes do:[:each | self agregarComando:((ComandoRomper new receptor:each))].</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerParedesAdy">obtenerParedesAdy		| paredes |	paredes:=List new.	self orientaciones do:[:each | 		((each obtenerSuperficieDe:self forma) class) = ParedAdyacente		ifTrue:[paredes add:(each obtenerSuperficieDe:self forma)]].	^paredes.</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="romper">romper	self estado:EstadoRota new.</body></methods><methods><class-id>ParedAdyacente</class-id> <category>accessing</category><body package="Laberinto" selector="estado">estado	^estado</body></methods><methods><class-id>ParedAdyacente</class-id> <category>accessing</category><body package="Laberinto" selector="estado:">estado: anObject	estado := anObject</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO listaArmarios listaCofres listaSables listaLlaves listaPociones listaLlavesMaestras listaParedesAdy listaMartillos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'listaMartillos'</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [listaLlaves add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 9 to:linea size) asNumber].		clave = 'cofre' ifTrue: [listaCofres add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'sable' ifTrue: [listaSables add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'pocion' ifTrue: [listaPociones add:(linea copyFrom: 8 to:linea size) asNumber].		clave = 'llaveMaestra' ifTrue: [listaLlavesMaestras add:(linea copyFrom: 14 to:linea size) asNumber].		clave = 'paredAdyacente' ifTrue: [listaParedesAdy add:(linea copyFrom: 16 to:linea size)].		clave = 'martillo' ifTrue: [listaMartillos add:(linea copyFrom: 10 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaMartillos">listaMartillos	^listaMartillos</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaMartillos:">listaMartillos: anObject	listaMartillos := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	listaArmarios := List new.	listaCofres := List new.	listaSables := List new.	listaLlaves := List new.	listaPociones := List new.	listaLlavesMaestras := List new.	listaParedesAdy := List new.	listaMartillos := List new.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	numHabHexNS:=0.	numHabHexEO:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].	listaMartillos do:[:each | builder construirPocion:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].	listaMartillos do:[:each | builder construirMartillo:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirMartillo:">construirMartillo:unId	| hab martillo |	hab:=self laberinto getHabId:unId.	martillo:= Martillo new.	martillo nombre:'Martillo'.	martillo posicion:hab.	martillo comandos add:(ComandoCoger new receptor:martillo).	hab add:martillo.</body></methods><methods><class-id>ComandoRomper</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Romper--&gt;',self receptor printString.</body></methods><class><name>ComandoAtravesar</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoAtravesar</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ComandoAtravesar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	" *** This method was defined by Comando as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>ComandoAtravesar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor entrar:unPersonaje.</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	self estado entrar:alguien aTravesDe:self.	Transcript show:self nombre,' esta rota';cr.</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien	self estado entrar:alguien aTravesDe:self.	</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="romper">romper	self estado:EstadoRota new.	</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="romper">romper	self estado:EstadoRota new.	Transcript show:self nombre,' esta rota';cr.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirParedAdyDe:orientacion:a:orientacion:">construirParedAdyDe:unaHab1 orientacion:or1 a:unaHab2 orientacion:or2	|pared h1 h2|	pared:= ParedAdyacente new.	pared nombre:'Pared Adyacente-',unaHab1 printString,'-',unaHab2 printString.	h1:= laberinto getHabId:unaHab1.	h2:= laberinto getHabId:unaHab2.	pared h1:h1.	pared h2:h2.		pared comandos add:(ComandoAtravesar new receptor:pared).		h1 ponerEn:or1 superficie:pared.	h2 ponerEn:or2 superficie:pared.</body></methods><methods><class-id>ComandoAtravesar</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Atravesar-&gt;',self receptor nombre.</body></methods><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.	unPersonaje</body></methods><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerParedesAdy">obtenerParedesAdy		| paredes |	paredes:=List new.	self orientaciones do:[:each | 		((each obtenerSuperficieDe:self forma) class) = ParedAdyacente and true		ifTrue:[paredes add:(each obtenerSuperficieDe:self forma)]].	^paredes.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerParedesAdy">obtenerParedesAdy		| paredes |	paredes:=List new.	self orientaciones do:[:each | 		((each obtenerSuperficieDe:self forma) class) = ParedAdyacente and: (((each obtenerSuperficieDe:self forma) class) estado = EstadoSinRomper)		ifTrue:[paredes add:(each obtenerSuperficieDe:self forma)]].	^paredes.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerParedesAdy">obtenerParedesAdy		| paredes |	paredes:=List new.	self orientaciones do:[:each | 		(((each obtenerSuperficieDe:self forma) class) = ParedAdyacente) and: (((each obtenerSuperficieDe:self forma) class) estado = EstadoSinRomper)		ifTrue:[paredes add:(each obtenerSuperficieDe:self forma)]].	^paredes.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerParedesAdy">obtenerParedesAdy		| paredes |	paredes:=List new.	self orientaciones do:[:each | 		((each obtenerSuperficieDe:self forma) class) = ParedAdyacente		ifTrue:[paredes add:(each obtenerSuperficieDe:self forma)]].	^paredes.</body></methods><methods><class-id>Martillo</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| paredes |		paredes:=self posicion obtenerParedesAdy.	paredes do:[:each | 		(each estado) class = EstadoSinRomper		ifTrue:[self agregarComando:(ComandoRomper new receptor:each)]].</body></methods><methods><class-id>ComandoRomper</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Romper--&gt;',self receptor nombre.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 7, 2015' '2:20:03 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 14:20:03 on 7 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 7, 2015' '2:20:06 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 14:20:06 on 7 de mayo de 2015."</do-it><component_definition_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>LaberintoBuilder</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>doblones</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>LaberintoBuilder</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>doblones</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>crearDoblon</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>LaberintoBuilder</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>crearDoblon</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>iniciarDoblones</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>LaberintoBuilder</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>iniciarDoblones</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>LaberintoBuilder</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>initialize</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>doblones:</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>LaberintoBuilder</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>false</meta> <selector>doblones:</selector> <definitionChange>added</definitionChange></component_selector_change><component_selector_change><name>Laberinto</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>removed</definitionChange></component_selector_change><component_selector_change><name>LaberintoBuilder</name> <type>package</type><definitionName>Root.Smalltalk.DoblonesFactory</definitionName> <meta>true</meta> <selector>new</selector> <definitionChange>added</definitionChange></component_selector_change><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.	unPersonaje actualizarComandos.</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="romper:">romper:unComando	self estado:EstadoRota new.	Transcript show:self nombre,' esta rota';cr.</body></methods><remove-selector><class-id>ParedAdyacente</class-id> <selector>romper:</selector></remove-selector><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.	unPersonaje comandos remove:self.</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="crearDoblon:">crearDoblon:unNum	(self doblones at:unNum) isNil	ifTrue:[doblones at:unNum put:(Doblon new valor:unNum; nombre:'Doblon-',unNum printString)].		^self doblones at:unNum.</body></methods><remove-selector><class-id>DoblonesFactory</class-id> <selector>crearDoblon</selector></remove-selector><class><name>Cofre</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion factory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirCofre:">construirCofre:idHab	| hab cofre factory |	hab:=self laberinto getHabId:idHab.	cofre:= Cofre new.	factory:= DoblonesFactory default.	cofre nombre:'Cofre'.	cofre posicion:hab.	cofre factory:factory.	cofre comandos add:(ComandoAbrir new receptor:cofre).	cofre meterDoblones:155.	hab add:cofre.</body></methods><shared-variable><name>UnicaInstancia</name><environment>DoblonesFactory</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>LaberintoBuilder</package></attributes></shared-variable><do-it>DoblonesFactory addClassVarName: #UnicaInstancia</do-it><methods><class-id>DoblonesFactory class</class-id> <category>instance creation</category><body package="LaberintoBuilder" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new].	^UnicaInstancia</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirCofre:">construirCofre:idHab	| hab cofre factory |	hab:=self laberinto getHabId:idHab.	cofre:= Cofre new.	factory:= DoblonesFactory default.	cofre nombre:'Cofre'.	cofre posicion:hab.	cofre factory:factory.	cofre comandos add:(ComandoAbrir new receptor:cofre).	"cofre meterDoblones:155."	hab add:cofre.</body></methods><methods><class-id>DoblonesFactory class</class-id> <category>instance creation</category><body package="LaberintoBuilder" selector="default">default		UnicaInstancia isNil ifTrue: [UnicaInstancia := super new initialize].	^UnicaInstancia</body></methods><methods><class-id>DoblonesFactory</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	doblones := Dictionary new.	self iniciarDoblones.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>DoblonesFactory</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		doblones := Dictionary new.	self iniciarDoblones.		^self</body></methods><methods><class-id>DoblonesFactory class</class-id> <category>instance creation</category><body package="LaberintoBuilder" selector="new">new</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirCofre:">construirCofre:idHab	| hab cofre factory |	hab:=self laberinto getHabId:idHab.	cofre:= Cofre new.	factory:= DoblonesFactory default.	cofre nombre:'Cofre'.	cofre posicion:hab.	cofre factory:factory.	cofre comandos add:(ComandoAbrir new receptor:cofre).	cofre meterDoblones:155.	hab add:cofre.</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="meterDoblones:">meterDoblones:unNum	| n20 resto n10 n5 n1 |		n20:= unNum / 20.	1 to:n20 do:[:each | self hijos add: (self factory crearDoblon:20)].		</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="factory">factory	^factory</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="factory:">factory: anObject	factory := anObject</body></methods><methods><class-id>Cofre</class-id> <category>accessing</category><body package="Laberinto" selector="meterDoblones:">meterDoblones:unNum	| n20 resto n10 n5 n1 |		n20:= unNum / 20.	1 to:n20 do:[:each | self hijos add: (self factory crearDoblon:20)].		resto:= unNum \\ 20.	n10:= resto / 10.	1 to:n10 do:[:each | self hijos add: (self factory crearDoblon:10)].		resto:= unNum \\ 10.	n5:= resto / 5.	1 to:n5 do:[:each | self hijos add: (self factory crearDoblon:5)].		resto:= unNum \\ 5.	n1:= resto / 1.	1 to:n1 do:[:each | self hijos add: (self factory crearDoblon:1)].</body></methods><do-it>Cofre organization addCategory: #operaciones</do-it><do-it>Cofre classifySymbol: #meterDoblones: under: #operaciones</do-it><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="meterDoblones:">meterDoblones:unNum	| n20 resto n10 n5 n1 |		n20:= unNum / 20.	1 to:n20 do:[:each | self hijos add: (self factory crearDoblon:'20')].		resto:= unNum \\ 20.	n10:= resto / 10.	1 to:n10 do:[:each | self hijos add: (self factory crearDoblon:'10')].		resto:= unNum \\ 10.	n5:= resto / 5.	1 to:n5 do:[:each | self hijos add: (self factory crearDoblon:'5')].		resto:= unNum \\ 5.	n1:= resto / 1.	1 to:n1 do:[:each | self hijos add: (self factory crearDoblon:'1')].</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien		self comandos add:(ComandoCoger new receptor:self).</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando	unPersonaje agregarEquipamiento:(self hijos).</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien		self comandos add:(ComandoCoger new receptor:self).	"unPersonaje posicion quitarComado:unComando."</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar:alguien		"self quitarComando:unComando."	self agregarComando:(ComandoCoger new receptor:self).	"unPersonaje posicion quitarComado:unComando."	</body></methods><methods><class-id>ComandoAbrir</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor entrar:unPersonaje comando:self.</body></methods><methods><class-id>ComandoAbrir</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor entrar:unPersonaje comando:self.	unPersonaje actualizarComandos.</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:comando:">entrar:alguien comando:unComando		"self quitarComando:unComando."	self agregarComando:(ComandoCoger new receptor:self).	"unPersonaje posicion quitarComado:unComando."</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:comando:">entrar:alguien comando:unComando		self quitarComando:unComando.	self agregarComando:(ComandoCoger new receptor:self).</body></methods><methods><class-id>ElementoMapa</class-id> <category>operaciones</category><body package="Laberinto" selector="quitarComando:">quitarComando:unComando	self comandos remove:unComando.</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando	self quitarComando:unComando.	self vaciarCofre.	unPersonaje agregarEquipamiento:(self hijos).</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="vaciarCofre">vaciarCofre	hijos := List new.</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando	self quitarComando:unComando.	unPersonaje agregarEquipamiento:(self hijos).		self vaciarCofre.</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando	self quitarComando:unComando.	self hijos do:[:each | unPersonaje agregarEquipamiento:each].		self vaciarCofre.</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="coger:comando:">coger:unPersonaje comando:unComando	self quitarComando:unComando.	self hijos do:[:each | unPersonaje agregarEquipamiento:each].	unPersonaje calcularRiqueza.		self vaciarCofre.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularRiqueza">calcularRiqueza</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:comando:">entrar: alguien comando:unComando		self estado entrar:alguien puerta:self.</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:comando:">entrar:alguien comando:unComando	self estado entrar:alguien aTravesDe:self.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="calcularRiqueza">calcularRiqueza	| total |	total := 0.	self equipamiento do:[:each | total:=total + each valor].		self riqueza:total.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>valor</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>valor</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Doblon</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><class><name>ElementoHoja</name><environment>Smalltalk</environment><super>ElementoMapa</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hijos posicion valor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ElementoHoja</class-id> <category>accessing</category><body package="Laberinto" selector="valor:">valor: anObject	valor := anObject</body></methods><remove-selector><class-id>Doblon</class-id> <selector>valor:</selector></remove-selector><methods><class-id>ElementoHoja</class-id> <category>accessing</category><body package="Laberinto" selector="valor">valor	^valor</body></methods><remove-selector><class-id>Doblon</class-id> <selector>valor</selector></remove-selector><methods><class-id>ElementoHoja</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	hijos := nil.	valor := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Doblon</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		^self</body></methods><methods><class-id>Cofre</class-id> <category>operaciones</category><body package="Laberinto" selector="meterDoblones:">meterDoblones:unNum	| n20 resto n10 n5 n1 |		n20:= unNum / 20.	1 to:n20 do:[:each | self hijos add: (self factory crearDoblon:20)].		resto:= unNum \\ 20.	n10:= resto / 10.	1 to:n10 do:[:each | self hijos add: (self factory crearDoblon:10)].		resto:= unNum \\ 10.	n5:= resto / 5.	1 to:n5 do:[:each | self hijos add: (self factory crearDoblon:5)].		resto:= unNum \\ 5.	n1:= resto / 1.	1 to:n1 do:[:each | self hijos add: (self factory crearDoblon:1)].</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="crearDoblon:">crearDoblon:unNum	(self doblones at:unNum) isNil	ifTrue:[doblones at:(unNum printString) put:(Doblon new valor:unNum; nombre:'Doblon-',unNum printString)].		^self doblones at:unNum.</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="iniciarDoblones">iniciarDoblones		doblones at:1 put:nil.	doblones at:5 put:nil.	doblones at:10 put:nil.	doblones at:20 put:nil.</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="crearDoblon:">crearDoblon:unNum	(self doblones at:unNum) isNil	ifTrue:[doblones at:unNum put:(Doblon new valor:unNum; nombre:'Doblon-',unNum printString)].		^self doblones at:unNum.</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="crearDoblon:">crearDoblon:unNum	(self doblones at:unNum) isNil	ifTrue:[self doblones at:unNum put:(Doblon new valor:unNum; nombre:'Doblon-',unNum printString)].		^self doblones at:unNum.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 7, 2015' '5:25:20 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:25:20 on 7 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 7, 2015' '5:25:22 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 17:25:22 on 7 de mayo de 2015."</do-it><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="crearDoblon:">crearDoblon:unNum	(self doblones at:unNum asString) isNil	ifTrue:[self doblones at:unNum put:(Doblon new valor:unNum; nombre:'Doblon-',unNum printString)].		^self doblones at:unNum.</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="crearDoblon:">crearDoblon:unNum	(self doblones at:(unNum asString)) isNil	ifTrue:[self doblones at:unNum put:(Doblon new valor:unNum; nombre:'Doblon-',unNum printString)].		^self doblones at:unNum.</body></methods><methods><class-id>DoblonesFactory</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="crearDoblon:">crearDoblon:unNum	(self doblones at:unNum) isNil	ifTrue:[self doblones at:unNum put:(Doblon new valor:unNum; nombre:'Doblon-',unNum printString)].		^self doblones at:unNum.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UnicaInstancia</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UnicaInstancia</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>#{DoblonesFactory.UnicaInstancia} removeFromSystem</do-it><do-it>DoblonesFactory asNameSpace organization removeCategory: #'As yet unclassified'</do-it><methods><class-id>PanelControl class</class-id> <category>interface specs</category><body package="LaberintoGUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 769 330 1457 809 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 42 0 60 0 ) 					#name: #Label1 					#label: 'Nombre usuario' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 99 0 ) 					#name: #Label2 					#label: 'Número de habitación' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 348 0 46 0 ) 					#name: #Label3 					#label: 'Lista de posibles comandos' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 348 0 83 0 588 0 381 0 ) 					#name: #List1 					#model: #listaComandos 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #ejecutarComando ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 157 0 60 0 308 0 82 0 ) 					#name: #InputField1 					#model: #nombreUsuario ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 196 0 98 0 308 0 117 0 ) 					#name: #InputField2 					#model: #'numeroHabitacion id' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 43 0 136 0 ) 					#name: #Label4 					#label: 'Vidas' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 135 0 206 0 156 0 ) 					#name: #InputField3 					#model: #vidas 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 45 0 170 0 ) 					#name: #Label5 					#label: 'Riqueza' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 106 0 168 0 206 0 189 0 ) 					#name: #InputField4 					#model: #riqueza 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 44 0 200 0 ) 					#name: #Label6 					#label: 'Equipamiento conseguido:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 45 0 233 0 232 0 430 0 ) 					#name: #List2 					#model: #listaEquipamiento 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><class><name>PanelControl</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numeroHabitacion listaComandos nombreUsuario usuario vidas listaEquipamiento riqueza </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoGUI</package></attributes></class><do-it>Smalltalk defineClass: #PanelControl	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'numeroHabitacion listaComandos nombreUsuario usuario vidas listaEquipamiento riqueza  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="riqueza">riqueza	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^riqueza isNil		ifTrue:			[riqueza := 0 asValue]		ifFalse:			[riqueza]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="vidas">vidas	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^vidas isNil		ifTrue:			[vidas := 0 asValue]		ifFalse:			[vidas]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="numeroHabitacion">numeroHabitacion	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numeroHabitacion isNil		ifTrue:			[numeroHabitacion := nil asValue]		ifFalse:			[numeroHabitacion]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="nombreUsuario">nombreUsuario	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nombreUsuario isNil		ifTrue:			[nombreUsuario := String new asValue]		ifFalse:			[nombreUsuario]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaEquipamiento">listaEquipamiento	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaEquipamiento isNil		ifTrue:			[listaEquipamiento := SelectionInList new]		ifFalse:			[listaEquipamiento]</body></methods><methods><class-id>PanelControl</class-id> <category>aspects</category><body package="LaberintoGUI" selector="listaComandos">listaComandos	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listaComandos isNil		ifTrue:			[listaComandos := SelectionInList new]		ifFalse:			[listaComandos]</body></methods><methods><class-id>Personaje</class-id> <category>accessing</category><body package="Laberinto" selector="riqueza:">riqueza: anObject	riqueza := anObject.	self changed:#riqueza.</body></methods><methods><class-id>Doblon</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:self nombre.</body></methods><class><name>ComandoUsar</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objeto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoUsar</class-id> <category>accessing</category><body package="Laberinto" selector="objeto">objeto	^objeto</body></methods><methods><class-id>ComandoUsar</class-id> <category>accessing</category><body package="Laberinto" selector="objeto:">objeto: anObject	objeto := anObject</body></methods><methods><class-id>ComandoUsar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor usar:unPersonaje objeto:self objeto.	unPersonaje actualizarComandos.</body></methods><methods><class-id>Llave</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:((ComandoUsar new receptor:each;objeto:self))].</body></methods><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="usar:objeto:">usar:unPersonaje objeto:unaPocion	unPersonaje recuperarVidas:self.</body></methods><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="usar:objeto:">usar:unPersonaje objeto:unaPocion	unPersonaje recuperarVidas:self con:unaPocion.</body></methods><methods><class-id>Pocion</class-id> <category>operaciones</category><body package="Laberinto" selector="usar:objeto:">usar:unPersonaje objeto:unaPocion	unPersonaje recuperarVidas:self.</body></methods><methods><class-id>Martillo</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| paredes |		paredes:=self posicion obtenerParedesAdy.	paredes do:[:each | 		(each estado) class = EstadoSinRomper		ifTrue:[self agregarComando:(ComandoRomper new receptor:each; objeto:self)]].</body></methods><methods><class-id>Llave</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:(ComandoUsar new receptor:each)].</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="usar:objeto:">usar:unPersonaje objeto:unaLlave	estado usarLlaveSobrePuerta:self.</body></methods><methods><class-id>ParedAdyacente</class-id> <category>operaciones</category><body package="Laberinto" selector="usar:">usar:unPersonaje	self estado:EstadoRota new.	Transcript show:self nombre,' esta rota';cr.</body></methods><class><name>ComandoRomper</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars>martillo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><do-it>ComandoRomper addInstVarName: 'martillo'</do-it><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.	unPersonaje quitarEquipamiento:martillo.	unPersonaje actualizarComandos.</body></methods><methods><class-id>ComandoRomper</class-id> <category>accessing</category><body package="Laberinto" selector="martillo">martillo	^martillo</body></methods><methods><class-id>ComandoRomper</class-id> <category>accessing</category><body package="Laberinto" selector="martillo:">martillo: anObject	martillo := anObject</body></methods><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.	unPersonaje quitarEquipamiento:self martillo.	unPersonaje actualizarComandos.</body></methods><methods><class-id>ComandoUsar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	receptor usar:unPersonaje.	unPersonaje actualizarComandos.</body></methods><remove-selector><class-id>ComandoUsar</class-id> <selector>objeto:</selector></remove-selector><remove-selector><class-id>ComandoUsar</class-id> <selector>objeto</selector></remove-selector><do-it>ComandoUsar organization removeCategory: #accessing</do-it><class><name>ComandoUsar</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><remove-selector><class-id>Pocion</class-id> <selector>usar:objeto:</selector></remove-selector><remove-selector><class-id>ParedAdyacente</class-id> <selector>usar:</selector></remove-selector><methods><class-id>Martillo</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| paredes |		paredes:=self posicion obtenerParedesAdy.	paredes do:[:each | 		(each estado) class = EstadoSinRomper		ifTrue:[self agregarComando:(ComandoRomper new receptor:each; martillo:self)]].</body></methods><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.	self martillo generarComandos.	unPersonaje actualizarComandos.</body></methods><remove-selector><class-id>Puerta</class-id> <selector>usar:objeto:</selector></remove-selector><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.	self martillo generarComandos.	martillo hola.	unPersonaje actualizarComandos.</body></methods><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-paredAdy.txt'.juego:= JuegoFactoryMethod new crearJuego:ruta numero:0.</do-it><do-it>(juego laberinto getHabId:1) hijos</do-it><do-it>(juego laberinto getHabId:1) hijos at:1</do-it><do-it>((juego laberinto getHabId:1) hijos at:1) generarComandos</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-paredAdy.txt'.juego:= JuegoFactoryMethod new crearJuego:ruta numero:0.((juego laberinto getHabId:1) hijos at:1) generarComandos</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-paredAdy.txt'.juego:= JuegoFactoryMethod new crearJuego:ruta numero:0.((juego laberinto getHabId:1) hijos at:1) generarComandos</do-it><do-it>(juego laberinto getHabId:1)</do-it><do-it>(juego laberinto getHabId:1)</do-it><do-it>(juego laberinto getHabId:1) forma norte.</do-it><do-it>(juego laberinto getHabId:1) forma norte estado:EstadoRota new.</do-it><do-it>(juego laberinto getHabId:1) forma norte estado:EstadoRota new.</do-it><do-it>ruta:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-paredAdy.txt'.juego:= JuegoFactoryMethod new crearJuego:ruta numero:0.(juego laberinto getHabId:1) forma norte estado:EstadoRota new.</do-it><do-it>((juego laberinto getHabId:1) hijos at:1) generarComandos.</do-it><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.	self martillo quitarComando:self.	unPersonaje actualizarComandos.</body></methods><do-it>XProgramming.SUnit.JuegoLaberintoTest renameTo: #LaberintoA24</do-it><class><name>Laberinto4HexagonosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>JuegoLaberintoTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><class><name>Laberinto4RectangulosTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>juego </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoTest</package></attributes></class><methods><class-id>Laberinto4RectangulosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp		"juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-rectangulos4.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-rectangulos4.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc.</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaRectangulo]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 |	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma este class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).	self assert:(hab4 forma oeste class = Puerta).</body></methods><methods><class-id>Laberinto4RectangulosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Laberinto4HexagonosTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	"	juego:=JuegoLaberinto new.	conf:=ParserConfig new.	conf procesarConfig:'C:\Users\jag\CloudStation\diseno de sw\curso14-15\patrones\config-4hexagonosNS.txt'. 	juego nuevoNivel:conf construirLaberinto."	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\Jose.Gallud\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-4hexagonosNS.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.			self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma noreste class = Puerta).	self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma sureste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma noroeste class = Puerta).		self assert:(hab3 forma noreste class = Puerta).			self assert:(hab4 forma suroeste class = Puerta).</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLaberintoTieneHabitaciones">testLaberintoTieneHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size&gt;0)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>Laberinto4HexagonosTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	juego := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest class</class-id> <category>instance creation</category><body package="LaberintoTest" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego:">juego: anObject	juego := anObject</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>accessing</category><body package="LaberintoTest" selector="juego">juego	^juego</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaLenovo rutaPc |	rutaLenovo:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	rutaPc:='C:\Users\jag\CloudStation\diseno de sw\curso14-15\archivosConfiguracion\config-hexagonosNS10-llave-sable-armario.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:3.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBichosTienenPosicion">testBichosTienenPosicion	| bichos |	bichos:=juego bichos.	self assert: (bichos detect:[:each | each posicion isNil] ifNone:[^true])</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego obtenerHabitacion:1.	hab2:=juego obtenerHabitacion:2.		hab3:=juego obtenerHabitacion:3.		hab4:=juego obtenerHabitacion:4.		hab5:=juego obtenerHabitacion:5.	hab6:=juego obtenerHabitacion:6.	hab7:=juego obtenerHabitacion:7.	hab8:=juego obtenerHabitacion:8.	hab9:=juego obtenerHabitacion:9.	hab10:=juego obtenerHabitacion:10.	self assert:(hab1 forma norte class = Puerta).	self assert:(hab1 forma sureste class = Puerta).		self assert:(hab2 forma sur class = Puerta).	self assert:(hab2 forma noreste class = Puerta).	self assert:(hab3 forma suroeste class = Puerta).	self assert:(hab3 forma sureste class = Puerta).		self assert:(hab4 forma noroeste class = Puerta).			self assert:(hab4 forma sureste class = Puerta).	self assert:(hab5 forma noroeste class = Puerta).	self assert:(hab5 forma noreste class = Puerta).	self assert:(hab5 forma sureste class = Puerta).	self assert:(hab5 forma sur class = Puerta).	self assert:(hab6 forma suroeste class = Puerta).	self assert:(hab6 forma sur class = Puerta).	self assert:(hab7 forma noroeste class = Puerta).	self assert:(hab7 forma norte class = Puerta).	self assert:(hab7 forma suroeste class = Puerta).	self assert:(hab8 forma norte class = Puerta).	self assert:(hab8 forma noreste class = Puerta).	self assert:(hab8 forma suroeste class = Puerta).	self assert:(hab9 forma noreste class = Puerta).	self assert:(hab9 forma noroeste class = Puerta).	self assert:(hab10 forma sureste class = Puerta).	self assert:(hab10 forma noroeste class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testLlave">testLlave	| hab |	hab:=juego laberinto obtenerHabitacion:10.	self deny:(hab hijos detect:[:each | each class = Llave] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneNetScreen">testJuegoTieneNetScreen	| netscreen |	netscreen:=juego netscreen.	self deny:(netscreen isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTiene3Bichos">testJuegoTiene3Bichos	| bichos |	bichos:=juego bichos.	self assert: bichos size =3.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testArmarios">testArmarios	| hab |	hab:=juego laberinto obtenerHabitacion:1.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:3.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:6.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.		hab:=juego laberinto obtenerHabitacion:8.	self deny:(hab hijos detect:[:each | each class = Armario] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = FormaHexagonoNS]) size =lab habitaciones size)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoUsuario">testJuegoUsuario	| usr ns |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneLaberinto">testJuegoTieneLaberinto	| lab |	lab:=juego laberinto.	self deny:(lab isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=10)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testJuegoTieneBichos">testJuegoTieneBichos	| bichos |	bichos:=juego bichos.	self assert: bichos size &gt;=1.	self deny:(bichos isNil)</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testBlackHole">testBlackHole	| hab |	hab:=juego laberinto obtenerHabitacion:4.	self deny:(hab hijos detect:[:each | each class = BlackHoleBox] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>testing</category><body package="LaberintoTest" selector="testSableLaser">testSableLaser	| hab |	hab:=juego laberinto obtenerHabitacion:7.	self deny:(hab hijos detect:[:each | each class = SableLaser] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>initialize-release</category><body package="LaberintoTest" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>XProgramming.SUnit.JuegoLaberintoTest</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaPc |	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-A-24.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:3.</body></methods><do-it>XProgramming.SUnit.JuegoLaberintoTest renameTo: #LaberintoParedAdy</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaPc |	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-2hab-paredAdy.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr |	usr:=Personaje nombre:'Pepe' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=2)</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaPc |	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testNumeroHabitaciones">testNumeroHabitaciones	| lab |	lab:=juego laberinto.	self assert:(lab habitaciones size=4)</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab2 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego laberinto getHabId:1.	hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab3 hab4 hab5 hab6 hab7 hab8 hab9 hab10|	hab1:=juego laberinto getHabId:1.	hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab3 hab4 hab6 hab7 hab8 hab9 hab10|	hab1:=juego laberinto getHabId:1.	hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab3 hab4 hab7 hab8 hab9 hab10|	hab1:=juego laberinto getHabId:1.	hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab3 hab4 hab7 hab8 hab9|	hab1:=juego laberinto getHabId:1.	hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab3 hab4 hab7 hab8|	hab1:=juego laberinto getHabId:1.	hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab3 hab4 hab7|	hab1:=juego laberinto getHabId:1.	hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab3 hab4|	hab1:=juego laberinto getHabId:1.	hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testLlave">testLlave	| hab |	hab:=juego laberinto getHabId:3.	self deny:(hab hijos detect:[:each | each class = Llave] ifNone:[nil]) isNil.</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testJuegoTiene3Bichos</selector></remove-selector><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testJuegoTieneBichos</selector></remove-selector><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testFormaHabitacion">testFormaHabitacion	| lab |	lab:=juego laberinto.	self assert:((lab habitaciones select:[:each | each forma class = Rectangulo]) size =lab habitaciones size)</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testBlackHole</selector></remove-selector><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testBichosTienenPosicion</selector></remove-selector><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testParedesAdyacentes">testParedesAdyacentes	| hab1 hab2 hab4|	hab1:=juego laberinto getHabId:1.	hab2:=juego laberinto getHabId:2.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma norte class = ParedAdyacente).	self assert:(hab2 forma sur class = ParedAdyacente).	self assert:(hab2 forma este class = ParedAdyacente).		self assert:(hab4 forma oeste class = ParedAdyacente).</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testJuegoTieneNetScreen</selector></remove-selector><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testJuegoTieneLaberinto</selector></remove-selector><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 7, 2015' '7:46:10 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 19:46:10 on 7 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 7, 2015' '7:46:18 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 19:46:18 on 7 de mayo de 2015."</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr ns |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	juego agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr ns |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	juego asignarHabitacion:usr.	juego netscreen agregarPersonaje:usr.	juego agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 7, 2015' '8:05:06 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:05:06 on 7 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 7, 2015' '8:05:15 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 20:05:15 on 7 de mayo de 2015."</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr ns |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr ns |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	"usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'"</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr ns |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.	ns:=juego netscreen.	ns personajes size.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.	ns:=juego netscreen.	(ns personajes at:1) nombre = 'Pepe'.</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr ns |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Alberto'</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		</body></methods><do-it>usr actualizarComandos.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.usr actualizarComandos.</do-it><do-it>usr comandos at:3.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.usr actualizarComandos.usr comandos at:3.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.usr comandos at:3.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '12:06:17 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 00:06:17 on 8 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '12:06:19 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 00:06:19 on 8 de mayo de 2015."</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos at:3) ejecutar:usr.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos at:3) ejecutar:usr.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos at:3) ejecutar:usr.usr.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos at:3) ejecutar:usr.usr.</do-it><do-it>hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]).</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.usr.</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(usr equipamiento at:1 = Pocion).</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.usr equipamiento at:1.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.usr equipamiento at:1.</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(usr equipamiento at:1 class = Pocion).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:((usr equipamiento at:1 class) = Pocion).</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.usr equipamiento.</do-it><do-it>usr equipamiento at:1.</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	"self assert:((usr equipamiento at:1 class) = Pocion)."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self deny:(hab hijos detect:[:each | each class ~= Pocion] ifNone:[nil]) isNil.	"self assert:((usr equipamiento at:1 class) = Pocion)."</body></methods><do-it>hab hijos</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	"self assert:((usr equipamiento at:1 class) = Pocion)."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"		(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=usr equipamiento detect:[:each | each class = Pocion] vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = vidasPersonaje + vidasPocion).</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.usr estadoSalud vidas</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.usr equipamiento detect:[:each | each class = Pocion].</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = vidasPersonaje + vidasPocion).</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.</do-it><do-it>	vidasPersonaje:=usr estadoSalud vidas.</do-it><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas. 	vidasPersonaje:=usr estadoSalud vidas.(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.usr estadoSalud vidas</do-it><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPocion">testPocion	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejar">testDejar	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejar">testDejar	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Dejamos la pocion"	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejarObjeto">testDejarObjeto	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Dejamos la pocion"	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.	(usr comandos detect:[:a | (a class) = ComandoDejar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejarObjeto">testDejarObjeto	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Dejamos un objeto"	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.	(usr comandos detect:[:a | (a class) = ComandoDejar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testCogerObjeto">testCogerObjeto	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Dejamos un objeto"	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.	(usr comandos detect:[:a | (a class) = ComandoDejar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testCogerObjeto">testCogerObjeto	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testDejar</selector></remove-selector><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejarObjeto">testDejarObjeto	| hab usr |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.		"Dejamos un objeto"	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.	(usr comandos detect:[:a | (a class) = ComandoDejar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarPocion">testUsarPocion	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testPocion</selector></remove-selector><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarPocion">testUsarPocion	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testArmarios</selector></remove-selector><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr |	usr:=Personaje nombre:'Alberto' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr ns |	usr:=Personaje nombre:'Alberto' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.	ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr ns |	usr:=Personaje nombre:'Alberto' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.		ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Pepe'</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr ns |	usr:=Personaje nombre:'Alberto' juego:juego.	juego agregarPersonaje:usr.	self assert:  (usr posicion isNil) not.		ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Alberto'</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr ns |	usr:=Personaje nombre:'Alberto' juego:juego.	juego agregarPersonaje:usr.	self deny:  (usr posicion isNil) .		ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Alberto'</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsuarioTienePosicion">testUsuarioTienePosicion	| usr ns |	usr:=Personaje nombre:'Alberto' juego:juego.	juego agregarPersonaje:usr.	self deny: (usr posicion isNil) .		ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Alberto'</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testAddPersonaje">testAddPersonaje	| usr ns |	usr:=Personaje nombre:'Alberto' juego:juego.	juego agregarPersonaje:usr.	self deny: (usr posicion isNil) .		ns:=juego netscreen.	self assert:  ns personajes size =1.	self assert: (ns personajes at:1) nombre = 'Alberto'</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testUsuarioTienePosicion</selector></remove-selector><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testJuegoUsuario</selector></remove-selector><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testParedesAdyacentes">testParedesAdyacentes	| hab1 hab2 hab4|	hab1:=juego laberinto getHabId:1.	hab2:=juego laberinto getHabId:2.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma norte class = ParedAdyacente).	self assert:(hab2 forma sur class = ParedAdyacente).	self assert:(hab2 forma este class = ParedAdyacente).		self assert:(hab4 forma oeste class = ParedAdyacente).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testPuertas">testPuertas	| hab1 hab3 hab4|	hab1:=juego laberinto getHabId:1.	hab3:=juego laberinto getHabId:3.		hab4:=juego laberinto getHabId:4.	self assert:(hab1 forma este class = Puerta).	self assert:(hab3 forma norte class = Puerta).	self assert:(hab3 forma oeste class = Puerta).		self assert:(hab4 forma sur class = Puerta).</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <selector>testSableLaser</selector></remove-selector><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testCogerObjeto">testCogerObjeto	| hab usr |	hab:=juego laberinto getHabId:2.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoParedAdy</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejarObjeto">testDejarObjeto	| hab usr |	hab:=juego laberinto getHabId:2.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.		"Dejamos un objeto"	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.	(usr comandos detect:[:a | (a class) = ComandoDejar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><do-it>XProgramming.SUnit.LaberintoParedAdy renameTo: #LaberintoExamen</do-it><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarPocion">testUsarPocion	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejarObjeto">testDejarObjeto	| hab usr |	hab:=juego laberinto getHabId:2.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Dejamos un objeto"	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.	(usr comandos detect:[:a | (a class) = ComandoDejar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <selector>testCogerObjeto</selector></remove-selector><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont vidasPersonaje |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0	usr comandos do:[:each |		each class = ComandoRomper		ifTrue:[cont:= cont + 1.]		].		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0	usr comandos do:[:each |		each class = ComandoRomper		ifTrue:[cont:= cont + 1.]		].		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each |		each class = ComandoRomper		ifTrue:[cont:= cont + 1.]		].		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared"			"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.</do-it><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><do-it>rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-rectangulos-4hab-paredAdy-Pocion.txt'.juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.hab:=juego laberinto getHabId:2.usr:=Personaje nombre:'Alberto' juego:juego.usr asignarHabitacion:hab.juego netscreen agregarPersonaje:usr.posIni:=usr posicion.</do-it><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	"self assert:((hab norte estado) class = EstadoRota)."	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab forma norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab forma norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.		"Cruzamos la pared rota"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab forma norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.		"Cruzamos la pared rota"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posFin ~= 2).	self assert:(posIni = posFin).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab forma norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.		"Cruzamos la pared rota"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posFin ~= 2).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab forma norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.		"Cruzamos la pared rota"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posFin = 2).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab forma norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.		"Cruzamos la pared rota"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posFin = juego laberinto getHabId:2).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab forma norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.		"Cruzamos la pared rota"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posFin = (juego laberinto getHabId:2)).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos la pocion"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab forma norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.		"Cruzamos la pared rota"	posIni:=usr posicion.	self assert:(posFin = (juego laberinto getHabId:1)).	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posFin = (juego laberinto getHabId:2)).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testUsarMartillo">testUsarMartillo	| hab usr cont posIni posFin |	hab:=juego laberinto getHabId:1.	self deny:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Intentamos cruzar la pared sin romper"	posIni:=usr posicion.	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posIni = posFin).		"Cogemos el martillo"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.		cont:=0.	usr comandos do:[:each | each class = ComandoRomper ifTrue:[cont:= cont + 1.]].	self assert:(cont = 1).		"Usamos el martillo"	(usr comandos detect:[:a | (a class) = ComandoRomper]) ejecutar:usr.	self assert:((hab forma norte estado) class = EstadoRota).	self deny:(usr equipamiento detect:[:each | each class = Martillo] ifNone:[nil]) isNil.	self assert:(usr comandos detect:[:a | (a class) = ComandoRomper] ifNone:[nil]) isNil.		"Cruzamos la pared rota"	posIni:=usr posicion.	self assert:(posFin = (juego laberinto getHabId:1)).	(usr comandos detect:[:a | (a class) = ComandoAtravesar]) ejecutar:usr.	posFin:=usr posicion.	self assert:(posFin = (juego laberinto getHabId:2)).</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '1:21:21 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 01:21:21 on 8 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '1:21:35 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 01:21:35 on 8 de mayo de 2015."</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Bomba</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Bomba</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Bomba removeFromSystem</do-it><class><name>Bomba</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Bomba</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	" *** This method was defined by ElementoHoja as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><comment><class-id>ComandoAtravesar</class-id><body>ComandoAtravesar atraviesa las paredes adyacentes.</body></comment><comment><class-id>Martillo</class-id><body>Martillo permite romper paredes adyacentes.</body></comment><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirElementos">construirElementos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].	listaMartillos do:[:each | builder construirMartillo:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirElementos:">construirElementos:builder	|  n1 or1 parte2 n2 or2 |		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].	listaMartillos do:[:each | builder construirMartillo:each].		^builder obtenerLaberinto.</body></methods><remove-selector><class-id>ParserConfig</class-id> <selector>construirElementos</selector></remove-selector><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirElementos:">construirElementos:builder	| n1 or1 parte2 n2 or2 |		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].	listaMartillos do:[:each | builder construirMartillo:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].	listaMartillos do:[:each | builder construirMartillo:each].		^self construirElementos:builder.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 or2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		^self construirElementos:builder.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 n2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		^self construirElementos:builder.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 parte2 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		^self construirElementos:builder.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 or1 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		^self construirElementos:builder.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder n1 |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		^self construirElementos:builder.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoRectangulos">construirLaberintoRectangulos	| builder |	builder:= catalogo at:forma.	builder construirLaberinto.		1 to:numHab do:[:ind | builder construirHabitacion:ind].		^self construirElementos:builder.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder n1 or1 parte2 n2 or2 cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionNS:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionEO:cont. cont:=cont+1].		^self construirElementos:builder.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoHexagonos">construirLaberintoHexagonos	| builder cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabHexNS do:[:ind | builder construirHabitacionNS:cont. cont:=cont+1].	1 to:numHabHexEO do:[:ind | builder construirHabitacionEO:cont. cont:=cont+1].		^self construirElementos:builder.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirLaberintoTriangulos">construirLaberintoTriangulos	| builder cont |	builder:= catalogo at:forma.	builder construirLaberinto.		cont:=1.	1 to:numHabN do:[:ind | builder construirHabitacionN:cont. cont:=cont+1].	1 to:numHabS do:[:ind | builder construirHabitacionS:cont. cont:=cont+1].	1 to:numHabO do:[:ind | builder construirHabitacionO:cont. cont:=cont+1].	1 to:numHabE do:[:ind | builder construirHabitacionE:cont. cont:=cont+1].		^self construirElementos:builder.</body></methods><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO listaArmarios listaCofres listaSables listaLlaves listaPociones listaLlavesMaestras listaParedesAdy listaMartillos numBombas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'numBombas'</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [listaLlaves add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 9 to:linea size) asNumber].		clave = 'cofre' ifTrue: [listaCofres add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'sable' ifTrue: [listaSables add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'pocion' ifTrue: [listaPociones add:(linea copyFrom: 8 to:linea size) asNumber].		clave = 'llaveMaestra' ifTrue: [listaLlavesMaestras add:(linea copyFrom: 14 to:linea size) asNumber].		clave = 'paredAdyacente' ifTrue: [listaParedesAdy add:(linea copyFrom: 16 to:linea size)].		clave = 'martillo' ifTrue: [listaMartillos add:(linea copyFrom: 10 to:linea size) asNumber].		clave = 'bomba' ifTrue: [numBombas:= (linea copyFrom: 7 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numBombas">numBombas	^numBombas</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="numBombas:">numBombas: anObject	^numBombas := anObject</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto getHabId:1.	bomba:= Bomba new.	bomba nombre:'Llave'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.</body></methods><class><name>ComandoDesactivar</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoDesactivar</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ComandoDesactivar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje	" *** This method was defined by Comando as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="generarHabAleatoria">generarHabAleatoria	^self getHabId:(((Random new next) * (habitaciones size)) truncated + 1).</body></methods><methods><class-id>Laberinto</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unEnteAutonomo		unEnteAutonomo asignarHabitacion:self generarHabAleatoria.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto generarHabAleatoria.	bomba:= Bomba new.	bomba nombre:'Llave'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto generarHabAleatoria.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto generarHabAleatoria.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	hab add:bomba.</body></methods><class><name>Desactivador</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Desactivador</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	" *** This method was defined by ElementoHoja as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		</body></methods><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| puertas |		puertas:=self posicion obtenerPuertas.	puertas do:[:each | self agregarComando:(ComandoUsar new receptor:each)].</body></methods><remove-selector><class-id>Puerta</class-id> <selector>entrar:</selector></remove-selector><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| bombas |		bombas:=self posicion obtenerBombas.	bombas do:[:each | self agregarComando:(ComandoDesactivar new receptor:each)].</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerPuertas">obtenerPuertas		| bombas |	bombas:=List new.	self orientaciones do:[:each | 		((each obtenerSuperficieDe:self forma) class) = Bomba		ifTrue:[bombas add:(each obtenerSuperficieDe:self forma)]].	^bombas.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerBombas">obtenerBombas		| bombas |	bombas:=List new.	self orientaciones do:[:each | 		((each obtenerSuperficieDe:self forma) class) = Bomba		ifTrue:[bombas add:(each obtenerSuperficieDe:self forma)]].	^bombas.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerPuertas">obtenerPuertas		| puertas |	puertas:=List new.	self orientaciones do:[:each | 		((each obtenerSuperficieDe:self forma) class) = Puerta		ifTrue:[puertas add:(each obtenerSuperficieDe:self forma)]].	^puertas.</body></methods><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| bombas |		bombas:=self posicion obtenerBombas.	bombas do:[:each | self agregarComando:(ComandoDesactivar new receptor:each;objeto:self)].</body></methods><class><name>ComandoDesactivar</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objeto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoDesactivar</class-id> <category>accessing</category><body package="Laberinto" selector="objeto">objeto	^objeto</body></methods><methods><class-id>ComandoDesactivar</class-id> <category>accessing</category><body package="Laberinto" selector="objeto:">objeto: anObject	objeto := anObject</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>objeto</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>objeto</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>ComandoDesactivar</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars>desactivador </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>ComandoDesactivar</class-id> <category>accessing</category><body package="Laberinto" selector="objeto">objeto	^desactivador</body></methods><methods><class-id>ComandoDesactivar</class-id> <category>accessing</category><body package="Laberinto" selector="objeto:">objeto: anObject	desactivador := anObject</body></methods><methods><class-id>ComandoDesactivar</class-id> <category>accessing</category><body package="Laberinto" selector="desactivador">desactivador	^desactivador</body></methods><remove-selector><class-id>ComandoDesactivar</class-id> <selector>objeto</selector></remove-selector><methods><class-id>ComandoDesactivar</class-id> <category>accessing</category><body package="Laberinto" selector="desactivador:">desactivador: anObject	desactivador := anObject</body></methods><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| bombas |		bombas:=self posicion obtenerBombas.	bombas do:[:each | self agregarComando:(ComandoDesactivar new receptor:each;desactivador:self)].</body></methods><remove-selector><class-id>ComandoDesactivar</class-id> <selector>objeto:</selector></remove-selector><class><name>ParserConfig</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catalogo forma numHab listaPuertas numHabN numHabS numHabE numHabO holeHab numHabHexNS numHabHexEO listaArmarios listaCofres listaSables listaLlaves listaPociones listaLlavesMaestras listaParedesAdy listaMartillos numBombas listaDesactivadores </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>LaberintoBuilder</package></attributes></class><do-it>ParserConfig addInstVarName: 'listaDesactivadores'</do-it><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="procesarConfig:">procesarConfig:unArchivo	| stream linea clave |	stream := unArchivo asFilename readStream.		[ stream atEnd] whileFalse: [		linea := stream upTo: Character cr.		clave := linea copyUpTo: $,.		clave = 'forma' ifTrue: [forma:= linea copyFrom: 7 to:linea size].		clave = 'hab' ifTrue: [numHab:= (linea copyFrom: 5 to:linea size) asNumber].		clave = 'habn' ifTrue: [numHabN:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habs' ifTrue: [numHabS:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habe' ifTrue: [numHabE:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habo' ifTrue: [numHabO:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'habNS' ifTrue: [numHabHexNS:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'habEO' ifTrue: [numHabHexEO:= (linea copyFrom: 7 to:linea size) asNumber]. 		clave = 'puerta' ifTrue: [listaPuertas add:(linea copyFrom: 8 to:linea size)].		clave = 'hole' ifTrue: [holeHab:= (linea copyFrom: 6 to:linea size) asNumber].		clave = 'llave' ifTrue: [listaLlaves add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'armario' ifTrue: [listaArmarios add:(linea copyFrom: 9 to:linea size) asNumber].		clave = 'cofre' ifTrue: [listaCofres add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'sable' ifTrue: [listaSables add:(linea copyFrom: 7 to:linea size) asNumber].		clave = 'pocion' ifTrue: [listaPociones add:(linea copyFrom: 8 to:linea size) asNumber].		clave = 'llaveMaestra' ifTrue: [listaLlavesMaestras add:(linea copyFrom: 14 to:linea size) asNumber].		clave = 'paredAdyacente' ifTrue: [listaParedesAdy add:(linea copyFrom: 16 to:linea size)].		clave = 'martillo' ifTrue: [listaMartillos add:(linea copyFrom: 10 to:linea size) asNumber].		clave = 'bomba' ifTrue: [numBombas:= (linea copyFrom: 7 to:linea size) asNumber].		clave = 'desactivador' ifTrue: [listaDesactivadores add:(linea copyFrom: 14 to:linea size) asNumber].		].	stream close.</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaDesactivadores">listaDesactivadores	^listaDesactivadores</body></methods><methods><class-id>ParserConfig</class-id> <category>accessing</category><body package="LaberintoBuilder" selector="listaDesactivadores:">listaDesactivadores: anObject	listaDesactivadores := anObject</body></methods><methods><class-id>ParserConfig</class-id> <category>initialize-release</category><body package="LaberintoBuilder" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	catalogo := Dictionary new.	listaPuertas := List new.	listaArmarios := List new.	listaCofres := List new.	listaSables := List new.	listaLlaves := List new.	listaPociones := List new.	listaLlavesMaestras := List new.	listaParedesAdy := List new.	listaMartillos := List new.	listaDesactivadores := List new.	numBombas:=0.	numHab:=0.	numHabN:=0.	numHabS:=0.	numHabE:=0.	numHabO:=0.	numHabHexNS:=0.	numHabHexEO:=0.	self iniciarCatalogo.	^self</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirElementos:">construirElementos:builder	| n1 or1 parte2 n2 or2 |		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].	listaMartillos do:[:each | builder construirMartillo:each].	listaDesactivadores do:[:each | builder construirMartillo:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirElementos:">construirElementos:builder	| n1 or1 parte2 n2 or2 |		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].	listaMartillos do:[:each | builder construirMartillo:each].	listaDesactivadores do:[:each | builder construirDesactivador:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirDesactivador:">construirDesactivador:unId	| hab desactivador |	hab:=self laberinto getHabId:unId.	desactivador:= Desactivador new.	desactivador nombre:'Desactivador'.	desactivador posicion:hab.	desactivador comandos add:(ComandoCoger new receptor:desactivador).	hab add:desactivador.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos">actualizarComandos	|lista|	lista := List new.	lista addAll:self comandos.	self comandos removeAll:lista.	self comandos addAll:self posicion obtenerComandos.	self equipamiento do:[:each | each generarComandos].	self equipamiento do:[:each | self comandos addAll:each comandos].</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComados">actualizarComados	self comandos:List new.	self generarComandos.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos">actualizarComandos	|lista|	lista := List new.	lista addAll:self comandos.	self comandos removeAll:lista.	self comandos addAll:self posicion obtenerComandos.	self equipamiento do:[:each | each actualizarComados].	self equipamiento do:[:each | self comandos addAll:each comandos].</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos">actualizarComandos	|lista|	lista := List new.	lista addAll:self comandos.	self comandos removeAll:lista.	self comandos addAll:self posicion obtenerComandos.	self equipamiento do:[:each | each actualizarPosicion].	self equipamiento do:[:each | each actualizarComados].	self equipamiento do:[:each | self comandos addAll:each comandos].</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos">actualizarComandos	|lista|	lista := List new.	lista addAll:self comandos.	self comandos removeAll:lista.	self comandos addAll:self posicion obtenerComandos.	self equipamiento do:[:each | each actualizarPosicion:self posicion].	self equipamiento do:[:each | each actualizarComados].	self equipamiento do:[:each | self comandos addAll:each comandos].</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarPosicion:">actualizarPosicion:unaHab	self posicion:unaHab.</body></methods><methods><class-id>ComandoRomper</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor romper.	"self martillo quitarComando:self."	unPersonaje actualizarComandos.</body></methods><methods><class-id>Martillo</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos		| paredes |		paredes:=self posicion obtenerParedesAdy.	paredes do:[:each | 		(each estado) class = EstadoSinRomper		ifTrue:[self agregarComando:(ComandoRomper new receptor:each)]].</body></methods><remove-selector><class-id>ComandoRomper</class-id> <selector>martillo:</selector></remove-selector><remove-selector><class-id>ComandoRomper</class-id> <selector>martillo</selector></remove-selector><do-it>ComandoRomper organization removeCategory: #accessing</do-it><class><name>ComandoRomper</name><environment>Smalltalk</environment><super>Comando</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejarObjeto">testDejarObjeto	| hab usr |	hab:=juego laberinto getHabId:2.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Dejamos un objeto	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.	(usr comandos detect:[:a | (a class) = ComandoDejar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejarObjeto">testDejarObjeto	| hab usr |	hab:=juego laberinto getHabId:2.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Dejamos un objeto"	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.	(usr comandos detect:[:a | (a class) = ComandoDejar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComados">actualizarComados			self comandos:List new.	self generarComandos.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComados">actualizarComados	self comandos:List new.	self generarComandos.	self agregarComando:(ComandoDejar new receptor:self).</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComados">actualizarComados	self comandos:List new.	self agregarComando:(ComandoDejar new receptor:self).	self generarComandos.</body></methods><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| bombas |		bombas:=self posicion obtenerBombas.	bombas do:[:each | self agregarComando:(ComandoDesactivar new receptor:each)].</body></methods><methods><class-id>ComandoAtravesar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor entrar:unPersonaje.	unPersonaje actualizarComandos.</body></methods><methods><class-id>ComandoDesactivar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor desactivar.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="desactivar">desactivar	</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="desactivar">desactivar	self agregarComando:(ComandoCoger new receptor:self).</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto generarHabAleatoria.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	hab add:bomba.	Transcript show:'Bomba en',hab id.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto generarHabAleatoria.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	hab add:bomba.</body></methods><methods><class-id>ParserConfig</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirElementos:">construirElementos:builder	| n1 or1 parte2 n2 or2 |		self listaPuertas do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirPuertaDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		self listaParedesAdy do:[:each |		n1:= (each copyUpTo:$,) asNumber.		or1:= each copyFrom:4 to:(each indexOf:$/)-1.		parte2:=each copyFrom:(each indexOf:$/)+1 to: each size.		n2:= (parte2 copyUpTo:$,) asNumber.		or2:= parte2 copyFrom:4 to:parte2 size.		builder construirParedAdyDe:n1 orientacion:(catalogo at:or1) a:n2 orientacion:(catalogo at:or2).		].		holeHab isNil ifFalse: [builder addHole:holeHab].	listaLlaves do:[:each | builder construirLlave:each].	listaArmarios do:[:each | builder construirArmario:each].	listaCofres do:[:each | builder construirCofre:each].	listaSables do:[:each | builder construirSable:each].	listaPociones do:[:each | builder construirPocion:each].	listaLlavesMaestras do:[:each | builder construirLlaveMaestra:each].	listaMartillos do:[:each | builder construirMartillo:each].	1 to:numBombas do: [:a | builder construirBomba].	listaDesactivadores do:[:each | builder construirDesactivador:each].		^builder obtenerLaberinto.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto generarHabAleatoria.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	hab add:bomba.	Transcript show:'Bomba en ',hab id.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto generarHabAleatoria.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	hab add:bomba.	Transcript show:'Bomba en ',hab.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto generarHabAleatoria.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	hab add:bomba.	Transcript show:'Bomba en ',hab printString.</body></methods><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| bombas |		bombas:=self posicion obtenerBombas.	self hola.	bombas do:[:each | self agregarComando:(ComandoDesactivar new receptor:each)].</body></methods><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| bombas |		bombas:=self posicion obtenerBombas.	bombas do:[:each | self agregarComando:(ComandoDesactivar new receptor:each)].</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerBombas">obtenerBombas		| bombas |	bombas:=List new.	self hijos do:[:each | 		(each class) = Bomba		ifTrue:[bombas add:each ]].	^bombas.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="obtenerBombas">obtenerBombas		| bombas |	bombas:=List new.	self hijos do:[:each | 		(each class) = Bomba		ifTrue:[bombas add:each]].	^bombas.</body></methods><methods><class-id>ComandoDesactivar</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Desactivar--&gt;',self receptor printString.</body></methods><methods><class-id>ComandoCoger</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Coger--&gt;',self receptor nombre.</body></methods><methods><class-id>ComandoDejar</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Dejar--&gt;',self receptor nombre.</body></methods><methods><class-id>ComandoDesactivar</class-id> <category>printing</category><body package="Laberinto" selector="printOn:">printOn:aStream	aStream nextPutAll:'Desactivar--&gt;',self receptor nombre.</body></methods><methods><class-id>ComandoDesactivar</class-id> <category>operaciones</category><body package="Laberinto" selector="ejecutar:">ejecutar:unPersonaje		receptor desactivar.	unPersonaje actualizarComandos.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="activarBombas:">activarBombas:unPersonaje	| bombas |		bombas:=self obtenerBombas.</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="activarBombas:">activarBombas:unPersonaje	(self obtenerBombas) do:[:each | each activar:unPersonaje].</body></methods><methods><class-id>Habitacion</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien	alguien posicion:self.	"Transcript show:'Estoy en la habitación ',self id printString;cr."	alguien actualizarComandos.		self ocupantes add:alguien.		self activarBombas:alguien.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	unPersonaje</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="matar">matar	self estadoSalud:EstadoSaludMuerto new.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	unPersonaje matar.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	Transcript show:'La bomba explota en...'.		1 to:5 do:[:each |		Transcript show:each printString,'...'.		(Delay forSeconds:1) wait.].		unPersonaje matar.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	Transcript show:'La bomba explota en...'.		5 to:0 do:[:each |		Transcript show:each printString,'...'.		(Delay forSeconds:1) wait.].		unPersonaje matar.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	Transcript show:'La bomba explota en...'.		5 to: 1 by: -1 do:[:each |		Transcript show:each printString,'...'.		(Delay forSeconds:1) wait.].		unPersonaje matar.</body></methods><class><name>EstadoSaludMuerto</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vidas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>EstadoSaludMuerto</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		vidas := 0.		^self</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>accessing</category><body package="Laberinto" selector="vidas">vidas	^vidas</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>accessing</category><body package="Laberinto" selector="vidas:">vidas: anObject	vidas := anObject</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>accessing</category><body package="Laberinto" selector="vidas:">vidas: anObject	vidas := anObject.	self changed:#vidas.</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="crearJuego">crearJuego	self juego:(JuegoFactoryMethod new crearJuego:(self archivo) numero:0)</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unaHab	unaHab entrar:self.	self posicion:unaHab.	self actualizarComandos.		unaHab ocupantes add:self.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unaHab	unaHab entrar:self.	"self posicion:unaHab.	self actualizarComandos.	unaHab ocupantes add:self."</body></methods><methods><class-id>LaberintoGUI</class-id> <category>actions</category><body package="LaberintoGUI" selector="crearJuego">crearJuego	self juego:(JuegoFactoryMethod new crearJuego:(self archivo) numero:1)</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="asignarHabitacion:">asignarHabitacion:unaHab	self posicion:unaHab.	self actualizarComandos.	unaHab ocupantes add:self.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	Transcript show:'La bomba explota en...'.		5 to: 1 by: -1 do:[:each |		Transcript show:each printString,'...'.		(Delay forSeconds:1) wait.].	Transcript show:'BOOM!!'.		unPersonaje matar.</body></methods><class><name>Bomba</name><environment>Smalltalk</environment><super>ElementoHoja</super><private>false</private><indexed-type>none</indexed-type><inst-vars>activa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Bomba</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		activa:=false.		^self</body></methods><methods><class-id>Desactivador</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	| bombas |		bombas:=self posicion obtenerBombas.	bombas do:[:each | each activa ifTrue:[self agregarComando:(ComandoDesactivar new receptor:each)]].</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa: true.	Transcript show:'La bomba explota en...'.		5 to: 1 by: -1 do:[:each |		Transcript show:each printString,'...'.		(Delay forSeconds:1) wait.].	Transcript show:'BOOM!!'.		unPersonaje matar.</body></methods><methods><class-id>Bomba</class-id> <category>accessing</category><body package="Laberinto" selector="activa">activa	^activa</body></methods><methods><class-id>Bomba</class-id> <category>accessing</category><body package="Laberinto" selector="activa:">activa: anObject	activa := anObject</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa: true.	Transcript show:'La bomba explotara en...'.		5 to: 1 by: -1 do:[:each |		Transcript show:each printString,'...'.		(Delay forSeconds:1) wait.].	Transcript show:'BOOM!!'.		unPersonaje matar.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="desactivar">desactivar	self activa:false.		self agregarComando:(ComandoCoger new receptor:self).</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa:true.	Transcript show:'La bomba explotara en...'.		5 to: 1 by: -1 do:[:each |		Transcript show:each printString,'...'.		(Delay forSeconds:1) wait.].	Transcript show:'BOOM!!'.		unPersonaje matar.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa:true.	Transcript show:'La bomba explotara en...'.		5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].	self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.].</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa:true.	Transcript show:'La bomba explotara en...'.		5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].		self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.].</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa:true.	Transcript show:'La bomba explotara en...'.		5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].		self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.		self posicion quitarElemento:self].</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	| bicho |	self activa:true.	Transcript show:'La bomba explotara en...'.		[[true] whileTrue:[bicho camina]] fork.	5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]] fork.		self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.		self posicion quitarElemento:self].</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa:true.	Transcript show:'La bomba explotara en...'.	[5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]]] fork.		self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.		self posicion quitarElemento:self].</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa:true.	Transcript show:'La bomba explotara en...'.	[5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].	self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.		self posicion quitarElemento:self]] fork.		</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa:true.		[Transcript show:'La bomba explotara en...'.	5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].	self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.		self posicion quitarElemento:self]] fork.		</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa:true.	[Transcript show:'La bomba explotara en...'.	5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].	self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.		self posicion quitarElemento:self]] fork.		</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self activa:true.	[Transcript show:'La bomba explotara en...'.	5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].		self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.		self posicion quitarElemento:self]] fork.		</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="dejar:comando:">dejar:unPersonaje comando:unComando		self comandos:List new.	unPersonaje quitarEquipamiento:self.	unPersonaje posicion add:self.</body></methods><methods><class-id>LaberintoBuilder</class-id> <category>operaciones</category><body package="LaberintoBuilder" selector="construirBomba">construirBomba	| hab bomba |	hab:=self laberinto generarHabAleatoria.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	Transcript show:'Bomba en ',hab printString.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self comandos:List new.		self activa:true.	[Transcript show:'La bomba explotara en...'.	5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].		self activa ifTrue:[		Transcript show:'BOOM!!'.		unPersonaje matar.		self posicion quitarElemento:self]] fork.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="generarComandos">generarComandos	"borramos la posicion para evitar problemas"	self posicion:nil.</body></methods><methods><class-id>ElementoHoja</class-id> <category>operaciones</category><body package="Laberinto" selector="dejar:comando:">dejar:unPersonaje comando:unComando		self comandos:List new.	self agregarComando:(ComandoCoger new receptor:self).	unPersonaje quitarEquipamiento:self.	self posicion:unPersonaje posicion.	unPersonaje posicion add:self.</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="dejar:comando:">dejar:unPersonaje comando:unComando		self comandos:List new.	unPersonaje quitarEquipamiento:self.	self posicion:unPersonaje posicion.	unPersonaje posicion add:self.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr vidasPocion vidasPersonaje |	hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr vidasPocion vidasPersonaje bomba |	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.		hab:=juego laberinto getHabId:2.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr vidasPocion vidasPersonaje bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr vidasPocion vidasPersonaje bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(usr comandos detect:[:a | (a class) = ComandoAbrir]) ejecutar:usr.	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr vidasPocion vidasPersonaje bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos la pocion"	(hab forma norte) entrar: usr comando:nil.	(usr comandos detect:[:a | (a class) = ComandoAbrir]) ejecutar:usr.	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Usamos la pocion"	vidasPocion:=(usr equipamiento detect:[:each | each class = Pocion]) vidas.	vidasPersonaje:=usr estadoSalud vidas.	(usr comandos detect:[:a | (a class) = ComandoUsar]) ejecutar:usr.	self assert:((usr estadoSalud vidas) = (vidasPersonaje + vidasPocion)).	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	"self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil."		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>running</category><body package="LaberintoTest" selector="setUp">setUp	| rutaPc |	rutaPc:='C:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\config-examen.txt'.	juego:= JuegoFactoryMethod new crearJuego:rutaPc numero:0.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.	self assert:(bomba activa).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.	self assert:(bomba activa = true).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.	self assert:(bomba activa).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self comandos:List new.		self activa:true.	[Transcript show:'La bomba explotara en...'.	5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].		self activa ifTrue:[		Transcript show:'BOOM!!';cr.		unPersonaje matar.		self posicion quitarElemento:self]] fork.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self deny:(bomba activa).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:7) wait.	self deny:(bomba activa).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:7) wait.	Transcript show:bomba activa printString.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab usr bomba |	"Creacion de la bomba y del personaje"	hab:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab add:bomba.	self deny:(hab hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.		hab:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:7) wait.	</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:7) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:7) wait.	Transcript show:hab4 hijos printString.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).	Transcript show:hab4 hijos printString.		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	Transcript show:hab4 hijos printString.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:5) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"			"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y esperamos a que explote	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	Transcript show:usr comandos printString.	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y esperamos a que explote	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	Transcript show:usr comandos printString.	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:2) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	Transcript show:usr comandos printString.	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:2) wait.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	Transcript show:usr comandos printString.	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self assert:(hab4 hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	Transcript show:usr comandos printString.	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		"Cogemos la bomba y la dejamos"	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	Transcript show:usr comandos printString.	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		"Comprobamos que podemos coger la bomba"	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		"Comprobamos que podemos coger la bomba"	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	(Delay forSeconds:3) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		"Comprobamos que podemos coger la bomba"	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		"Comprobamos que podemos coger la bomba"	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	"(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		Comprobamos que podemos coger la bomba	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	"self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		Comprobamos que podemos coger la bomba	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:2) wait.	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	"(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		Comprobamos que podemos coger la bomba	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:2) wait.	Transcript show:usr comandos printString.	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	"(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		Comprobamos que podemos coger la bomba	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil."</body></methods><methods><class-id>Bomba</class-id> <category>operaciones</category><body package="Laberinto" selector="activar:">activar:unPersonaje	self comandos:List new.		self activa:true.	[Transcript show:'La bomba explotara en...'.	5 to: 1 by: -1 do:[:each | self activa ifTrue:[			Transcript show:each printString,'...'.			(Delay forSeconds:1) wait.]].		self activa ifTrue:[		Transcript show:'BOOM!!';cr.				unPersonaje matar.		self posicion quitarElemento:self]] fork.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:3) wait.	Transcript show:usr comandos printString.	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	"(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		Comprobamos que podemos coger la bomba	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:4) wait.	Transcript show:usr comandos printString.	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	"(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		Comprobamos que podemos coger la bomba	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDejarObjeto">testDejarObjeto	| hab usr |	hab:=juego laberinto getHabId:2.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab.	juego netscreen agregarPersonaje:usr.		"Cogemos un objeto"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.		"Dejamos un objeto"	self deny:(usr comandos detect:[:each | each class = ComandoDejar] ifNone:[nil]) isNil.	(usr comandos detect:[:a | (a class) = ComandoDejar]) ejecutar:usr.	self assert:(usr equipamiento detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(hab hijos detect:[:each | each class = Pocion] ifNone:[nil]) isNil.	self deny:(usr comandos detect:[:each | each class = ComandoCoger] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	usr actualizarComandos.	(Delay forSeconds:4) wait.	Transcript show:usr comandos printString.	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	"(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		Comprobamos que podemos coger la bomba	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil."</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	usr actualizarComandos.	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		"Comprobamos que podemos coger la bomba"	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	usr actualizarComandos.	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		"Comprobamos que podemos coger la bomba"	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil.	(bomba comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Bomba] ifNone:[nil]) isNil.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testDesactivaBomba">testDesactivaBomba	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Cogemos el desactivador"	(usr comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab3 hijos detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Desactivador] ifNone:[nil]) isNil.		"Entramos a la habitacion de la bomba y la desactivamos"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	usr actualizarComandos.	self deny:(usr comandos detect:[:a | (a class) = ComandoDesactivar] ifNone:[nil]) isNil.	(Delay forSeconds:2) wait.	(usr comandos detect:[:a | (a class) = ComandoDesactivar]) ejecutar:usr.	self deny:(bomba activa).		"Cogemos la bomba"	self deny:(bomba comandos detect:[:a | (a class) = ComandoCoger] ifNone:[nil]) isNil.	(bomba comandos detect:[:a | (a class) = ComandoCoger]) ejecutar:usr.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(usr equipamiento detect:[:each | each class = Bomba] ifNone:[nil]) isNil.</body></methods><methods><class-id>Estrategia</class-id> <category>operaciones</category><body package="Laberinto" selector="camina:">camina: unBicho		| orientacion |	self orientaciones:unBicho posicion orientaciones.		orientacion:= self siguiente.	orientacion ir:unBicho.	unBicho enviarEstado:'bicho en habitacion ',unBicho posicion printString.		(Delay forSeconds:3) wait.	unBicho atacar.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplota">testBombaExplota	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new juego:juego estrategia:SentidoHorario.	juego laberinto asignarHabitacion:bicho.	juego laberinto bichos add:bicho.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new juego:juego estrategia:SentidoHorario.	juego laberinto asignarHabitacion:bicho.	juego laberinto bichos add:bicho.	bicho asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new juego:juego estrategia:SentidoHorario.	juego laberinto bichos add:bicho.	bicho asignarHabitacion:hab3.	juego laberinto bichos add:bicho.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego estrategia:SentidoHorario.	juego laberinto bichos add:bicho.	bicho asignarHabitacion:hab3.	juego laberinto bichos add:bicho.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	juego laberinto bichos add:bicho.	bicho asignarHabitacion:hab3.	juego laberinto bichos add:bicho.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	bicho asignarHabitacion:hab3.	juego laberinto bichos add:bicho.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	bicho asignarHabitacion:hab3.	juego laberinto bichos add:bicho.		"Metemos al bicho en la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	bicho asignarHabitacion:hab3.	juego laberinto bichos add:bicho.		"Metemos al bicho en la habitacion de la bomba y esperamos a que explote"	bicho camina.	bicho posicion.	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	bicho asignarHabitacion:hab3.	juego laberinto bichos add:bicho.		"Metemos al bicho en la habitacion de la bomba y esperamos a que explote"	bicho camina.	bicho posicion.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	bicho asignarHabitacion:hab3.	juego bichos add:bicho.		"Metemos al bicho en la habitacion de la bomba y esperamos a que explote"	bicho camina.	bicho posicion.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>Puerta</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:">entrar: alguien		self estado entrar:alguien puerta:self.</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 usr bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	bicho asignarHabitacion:hab3.	juego bichos add:bicho.		"Metemos al bicho en la habitacion de la bomba y esperamos a que explote"	bicho camina.	bicho posicion.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(bicho estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	bicho asignarHabitacion:hab3.	juego bichos add:bicho.		"Metemos al bicho en la habitacion de la bomba y esperamos a que explote"	bicho camina.	bicho posicion.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(bicho estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	bicho asignarHabitacion:hab3.	juego bichos add:bicho.		"Metemos al bicho en la habitacion de la bomba y esperamos a que explote"	bicho camina.	Transcript show:bicho posicion printString.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(bicho estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaBicho">testBombaExplotaBicho	| hab3 hab4 bomba bicho |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	bicho:=Bicho new.	bicho juego:juego.	bicho estrategia:SentidoHorario new.	bicho asignarHabitacion:hab3.	juego bichos add:bicho.		"Metemos al bicho en la habitacion de la bomba y esperamos a que explote"	bicho camina. "Empieza por el norte"	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(bicho estadoSalud class = EstadoSaludMuerto).</body></methods><methods><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <category>testing</category><body package="LaberintoTest" selector="testBombaExplotaPersonaje">testBombaExplotaPersonaje	| hab3 hab4 usr bomba |	"Creacion de la bomba y del personaje"	hab4:= juego laberinto getHabId:4.	bomba:= Bomba new.	bomba nombre:'Bomba'.	bomba posicion:hab4.	bomba comandos add:(ComandoCoger new receptor:bomba).	hab4 add:bomba.	self deny:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self deny:(bomba activa).		hab3:=juego laberinto getHabId:3.	usr:=Personaje nombre:'Alberto' juego:juego.	usr asignarHabitacion:hab3.	juego netscreen agregarPersonaje:usr.		"Entramos a la habitacion de la bomba y esperamos a que explote"	(hab3 forma norte) entrar: usr comando:nil.	self assert:(bomba activa).	(Delay forSeconds:6) wait.	self assert:(hab4 hijos detect:[:each | each class = Bomba] ifNone:[nil]) isNil.	self assert:(usr estadoSalud class = EstadoSaludMuerto).</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <selector>testBombaExplota</selector></remove-selector><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '5:02:34 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 05:02:34 on 8 de mayo de 2015."</do-it><methods><class-id>Armario</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:comando:">entrar:alguien comando:unComado	" *** This method was defined by ElementoContenedor as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Armario</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:comando:">entrar:alguien comando:unComado		alguien posicion:self.	alguien actualizarComandos.	self ocupantes add:alguien.</body></methods><methods><class-id>Armario</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:comando:">entrar:alguien comando:unComado	alguien actualizarComandos.	self ocupantes add:alguien.</body></methods><methods><class-id>ElementoContenedor</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		hijos := List new.	ocupantes := List new.		^self</body></methods><methods><class-id>Habitacion</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	id := nil.	orientaciones := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><class><name>Armario</name><environment>Smalltalk</environment><super>ElementoContenedor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posicion id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Laberinto</package></attributes></class><methods><class-id>Armario</class-id> <category>initialize-release</category><body package="Laberinto" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		id:=0.		^self</body></methods><methods><class-id>Armario</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:comando:">entrar:alguien comando:unComado	alguien posicion:self.	alguien actualizarComandos.	self ocupantes add:alguien.</body></methods><methods><class-id>Armario</class-id> <category>operaciones</category><body package="Laberinto" selector="entrar:comando:">entrar:alguien comando:unComado	"alguien posicion:self."	alguien actualizarComandos.	self ocupantes add:alguien.</body></methods><remove-selector><class-id>XProgramming.SUnit.LaberintoExamen</class-id> <selector>testLlave</selector></remove-selector><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '5:17:32 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 05:17:32 on 8 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '5:17:41 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 05:17:41 on 8 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '10:26:09 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 10:26:09 on 8 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '10:26:16 AM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 10:26:16 on 8 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '12:13:02 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 12:13:02 on 8 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '12:13:05 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 12:13:05 on 8 de mayo de 2015."</do-it><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos">actualizarComandos	self estadoSalud actualizarComandos:self.</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos:">actualizarComandos:unPersonaje	|lista|	lista := List new.	lista addAll:self comandos.	self comandos removeAll:lista.	self comandos addAll:self posicion obtenerComandos.	self equipamiento do:[:each | each actualizarPosicion:self posicion].	self equipamiento do:[:each | each actualizarComados].	self equipamiento do:[:each | self comandos addAll:each comandos].</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos:">actualizarComandos:unPersonaje	unPersonaje permitirActualizar.</body></methods><methods><class-id>Personaje</class-id> <category>operaciones</category><body package="Laberinto" selector="permitirActualizar">permitirActualizar	|lista|	lista := List new.	lista addAll:self comandos.	self comandos removeAll:lista.	self comandos addAll:self posicion obtenerComandos.	self equipamiento do:[:each | each actualizarPosicion:self posicion].	self equipamiento do:[:each | each actualizarComados].	self equipamiento do:[:each | self comandos addAll:each comandos].</body></methods><methods><class-id>EstadoSaludVivo</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos:">actualizarComandos:unPersonaje	unPersonaje permitirActualizar.</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos:">actualizarComandos:unPersonaje</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos:">actualizarComandos:unPersonaje	</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos:">actualizarComandos:unPersonaje	unPersonaje comandos:List new.</body></methods><methods><class-id>EstadoSaludMuerto</class-id> <category>operaciones</category><body package="Laberinto" selector="actualizarComandos:">actualizarComandos:unPersonaje		| lista |	lista := List new.	lista addAll:unPersonaje comandos.	unPersonaje comandos removeAll:lista.</body></methods><methods><class-id>EnteAutonomo</class-id> <category>operaciones</category><body package="Laberinto" selector="matar">matar	self estadoSalud:EstadoSaludMuerto new.	self actualizarComandos.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '12:33:43 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 12:33:43 on 8 de mayo de 2015."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im' 'May 8, 2015' '12:33:49 PM')""An image file c:\Users\Alberto\Documents\VisualWorks Projects\Laberinto\Laberinto.im was created at 12:33:49 on 8 de mayo de 2015."</do-it>